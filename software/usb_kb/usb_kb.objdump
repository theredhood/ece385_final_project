
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0000ebd0 memsz 0x0000ebd0 flags r-x
    LOAD off    0x0000fbf0 vaddr 0x1000ebf0 paddr 0x10010648 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x000120a0 vaddr 0x100120a0 paddr 0x100120a0 align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000df98  100001b8  100001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000aa0  1000e150  1000e150  0000f150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  1000ebf0  10010648  0000fbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  100120a0  100120a0  000120a0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00011648  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000da0  00000000  00000000  00011670  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022a5f  00000000  00000000  00012410  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008f5c  00000000  00000000  00034e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a41b  00000000  00000000  0003ddcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001a04  00000000  00000000  000481e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002e49  00000000  00000000  00049bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010f44  00000000  00000000  0004ca35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0005d97c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005d9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000615e2  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  000615e5  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000615f1  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000615f2  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000615f3  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000615f7  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000615fb  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000615ff  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0006160a  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00061615  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00061620  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000019  00000000  00000000  0006162b  2**0
                  CONTENTS, READONLY
 28 .jdi          00005577  00000000  00000000  00061644  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00076495  00000000  00000000  00066bbb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001b8 l    d  .text	00000000 .text
1000e150 l    d  .rodata	00000000 .rodata
1000ebf0 l    d  .rwdata	00000000 .rwdata
100120a0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
100120a4 l     O .bss	00000002 ctl_reg.3190
100120a6 l     O .bss	00000002 no_device.3191
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100023c0 l     F .text	00000034 __sprint_r
1000e90e l     O .rodata	00000010 blanks.3546
1000e91e l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004408 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10005e78 l     F .text	00000008 __fp_lock
10005e80 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1000ebf0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
1000e954 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1000ea9c l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
1000a45c l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000b18c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000b920 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000ba3c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000ba68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000bb68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000bc5c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000bd48 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000bf24 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10010638 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000c1c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000c308 l     F .text	00000038 alt_dev_reg
1000f5ac l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000c5e0 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000c7e4 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000d0cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000d558 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000d6b0 l     F .text	00000050 alt_get_errno
1000d700 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
10008938 g     F .text	00000074 _mprec_log10
10008a28 g     F .text	00000084 __any_on
100096a8 g     F .text	00000064 _isatty_r
1000e984 g     O .rodata	00000028 __mprec_tinytens
1000be6c g     F .text	00000078 alt_main
1000b8dc g     F .text	00000044 __ashldi3
1000229c g     F .text	00000084 _puts_r
10012104 g     O .bss	00000100 alt_irq
1000970c g     F .text	0000006c _lseek_r
10010648 g       *ABS*	00000000 __flash_rwdata_start
1000acfc g     F .text	0000005c __eqdf2
10012394 g       *ABS*	00000000 __alt_heap_start
10002260 g     F .text	0000003c printf
1000924c g     F .text	0000005c __sseek
10005f1c g     F .text	0000010c __sinit
10006bb4 g     F .text	0000009c _setlocale_r
10005e94 g     F .text	00000078 __sfmoreglue
1000bf04 g     F .text	00000020 __malloc_unlock
10002138 g     F .text	00000080 UsbGetRetryCnt
100077f4 g     F .text	0000018c memmove
100001f4 g     F .text	00000050 IO_init
10005f0c g     F .text	00000010 _cleanup
10007a5c g     F .text	000000a8 _Balloc
1000adb4 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10009640 g     F .text	00000068 _fstat_r
100120c0 g     O .bss	00000004 errno
100120c8 g     O .bss	00000004 alt_argv
1001860c g       *ABS*	00000000 _gp
1000c198 g     F .text	00000030 usleep
1000f42c g     O .rwdata	00000180 alt_fd_list
1000db04 g     F .text	00000090 alt_find_dev
100076b4 g     F .text	00000140 memcpy
10005e88 g     F .text	0000000c _cleanup_r
1000aed8 g     F .text	000000d4 __floatsidf
1000d638 g     F .text	00000078 alt_io_redirect
1000ae7c g     F .text	0000005c __ltdf2
1000e150 g       *ABS*	00000000 __DTOR_END__
10002320 g     F .text	00000014 puts
10008894 g     F .text	000000a4 __ratio
1000c9e4 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10002234 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000b2ac g     F .text	00000008 __udivsi3
1000bbb8 g     F .text	000000a4 isatty
1000e9d4 g     O .rodata	000000c8 __mprec_tens
10006c50 g     F .text	0000000c __locale_charset
100120bc g     O .bss	00000004 __malloc_top_pad
100017d8 g     F .text	00000264 UsbGetConfigDesc2
10010614 g     O .rwdata	00000004 __mb_cur_max
10006c5c g     F .text	0000000c _localeconv_r
10007e8c g     F .text	0000003c __i2b
10006570 g     F .text	000004e4 __sfvwrite_r
1000910c g     F .text	00000064 _sbrk_r
10009778 g     F .text	0000006c _read_r
1000eff0 g     O .rwdata	0000000c __lc_ctype
10010630 g     O .rwdata	00000004 alt_max_fd
1000b6c4 g     F .text	00000104 __unpack_d
100094f0 g     F .text	0000013c _fclose_r
10005e48 g     F .text	00000030 fflush
100120b8 g     O .bss	00000004 __malloc_max_sbrked_mem
1000a7b0 g     F .text	00000054 __adddf3
10008608 g     F .text	00000148 __b2d
10009e34 g     F .text	00000628 __umoddi3
1000bd98 g     F .text	000000d4 lseek
1001060c g     O .rwdata	00000004 _global_impure_ptr
10008aac g     F .text	000005fc _realloc_r
10012394 g       *ABS*	00000000 __bss_end
1000d468 g     F .text	000000f0 alt_iic_isr_register
1000d9e0 g     F .text	00000104 alt_tick
100097e4 g     F .text	00000650 __udivdi3
1000e9ac g     O .rodata	00000028 __mprec_bigtens
10007c70 g     F .text	00000104 __s2b
1000b070 g     F .text	0000011c __floatunsidf
100083a8 g     F .text	00000058 __mcmp
10001238 g     F .text	000000fc UsbSetAddress
10006134 g     F .text	00000018 __fp_lock_all
1000d41c g     F .text	0000004c alt_ic_irq_enabled
1000d948 g     F .text	00000098 alt_alarm_stop
100120d0 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000cc alt_irq_handler
1000f404 g     O .rwdata	00000028 alt_dev_null
1000d0b0 g     F .text	0000001c alt_dcache_flush_all
10007d74 g     F .text	00000068 __hi0bits
100002b0 g     F .text	00000068 IO_read
1000afac g     F .text	000000c4 __fixdfsi
10010648 g       *ABS*	00000000 __ram_rwdata_end
10010628 g     O .rwdata	00000008 alt_dev_list
1000c218 g     F .text	000000f0 write
1000ebf0 g       *ABS*	00000000 __ram_rodata_end
1000bab8 g     F .text	000000b0 fstat
1000b898 g     F .text	00000044 __lshrdi3
100021b8 g     F .text	0000007c UsbPrintMem
10008120 g     F .text	0000012c __pow5mult
100120b0 g     O .bss	00000004 __nlocale_changed
1000b2b4 g     F .text	00000008 __umodsi3
10012394 g       *ABS*	00000000 end
1000c520 g     F .text	000000c0 altera_avalon_jtag_uart_init
100120a0 g     O .bss	00000004 i
1000e150 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000b3f4 g     F .text	000000ac __clzsi2
1000cbfc g     F .text	00000220 altera_avalon_jtag_uart_write
10006124 g     F .text	00000004 __sfp_lock_acquire
100075bc g     F .text	000000f8 memchr
100023f4 g     F .text	00001e7c ___vfprintf_internal_r
10001b38 g     F .text	000000fc UsbClassRequest
100062a0 g     F .text	000002d0 _free_r
1000df74 g     F .text	000001a0 __call_exitprocs
100120ac g     O .bss	00000004 __mlocale_changed
10010618 g     O .rwdata	00000004 __malloc_sbrk_base
100001b8 g     F .text	0000003c _start
100120d4 g     O .bss	00000004 _alt_tick_rate
1000824c g     F .text	0000015c __lshift
100120d8 g     O .bss	00000004 _alt_nticks
1000bf74 g     F .text	000000f4 read
1000c374 g     F .text	00000048 alt_sys_init
1000de44 g     F .text	00000130 __register_exitproc
10007ec8 g     F .text	00000258 __multiply
1000c888 g     F .text	00000068 altera_avalon_jtag_uart_close
1000b2bc g     F .text	00000028 __mulsi3
1000ebf0 g       *ABS*	00000000 __ram_rwdata_start
1000e150 g       *ABS*	00000000 __ram_rodata_start
100120dc g     O .bss	00000028 __malloc_current_mallinfo
10008750 g     F .text	00000144 __d2b
10001334 g     F .text	00000144 UsbGetDeviceDesc1
1000c3bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000dca8 g     F .text	000000d4 alt_get_fd
1000cf5c g     F .text	00000154 alt_busy_sleep
1000b7c8 g     F .text	000000d0 __fpcmp_parts_d
1000948c g     F .text	00000064 _close_r
1000ddc8 g     F .text	0000007c memcmp
1000c47c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10012394 g       *ABS*	00000000 __alt_stack_base
1000c4cc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004294 g     F .text	00000174 __swsetup_r
1000ab48 g     F .text	000001b4 __divdf3
10006028 g     F .text	000000fc __sfp
100089ac g     F .text	0000007c __copybits
1000effc g     O .rwdata	00000408 __malloc_av_
10006130 g     F .text	00000004 __sinit_lock_release
1000a864 g     F .text	000002e4 __muldf3
10009170 g     F .text	00000054 __sread
100020b4 g     F .text	00000084 UsbWaitTDListDone
1000db94 g     F .text	00000114 alt_find_file
1000d11c g     F .text	000000a0 alt_dev_llist_insert
1000bee4 g     F .text	00000020 __malloc_lock
1000c0e8 g     F .text	000000b0 sbrk
10005c60 g     F .text	000001e8 _fflush_r
100093c0 g     F .text	000000cc _calloc_r
100120a0 g       *ABS*	00000000 __bss_start
10007980 g     F .text	000000dc memset
10000318 g     F .text	00000dd8 main
100120cc g     O .bss	00000004 alt_envp
100120b4 g     O .bss	00000004 __malloc_max_total_mem
1000c41c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001a3c g     F .text	000000fc UsbSetConfig
100092a8 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000962c g     F .text	00000014 fclose
10012204 g     O .bss	00000190 _atexit0
10004644 g     F .text	0000161c _dtoa_r
10006e38 g     F .text	00000784 _malloc_r
10010634 g     O .rwdata	00000004 alt_errno
10006a54 g     F .text	000000a8 _fwalk
1000b200 g     F .text	00000050 __divsi3
1000eaa8 g     O .rodata	00000014 __thenan_df
10006164 g     F .text	0000013c _malloc_trim_r
10001c34 g     F .text	00000144 UsbGetHidDesc
1000e150 g       *ABS*	00000000 __CTOR_END__
100092b0 g     F .text	000000a4 strcmp
1000e150 g       *ABS*	00000000 __flash_rodata_start
1000e150 g       *ABS*	00000000 __DTOR_LIST__
1000ad58 g     F .text	0000005c __nedf2
10001144 g     F .text	00000044 UsbRead
1000c340 g     F .text	00000034 alt_irq_init
1000c068 g     F .text	00000080 alt_release_fd
1000eabc g     O .rodata	00000100 __clz_tab
100120a8 g     O .bss	00000004 _PathLocale
1000dd7c g     F .text	00000014 atexit
10009354 g     F .text	0000006c _write_r
10006c68 g     F .text	0000001c setlocale
10010610 g     O .rwdata	00000004 _impure_ptr
100120c4 g     O .bss	00000004 alt_argc
1000d218 g     F .text	0000005c _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
100085a8 g     F .text	00000060 __ulp
100090a8 g     F .text	00000038 __isinfd
1000614c g     F .text	00000018 __fp_unlock_all
10010620 g     O .rwdata	00000008 alt_fs_list
10001d78 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10006c84 g     F .text	0000000c localeconv
1000d290 g     F .text	00000050 alt_ic_isr_register
10010648 g       *ABS*	00000000 _edata
10012394 g       *ABS*	00000000 _end
100010f0 g     F .text	00000054 UsbWrite
100001b8 g       *ABS*	00000000 __ram_exceptions_end
1000c8f0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
1000d37c g     F .text	000000a0 alt_ic_irq_disable
100091c4 g     F .text	00000088 __swrite
1001061c g     O .rwdata	00000004 __malloc_trim_threshold
1000dae4 g     F .text	00000020 altera_nios2_qsys_irq_init
1000dd90 g     F .text	00000038 exit
10006afc g     F .text	000000b8 _fwalk_reent
10008400 g     F .text	000001a8 __mdiff
1000b250 g     F .text	0000005c __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006128 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000244 g     F .text	0000006c IO_write
1000e114 g     F .text	0000003c _exit
100090e0 g     F .text	0000002c __isnand
1000ce1c g     F .text	00000140 alt_alarm_start
1000b2e4 g     F .text	00000110 __muldi3
10006c90 g     F .text	000001a8 __smakebuf_r
10002334 g     F .text	0000008c strlen
1000d7f0 g     F .text	00000158 open
1000ae18 g     F .text	00000064 __gedf2
1000d274 g     F .text	0000001c alt_icache_flush_all
1001063c g     O .rwdata	00000004 alt_priority_mask
1000d2e0 g     F .text	0000009c alt_ic_irq_enable
10004270 g     F .text	00000024 __vfprintf_internal
1000a804 g     F .text	00000060 __subdf3
10007ddc g     F .text	000000b0 __lo0bits
1000164c g     F .text	0000018c UsbGetConfigDesc1
10010640 g     O .rwdata	00000008 alt_alarm_list
1000d1bc g     F .text	0000005c _do_ctors
10001188 g     F .text	000000b0 UsbSoftReset
1000b970 g     F .text	000000cc close
10001478 g     F .text	000001d4 UsbGetDeviceDesc2
1000bcc8 g     F .text	00000080 alt_load
1000b4a0 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
1000612c g     F .text	00000004 __sinit_lock_acquire
10007b2c g     F .text	00000144 __multadd
10007b04 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406e14 	ori	at,at,440
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18c84104 	addi	r3,r3,8452
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	21084104 	addi	r4,r4,8452
1000014c:	e0bffd17 	ldw	r2,-12(fp)
10000150:	100490fa 	slli	r2,r2,3
10000154:	2085883a 	add	r2,r4,r2
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
100001a4:	e037883a 	mov	sp,fp
100001a8:	dfc00117 	ldw	ra,4(sp)
100001ac:	df000017 	ldw	fp,0(sp)
100001b0:	dec00204 	addi	sp,sp,8
100001b4:	f800283a 	ret

Disassembly of section .text:

100001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001b8:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c0:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c4:	d6a18314 	ori	gp,gp,34316
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001c8:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001cc:	10882814 	ori	r2,r2,8352

    movhi r3, %hi(__bss_end)
100001d0:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d4:	18c8e514 	ori	r3,r3,9108

    beq r2, r3, 1f
100001d8:	10c00326 	beq	r2,r3,100001e8 <_start+0x30>

0:
    stw zero, (r2)
100001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e4:	10fffd36 	bltu	r2,r3,100001dc <__alt_data_end+0xf80001dc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001e8:	000bcc80 	call	1000bcc8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001ec:	000be6c0 	call	1000be6c <alt_main>

100001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f0:	003fff06 	br	100001f0 <__alt_data_end+0xf80001f0>

100001f4 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE
int i;

void IO_init(void)
{
100001f4:	deffff04 	addi	sp,sp,-4
100001f8:	df000015 	stw	fp,0(sp)
100001fc:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000200:	00800c04 	movi	r2,48
10000204:	00c00044 	movi	r3,1
10000208:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
1000020c:	00801804 	movi	r2,96
10000210:	00c00044 	movi	r3,1
10000214:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000218:	00801404 	movi	r2,80
1000021c:	00c00044 	movi	r3,1
10000220:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000224:	00802004 	movi	r2,128
10000228:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
1000022c:	00801c04 	movi	r2,112
10000230:	10000015 	stw	zero,0(r2)
}
10000234:	e037883a 	mov	sp,fp
10000238:	df000017 	ldw	fp,0(sp)
1000023c:	dec00104 	addi	sp,sp,4
10000240:	f800283a 	ret

10000244 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000244:	defffd04 	addi	sp,sp,-12
10000248:	df000215 	stw	fp,8(sp)
1000024c:	df000204 	addi	fp,sp,8
10000250:	2007883a 	mov	r3,r4
10000254:	2805883a 	mov	r2,r5
10000258:	e0fffe05 	stb	r3,-8(fp)
1000025c:	e0bfff0d 	sth	r2,-4(fp)

		*otg_hpi_address = Address;
10000260:	00802004 	movi	r2,128
10000264:	e0fffe03 	ldbu	r3,-8(fp)
10000268:	10c00015 	stw	r3,0(r2)
		*otg_hpi_cs = 0;
1000026c:	00800c04 	movi	r2,48
10000270:	10000005 	stb	zero,0(r2)
		*otg_hpi_w = 0;
10000274:	00801404 	movi	r2,80
10000278:	10000005 	stb	zero,0(r2)
		*otg_hpi_data = Data;
1000027c:	00801c04 	movi	r2,112
10000280:	e0ffff0b 	ldhu	r3,-4(fp)
10000284:	10c00015 	stw	r3,0(r2)
		*otg_hpi_w = 1;
10000288:	00801404 	movi	r2,80
1000028c:	00c00044 	movi	r3,1
10000290:	10c00005 	stb	r3,0(r2)
		*otg_hpi_cs = 1;
10000294:	00800c04 	movi	r2,48
10000298:	00c00044 	movi	r3,1
1000029c:	10c00005 	stb	r3,0(r2)
}
100002a0:	e037883a 	mov	sp,fp
100002a4:	df000017 	ldw	fp,0(sp)
100002a8:	dec00104 	addi	sp,sp,4
100002ac:	f800283a 	ret

100002b0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002b0:	defffd04 	addi	sp,sp,-12
100002b4:	df000215 	stw	fp,8(sp)
100002b8:	df000204 	addi	fp,sp,8
100002bc:	2005883a 	mov	r2,r4
100002c0:	e0bfff05 	stb	r2,-4(fp)
		alt_u16 temp;

		*otg_hpi_address = Address;
100002c4:	00802004 	movi	r2,128
100002c8:	e0ffff03 	ldbu	r3,-4(fp)
100002cc:	10c00015 	stw	r3,0(r2)
		*otg_hpi_cs = 0;
100002d0:	00800c04 	movi	r2,48
100002d4:	10000005 	stb	zero,0(r2)
		*otg_hpi_r = 0;
100002d8:	00801804 	movi	r2,96
100002dc:	10000005 	stb	zero,0(r2)
		temp = *otg_hpi_data;
100002e0:	00801c04 	movi	r2,112
100002e4:	10800017 	ldw	r2,0(r2)
100002e8:	e0bffe0d 	sth	r2,-8(fp)
		*otg_hpi_r = 1;
100002ec:	00801804 	movi	r2,96
100002f0:	00c00044 	movi	r3,1
100002f4:	10c00005 	stb	r3,0(r2)
		*otg_hpi_cs = 1;
100002f8:	00800c04 	movi	r2,48
100002fc:	00c00044 	movi	r3,1
10000300:	10c00005 	stb	r3,0(r2)
		//printf("%x\n",temp);
		return temp;
10000304:	e0bffe0b 	ldhu	r2,-8(fp)
}
10000308:	e037883a 	mov	sp,fp
1000030c:	df000017 	ldw	fp,0(sp)
10000310:	dec00104 	addi	sp,sp,4
10000314:	f800283a 	ret

10000318 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
10000318:	defff804 	addi	sp,sp,-32
1000031c:	dfc00715 	stw	ra,28(sp)
10000320:	df000615 	stw	fp,24(sp)
10000324:	df000604 	addi	fp,sp,24
	IO_init();
10000328:	00001f40 	call	100001f4 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
1000032c:	e03ffb0d 	sth	zero,-20(fp)
	int keycode[3] = {0};
10000330:	e03ffd15 	stw	zero,-12(fp)
10000334:	e03ffe15 	stw	zero,-8(fp)
10000338:	e03fff15 	stw	zero,-4(fp)
	alt_u8 toggle = 0;
1000033c:	e03ffa85 	stb	zero,-22(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10000340:	01040074 	movhi	r4,4097
10000344:	21385404 	addi	r4,r4,-7856
10000348:	00023200 	call	10002320 <puts>
1000034c:	00000306 	br	1000035c <main+0x44>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
			{
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device)
					goto USB_HOT_PLUG;
10000350:	0001883a 	nop
10000354:	00000106 	br	1000035c <main+0x44>
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			usleep(5*1000);

			if(usb_ctl_val & no_device)
				goto USB_HOT_PLUG;
10000358:	0001883a 	nop

	printf("USB keyboard setup...\n\n");

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
1000035c:	00011880 	call	10001188 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000360:	01005104 	movi	r4,324
10000364:	000b883a 	mov	r5,zero
10000368:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000036c:	01302414 	movui	r4,49296
10000370:	017fffd4 	movui	r5,65535
10000374:	00010f00 	call	100010f0 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000378:	01006d04 	movi	r4,436
1000037c:	01409604 	movi	r5,600
10000380:	00010f00 	call	100010f0 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000384:	00811004 	movi	r2,1088
10000388:	e0bffa0d 	sth	r2,-24(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
1000038c:	e0bffa0b 	ldhu	r2,-24(fp)
10000390:	01005084 	movi	r4,322
10000394:	100b883a 	mov	r5,r2
10000398:	00010f00 	call	100010f0 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
1000039c:	00808404 	movi	r2,528
100003a0:	e0bffb8d 	sth	r2,-18(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100003a4:	e0bffb8b 	ldhu	r2,-18(fp)
100003a8:	01302314 	movui	r4,49292
100003ac:	100b883a 	mov	r5,r2
100003b0:	00010f00 	call	100010f0 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100003b4:	01007104 	movi	r4,452
100003b8:	000b883a 	mov	r5,zero
100003bc:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100003c0:	01007184 	movi	r4,454
100003c4:	000b883a 	mov	r5,zero
100003c8:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100003cc:	01007204 	movi	r4,456
100003d0:	000b883a 	mov	r5,zero
100003d4:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100003d8:	01007284 	movi	r4,458
100003dc:	000b883a 	mov	r5,zero
100003e0:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100003e4:	01007304 	movi	r4,460
100003e8:	000b883a 	mov	r5,zero
100003ec:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100003f0:	01007384 	movi	r4,462
100003f4:	000b883a 	mov	r5,zero
100003f8:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100003fc:	01007404 	movi	r4,464
10000400:	000b883a 	mov	r5,zero
10000404:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000408:	01007484 	movi	r4,466
1000040c:	000b883a 	mov	r5,zero
10000410:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000414:	01007504 	movi	r4,468
10000418:	000b883a 	mov	r5,zero
1000041c:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000420:	01007584 	movi	r4,470
10000424:	000b883a 	mov	r5,zero
10000428:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000042c:	01007604 	movi	r4,472
10000430:	000b883a 	mov	r5,zero
10000434:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000438:	01007684 	movi	r4,474
1000043c:	000b883a 	mov	r5,zero
10000440:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000444:	01007704 	movi	r4,476
10000448:	000b883a 	mov	r5,zero
1000044c:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000450:	01007784 	movi	r4,478
10000454:	000b883a 	mov	r5,zero
10000458:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
1000045c:	01007084 	movi	r4,450
10000460:	01401c84 	movi	r5,114
10000464:	00010f00 	call	100010f0 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000468:	01000044 	movi	r4,1
1000046c:	01738054 	movui	r5,52737
10000470:	00002440 	call	10000244 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000474:	0001883a 	nop
10000478:	010000c4 	movi	r4,3
1000047c:	00002b00 	call	100002b0 <IO_read>
10000480:	10bfffcc 	andi	r2,r2,65535
10000484:	103ffc26 	beq	r2,zero,10000478 <__alt_data_end+0xf8000478>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000488:	00000806 	br	100004ac <main+0x194>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000048c:	01000044 	movi	r4,1
10000490:	00002b00 	call	100002b0 <IO_read>
10000494:	10bfffcc 	andi	r2,r2,65535
10000498:	01040074 	movhi	r4,4097
1000049c:	21385a04 	addi	r4,r4,-7832
100004a0:	100b883a 	mov	r5,r2
100004a4:	00022600 	call	10002260 <printf>
		goto USB_HOT_PLUG;
100004a8:	003fac06 	br	1000035c <__alt_data_end+0xf800035c>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100004ac:	01000044 	movi	r4,1
100004b0:	00002b00 	call	100002b0 <IO_read>
100004b4:	10bfffcc 	andi	r2,r2,65535
100004b8:	1083fb58 	cmpnei	r2,r2,4077
100004bc:	103ff31e 	bne	r2,zero,1000048c <__alt_data_end+0xf800048c>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100004c0:	01040074 	movhi	r4,4097
100004c4:	21386304 	addi	r4,r4,-7796
100004c8:	00022600 	call	10002260 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100004cc:	01007084 	movi	r4,450
100004d0:	01401d04 	movi	r5,116
100004d4:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100004d8:	01007104 	movi	r4,452
100004dc:	01400f04 	movi	r5,60
100004e0:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100004e4:	01007184 	movi	r4,454
100004e8:	000b883a 	mov	r5,zero
100004ec:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100004f0:	01007204 	movi	r4,456
100004f4:	000b883a 	mov	r5,zero
100004f8:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100004fc:	01007284 	movi	r4,458
10000500:	000b883a 	mov	r5,zero
10000504:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000508:	01007304 	movi	r4,460
1000050c:	000b883a 	mov	r5,zero
10000510:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000514:	01007384 	movi	r4,462
10000518:	000b883a 	mov	r5,zero
1000051c:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000520:	01007404 	movi	r4,464
10000524:	000b883a 	mov	r5,zero
10000528:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000052c:	01007484 	movi	r4,466
10000530:	000b883a 	mov	r5,zero
10000534:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000538:	01007504 	movi	r4,468
1000053c:	000b883a 	mov	r5,zero
10000540:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000544:	01007584 	movi	r4,470
10000548:	000b883a 	mov	r5,zero
1000054c:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000550:	01007604 	movi	r4,472
10000554:	000b883a 	mov	r5,zero
10000558:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
1000055c:	01007684 	movi	r4,474
10000560:	000b883a 	mov	r5,zero
10000564:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000568:	01007704 	movi	r4,476
1000056c:	000b883a 	mov	r5,zero
10000570:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000574:	01007784 	movi	r4,478
10000578:	000b883a 	mov	r5,zero
1000057c:	00010f00 	call	100010f0 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000580:	01000044 	movi	r4,1
10000584:	01738054 	movui	r5,52737
10000588:	00002440 	call	10000244 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000058c:	0001883a 	nop
10000590:	01000044 	movi	r4,1
10000594:	00002b00 	call	100002b0 <IO_read>
10000598:	10bfffcc 	andi	r2,r2,65535
1000059c:	1083fb58 	cmpnei	r2,r2,4077
100005a0:	10000826 	beq	r2,zero,100005c4 <main+0x2ac>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100005a4:	01000044 	movi	r4,1
100005a8:	00002b00 	call	100002b0 <IO_read>
100005ac:	10bfffcc 	andi	r2,r2,65535
100005b0:	01040074 	movhi	r4,4097
100005b4:	21385a04 	addi	r4,r4,-7832
100005b8:	100b883a 	mov	r5,r2
100005bc:	00022600 	call	10002260 <printf>
		goto USB_HOT_PLUG;
100005c0:	003f6606 	br	1000035c <__alt_data_end+0xf800035c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100005c4:	00b02284 	movi	r2,-16246
100005c8:	d0a6a60d 	sth	r2,-25960(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100005cc:	008c0004 	movi	r2,12288
100005d0:	d0a6a68d 	sth	r2,-25958(gp)
	fs_device = A_DP_STAT;
100005d4:	00880004 	movi	r2,8192
100005d8:	e0bffb0d 	sth	r2,-20(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100005dc:	d0a6a60b 	ldhu	r2,-25960(gp)
100005e0:	10bfffcc 	andi	r2,r2,65535
100005e4:	1009883a 	mov	r4,r2
100005e8:	00011440 	call	10001144 <UsbRead>
100005ec:	e0bffa0d 	sth	r2,-24(fp)

	if (!(usb_ctl_val & no_device))
100005f0:	d0a6a68b 	ldhu	r2,-25958(gp)
100005f4:	e0fffa0b 	ldhu	r3,-24(fp)
100005f8:	1884703a 	and	r2,r3,r2
100005fc:	10bfffcc 	andi	r2,r2,65535
10000600:	1000341e 	bne	r2,zero,100006d4 <main+0x3bc>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000604:	e03ffac5 	stb	zero,-21(fp)
10000608:	00000f06 	br	10000648 <main+0x330>
		{
			usleep(5*1000);
1000060c:	0104e204 	movi	r4,5000
10000610:	000c1980 	call	1000c198 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000614:	d0a6a60b 	ldhu	r2,-25960(gp)
10000618:	10bfffcc 	andi	r2,r2,65535
1000061c:	1009883a 	mov	r4,r2
10000620:	00011440 	call	10001144 <UsbRead>
10000624:	e0bffa0d 	sth	r2,-24(fp)
			if(usb_ctl_val & no_device) break;
10000628:	d0a6a68b 	ldhu	r2,-25958(gp)
1000062c:	e0fffa0b 	ldhu	r3,-24(fp)
10000630:	1884703a 	and	r2,r3,r2
10000634:	10bfffcc 	andi	r2,r2,65535
10000638:	1000071e 	bne	r2,zero,10000658 <main+0x340>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
1000063c:	e0bffac3 	ldbu	r2,-21(fp)
10000640:	10800044 	addi	r2,r2,1
10000644:	e0bffac5 	stb	r2,-21(fp)
10000648:	e0bffac3 	ldbu	r2,-21(fp)
1000064c:	10800170 	cmpltui	r2,r2,5
10000650:	103fee1e 	bne	r2,zero,1000060c <__alt_data_end+0xf800060c>
10000654:	00000106 	br	1000065c <main+0x344>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10000658:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
1000065c:	d0a6a68b 	ldhu	r2,-25958(gp)
10000660:	e0fffa0b 	ldhu	r3,-24(fp)
10000664:	1884703a 	and	r2,r3,r2
10000668:	10bfffcc 	andi	r2,r2,65535
1000066c:	1000251e 	bne	r2,zero,10000704 <main+0x3ec>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000670:	01040074 	movhi	r4,4097
10000674:	21386704 	addi	r4,r4,-7780
10000678:	00023200 	call	10002320 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
1000067c:	01040074 	movhi	r4,4097
10000680:	21387104 	addi	r4,r4,-7740
10000684:	00023200 	call	10002320 <puts>
			while (!(usb_ctl_val & no_device))
10000688:	00000c06 	br	100006bc <main+0x3a4>
			{
				usb_ctl_val = UsbRead(ctl_reg);
1000068c:	d0a6a60b 	ldhu	r2,-25960(gp)
10000690:	10bfffcc 	andi	r2,r2,65535
10000694:	1009883a 	mov	r4,r2
10000698:	00011440 	call	10001144 <UsbRead>
1000069c:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device)
100006a0:	d0a6a68b 	ldhu	r2,-25958(gp)
100006a4:	e0fffa0b 	ldhu	r3,-24(fp)
100006a8:	1884703a 	and	r2,r3,r2
100006ac:	10bfffcc 	andi	r2,r2,65535
100006b0:	103f271e 	bne	r2,zero,10000350 <__alt_data_end+0xf8000350>
					goto USB_HOT_PLUG;

				usleep(2000);
100006b4:	0101f404 	movi	r4,2000
100006b8:	000c1980 	call	1000c198 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100006bc:	d0a6a68b 	ldhu	r2,-25958(gp)
100006c0:	e0fffa0b 	ldhu	r3,-24(fp)
100006c4:	1884703a 	and	r2,r3,r2
100006c8:	10bfffcc 	andi	r2,r2,65535
100006cc:	103fef26 	beq	r2,zero,1000068c <__alt_data_end+0xf800068c>
100006d0:	00000c06 	br	10000704 <main+0x3ec>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100006d4:	e0fffa0b 	ldhu	r3,-24(fp)
100006d8:	e0bffb0b 	ldhu	r2,-20(fp)
100006dc:	1884703a 	and	r2,r3,r2
100006e0:	10bfffcc 	andi	r2,r2,65535
100006e4:	10000426 	beq	r2,zero,100006f8 <main+0x3e0>
		{
			printf("[INFO]: full speed device\n");
100006e8:	01040074 	movhi	r4,4097
100006ec:	21387d04 	addi	r4,r4,-7692
100006f0:	00023200 	call	10002320 <puts>
100006f4:	00000306 	br	10000704 <main+0x3ec>
		}
		else
		{
			printf("[INFO]: low speed device\n");
100006f8:	01040074 	movhi	r4,4097
100006fc:	21388404 	addi	r4,r4,-7664
10000700:	00023200 	call	10002320 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000704:	00012380 	call	10001238 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000708:	00000306 	br	10000718 <main+0x400>
	{
		UsbSetAddress();
1000070c:	00012380 	call	10001238 <UsbSetAddress>
		usleep(10*1000);
10000710:	0109c404 	movi	r4,10000
10000714:	000c1980 	call	1000c198 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000718:	010000c4 	movi	r4,3
1000071c:	00002b00 	call	100002b0 <IO_read>
10000720:	10bfffcc 	andi	r2,r2,65535
10000724:	1080040c 	andi	r2,r2,16
10000728:	103ff826 	beq	r2,zero,1000070c <__alt_data_end+0xf800070c>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000072c:	00020b40 	call	100020b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000730:	01000084 	movi	r4,2
10000734:	01414184 	movi	r5,1286
10000738:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000073c:	0009883a 	mov	r4,zero
10000740:	00002b00 	call	100002b0 <IO_read>
10000744:	10bfffcc 	andi	r2,r2,65535
10000748:	01040074 	movhi	r4,4097
1000074c:	21388b04 	addi	r4,r4,-7636
10000750:	100b883a 	mov	r5,r2
10000754:	00022600 	call	10002260 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000758:	01000084 	movi	r4,2
1000075c:	01414204 	movi	r5,1288
10000760:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000764:	0009883a 	mov	r4,zero
10000768:	00002b00 	call	100002b0 <IO_read>
1000076c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000770:	e0bffa0b 	ldhu	r2,-24(fp)
10000774:	01040074 	movhi	r4,4097
10000778:	21389604 	addi	r4,r4,-7592
1000077c:	100b883a 	mov	r5,r2
10000780:	00022600 	call	10002260 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000784:	e0bffa0b 	ldhu	r2,-24(fp)
10000788:	108000e0 	cmpeqi	r2,r2,3
1000078c:	1000031e 	bne	r2,zero,1000079c <main+0x484>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000790:	00021380 	call	10002138 <UsbGetRetryCnt>
10000794:	e0bffa0d 	sth	r2,-24(fp)

		goto USB_HOT_PLUG;
10000798:	003ef006 	br	1000035c <__alt_data_end+0xf800035c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
1000079c:	01040074 	movhi	r4,4097
100007a0:	2138a204 	addi	r4,r4,-7544
100007a4:	00023200 	call	10002320 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100007a8:	00013340 	call	10001334 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007ac:	00000306 	br	100007bc <main+0x4a4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100007b0:	00013340 	call	10001334 <UsbGetDeviceDesc1>
		usleep(10*1000);
100007b4:	0109c404 	movi	r4,10000
100007b8:	000c1980 	call	1000c198 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007bc:	010000c4 	movi	r4,3
100007c0:	00002b00 	call	100002b0 <IO_read>
100007c4:	10bfffcc 	andi	r2,r2,65535
100007c8:	1080040c 	andi	r2,r2,16
100007cc:	103ff826 	beq	r2,zero,100007b0 <__alt_data_end+0xf80007b0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007d0:	00020b40 	call	100020b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100007d4:	01000084 	movi	r4,2
100007d8:	01414184 	movi	r5,1286
100007dc:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007e0:	0009883a 	mov	r4,zero
100007e4:	00002b00 	call	100002b0 <IO_read>
100007e8:	10bfffcc 	andi	r2,r2,65535
100007ec:	01040074 	movhi	r4,4097
100007f0:	2138b104 	addi	r4,r4,-7484
100007f4:	100b883a 	mov	r5,r2
100007f8:	00022600 	call	10002260 <printf>

	IO_write(HPI_ADDR,0x0508);
100007fc:	01000084 	movi	r4,2
10000800:	01414204 	movi	r5,1288
10000804:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000808:	0009883a 	mov	r4,zero
1000080c:	00002b00 	call	100002b0 <IO_read>
10000810:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000814:	e0bffa0b 	ldhu	r2,-24(fp)
10000818:	01040074 	movhi	r4,4097
1000081c:	2138bc04 	addi	r4,r4,-7440
10000820:	100b883a 	mov	r5,r2
10000824:	00022600 	call	10002260 <printf>
	while (usb_ctl_val != 0x03)
10000828:	00000206 	br	10000834 <main+0x51c>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000082c:	00021380 	call	10002138 <UsbGetRetryCnt>
10000830:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000834:	e0bffa0b 	ldhu	r2,-24(fp)
10000838:	108000d8 	cmpnei	r2,r2,3
1000083c:	103ffb1e 	bne	r2,zero,1000082c <__alt_data_end+0xf800082c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000840:	01040074 	movhi	r4,4097
10000844:	2138c804 	addi	r4,r4,-7392
10000848:	00023200 	call	10002320 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000084c:	00014780 	call	10001478 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000850:	00000306 	br	10000860 <main+0x548>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000854:	00014780 	call	10001478 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000858:	0109c404 	movi	r4,10000
1000085c:	000c1980 	call	1000c198 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000860:	010000c4 	movi	r4,3
10000864:	00002b00 	call	100002b0 <IO_read>
10000868:	10bfffcc 	andi	r2,r2,65535
1000086c:	1080040c 	andi	r2,r2,16
10000870:	103ff826 	beq	r2,zero,10000854 <__alt_data_end+0xf8000854>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000874:	00020b40 	call	100020b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000878:	01000084 	movi	r4,2
1000087c:	01414184 	movi	r5,1286
10000880:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000884:	0009883a 	mov	r4,zero
10000888:	00002b00 	call	100002b0 <IO_read>
1000088c:	10bfffcc 	andi	r2,r2,65535
10000890:	01040074 	movhi	r4,4097
10000894:	2138b104 	addi	r4,r4,-7484
10000898:	100b883a 	mov	r5,r2
1000089c:	00022600 	call	10002260 <printf>

	IO_write(HPI_ADDR,0x0508);
100008a0:	01000084 	movi	r4,2
100008a4:	01414204 	movi	r5,1288
100008a8:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008ac:	0009883a 	mov	r4,zero
100008b0:	00002b00 	call	100002b0 <IO_read>
100008b4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008b8:	e0bffa0b 	ldhu	r2,-24(fp)
100008bc:	01040074 	movhi	r4,4097
100008c0:	2138bc04 	addi	r4,r4,-7440
100008c4:	100b883a 	mov	r5,r2
100008c8:	00022600 	call	10002260 <printf>
	while (usb_ctl_val != 0x03)
100008cc:	00000206 	br	100008d8 <main+0x5c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008d0:	00021380 	call	10002138 <UsbGetRetryCnt>
100008d4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008d8:	e0bffa0b 	ldhu	r2,-24(fp)
100008dc:	108000d8 	cmpnei	r2,r2,3
100008e0:	103ffb1e 	bne	r2,zero,100008d0 <__alt_data_end+0xf80008d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100008e4:	01040074 	movhi	r4,4097
100008e8:	2138dc04 	addi	r4,r4,-7312
100008ec:	00023200 	call	10002320 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100008f0:	000164c0 	call	1000164c <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008f4:	00000306 	br	10000904 <main+0x5ec>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100008f8:	000164c0 	call	1000164c <UsbGetConfigDesc1>
		usleep(10*1000);
100008fc:	0109c404 	movi	r4,10000
10000900:	000c1980 	call	1000c198 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000904:	010000c4 	movi	r4,3
10000908:	00002b00 	call	100002b0 <IO_read>
1000090c:	10bfffcc 	andi	r2,r2,65535
10000910:	1080040c 	andi	r2,r2,16
10000914:	103ff826 	beq	r2,zero,100008f8 <__alt_data_end+0xf80008f8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000918:	00020b40 	call	100020b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000091c:	01000084 	movi	r4,2
10000920:	01414184 	movi	r5,1286
10000924:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000928:	0009883a 	mov	r4,zero
1000092c:	00002b00 	call	100002b0 <IO_read>
10000930:	10bfffcc 	andi	r2,r2,65535
10000934:	01040074 	movhi	r4,4097
10000938:	2138ee04 	addi	r4,r4,-7240
1000093c:	100b883a 	mov	r5,r2
10000940:	00022600 	call	10002260 <printf>

	IO_write(HPI_ADDR,0x0508);
10000944:	01000084 	movi	r4,2
10000948:	01414204 	movi	r5,1288
1000094c:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000950:	0009883a 	mov	r4,zero
10000954:	00002b00 	call	100002b0 <IO_read>
10000958:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
1000095c:	e0bffa0b 	ldhu	r2,-24(fp)
10000960:	01040074 	movhi	r4,4097
10000964:	2138f904 	addi	r4,r4,-7196
10000968:	100b883a 	mov	r5,r2
1000096c:	00022600 	call	10002260 <printf>
	while (usb_ctl_val != 0x03)
10000970:	00000206 	br	1000097c <main+0x664>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000974:	00021380 	call	10002138 <UsbGetRetryCnt>
10000978:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000097c:	e0bffa0b 	ldhu	r2,-24(fp)
10000980:	108000d8 	cmpnei	r2,r2,3
10000984:	103ffb1e 	bne	r2,zero,10000974 <__alt_data_end+0xf8000974>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000988:	01040074 	movhi	r4,4097
1000098c:	21390504 	addi	r4,r4,-7148
10000990:	00023200 	call	10002320 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000994:	00017d80 	call	100017d8 <UsbGetConfigDesc2>

	usleep(100*1000);
10000998:	010000b4 	movhi	r4,2
1000099c:	2121a804 	addi	r4,r4,-31072
100009a0:	000c1980 	call	1000c198 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009a4:	00000306 	br	100009b4 <main+0x69c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100009a8:	00017d80 	call	100017d8 <UsbGetConfigDesc2>
		usleep(10*1000);
100009ac:	0109c404 	movi	r4,10000
100009b0:	000c1980 	call	1000c198 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009b4:	010000c4 	movi	r4,3
100009b8:	00002b00 	call	100002b0 <IO_read>
100009bc:	10bfffcc 	andi	r2,r2,65535
100009c0:	1080040c 	andi	r2,r2,16
100009c4:	103ff826 	beq	r2,zero,100009a8 <__alt_data_end+0xf80009a8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009c8:	00020b40 	call	100020b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009cc:	01000084 	movi	r4,2
100009d0:	01414184 	movi	r5,1286
100009d4:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009d8:	0009883a 	mov	r4,zero
100009dc:	00002b00 	call	100002b0 <IO_read>
100009e0:	10bfffcc 	andi	r2,r2,65535
100009e4:	01040074 	movhi	r4,4097
100009e8:	21391804 	addi	r4,r4,-7072
100009ec:	100b883a 	mov	r5,r2
100009f0:	00022600 	call	10002260 <printf>

	IO_write(HPI_ADDR,0x0508);
100009f4:	01000084 	movi	r4,2
100009f8:	01414204 	movi	r5,1288
100009fc:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a00:	0009883a 	mov	r4,zero
10000a04:	00002b00 	call	100002b0 <IO_read>
10000a08:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000a0c:	e0bffa0b 	ldhu	r2,-24(fp)
10000a10:	01040074 	movhi	r4,4097
10000a14:	21392304 	addi	r4,r4,-7028
10000a18:	100b883a 	mov	r5,r2
10000a1c:	00022600 	call	10002260 <printf>
	while (usb_ctl_val != 0x03)
10000a20:	00000206 	br	10000a2c <main+0x714>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a24:	00021380 	call	10002138 <UsbGetRetryCnt>
10000a28:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a2c:	e0bffa0b 	ldhu	r2,-24(fp)
10000a30:	108000d8 	cmpnei	r2,r2,3
10000a34:	103ffb1e 	bne	r2,zero,10000a24 <__alt_data_end+0xf8000a24>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000a38:	01040074 	movhi	r4,4097
10000a3c:	21392f04 	addi	r4,r4,-6980
10000a40:	00023200 	call	10002320 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000a44:	01000084 	movi	r4,2
10000a48:	01415b04 	movi	r5,1388
10000a4c:	00002440 	call	10000244 <IO_write>
	code = IO_read(HPI_DATA);
10000a50:	0009883a 	mov	r4,zero
10000a54:	00002b00 	call	100002b0 <IO_read>
10000a58:	e0bffc0d 	sth	r2,-16(fp)
	code = code & 0x003;
10000a5c:	e0bffc0b 	ldhu	r2,-16(fp)
10000a60:	108000cc 	andi	r2,r2,3
10000a64:	e0bffc0d 	sth	r2,-16(fp)
	printf("\ncode = %x\n", code);
10000a68:	e0bffc0b 	ldhu	r2,-16(fp)
10000a6c:	01040074 	movhi	r4,4097
10000a70:	21394204 	addi	r4,r4,-6904
10000a74:	100b883a 	mov	r5,r2
10000a78:	00022600 	call	10002260 <printf>

	if (code == 0x01)
10000a7c:	e0bffc0b 	ldhu	r2,-16(fp)
10000a80:	10800058 	cmpnei	r2,r2,1
10000a84:	1000041e 	bne	r2,zero,10000a98 <main+0x780>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000a88:	01040074 	movhi	r4,4097
10000a8c:	21394504 	addi	r4,r4,-6892
10000a90:	00023200 	call	10002320 <puts>
10000a94:	00000306 	br	10000aa4 <main+0x78c>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000a98:	01040074 	movhi	r4,4097
10000a9c:	21395404 	addi	r4,r4,-6832
10000aa0:	00023200 	call	10002320 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000aa4:	01000084 	movi	r4,2
10000aa8:	01415d84 	movi	r5,1398
10000aac:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000ab0:	0009883a 	mov	r4,zero
10000ab4:	0141cfc4 	movi	r5,1855
10000ab8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000abc:	0009883a 	mov	r4,zero
10000ac0:	01604154 	movui	r5,33029
10000ac4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000ac8:	0009883a 	mov	r4,zero
10000acc:	014000c4 	movi	r5,3
10000ad0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000ad4:	0009883a 	mov	r4,zero
10000ad8:	01400204 	movi	r5,8
10000adc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000ae0:	0009883a 	mov	r4,zero
10000ae4:	016b0294 	movui	r5,44042
10000ae8:	00002440 	call	10000244 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000aec:	01006c04 	movi	r4,432
10000af0:	01415d84 	movi	r5,1398
10000af4:	00010f00 	call	100010f0 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000af8:	01000084 	movi	r4,2
10000afc:	01415f04 	movi	r5,1404
10000b00:	00002440 	call	10000244 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b04:	0009883a 	mov	r4,zero
10000b08:	00002b00 	call	100002b0 <IO_read>
10000b0c:	e0bffc85 	stb	r2,-14(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000b10:	e0bffc83 	ldbu	r2,-14(fp)
10000b14:	01040074 	movhi	r4,4097
10000b18:	21395d04 	addi	r4,r4,-6796
10000b1c:	100b883a 	mov	r5,r2
10000b20:	00022600 	call	10002260 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b24:	0001a3c0 	call	10001a3c <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b28:	00000306 	br	10000b38 <main+0x820>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000b2c:	0001a3c0 	call	10001a3c <UsbSetConfig>
		usleep(10*1000);
10000b30:	0109c404 	movi	r4,10000
10000b34:	000c1980 	call	1000c198 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b38:	010000c4 	movi	r4,3
10000b3c:	00002b00 	call	100002b0 <IO_read>
10000b40:	10bfffcc 	andi	r2,r2,65535
10000b44:	1080040c 	andi	r2,r2,16
10000b48:	103ff826 	beq	r2,zero,10000b2c <__alt_data_end+0xf8000b2c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b4c:	00020b40 	call	100020b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b50:	01000084 	movi	r4,2
10000b54:	01414184 	movi	r5,1286
10000b58:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b5c:	0009883a 	mov	r4,zero
10000b60:	00002b00 	call	100002b0 <IO_read>
10000b64:	10bfffcc 	andi	r2,r2,65535
10000b68:	01040074 	movhi	r4,4097
10000b6c:	21396704 	addi	r4,r4,-6756
10000b70:	100b883a 	mov	r5,r2
10000b74:	00022600 	call	10002260 <printf>

	IO_write(HPI_ADDR,0x0508);
10000b78:	01000084 	movi	r4,2
10000b7c:	01414204 	movi	r5,1288
10000b80:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b84:	0009883a 	mov	r4,zero
10000b88:	00002b00 	call	100002b0 <IO_read>
10000b8c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000b90:	e0bffa0b 	ldhu	r2,-24(fp)
10000b94:	01040074 	movhi	r4,4097
10000b98:	21397204 	addi	r4,r4,-6712
10000b9c:	100b883a 	mov	r5,r2
10000ba0:	00022600 	call	10002260 <printf>
	while (usb_ctl_val != 0x03)
10000ba4:	00000206 	br	10000bb0 <main+0x898>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ba8:	00021380 	call	10002138 <UsbGetRetryCnt>
10000bac:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000bb0:	e0bffa0b 	ldhu	r2,-24(fp)
10000bb4:	108000d8 	cmpnei	r2,r2,3
10000bb8:	103ffb1e 	bne	r2,zero,10000ba8 <__alt_data_end+0xf8000ba8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000bbc:	01040074 	movhi	r4,4097
10000bc0:	21397e04 	addi	r4,r4,-6664
10000bc4:	00023200 	call	10002320 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000bc8:	0001b380 	call	10001b38 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bcc:	00000306 	br	10000bdc <main+0x8c4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000bd0:	0001b380 	call	10001b38 <UsbClassRequest>
		usleep(10*1000);
10000bd4:	0109c404 	movi	r4,10000
10000bd8:	000c1980 	call	1000c198 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bdc:	010000c4 	movi	r4,3
10000be0:	00002b00 	call	100002b0 <IO_read>
10000be4:	10bfffcc 	andi	r2,r2,65535
10000be8:	1080040c 	andi	r2,r2,16
10000bec:	103ff826 	beq	r2,zero,10000bd0 <__alt_data_end+0xf8000bd0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000bf0:	00020b40 	call	100020b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000bf4:	01000084 	movi	r4,2
10000bf8:	01414184 	movi	r5,1286
10000bfc:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c00:	0009883a 	mov	r4,zero
10000c04:	00002b00 	call	100002b0 <IO_read>
10000c08:	10bfffcc 	andi	r2,r2,65535
10000c0c:	01040074 	movhi	r4,4097
10000c10:	21399004 	addi	r4,r4,-6592
10000c14:	100b883a 	mov	r5,r2
10000c18:	00022600 	call	10002260 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c1c:	01000084 	movi	r4,2
10000c20:	01414204 	movi	r5,1288
10000c24:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c28:	0009883a 	mov	r4,zero
10000c2c:	00002b00 	call	100002b0 <IO_read>
10000c30:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000c34:	e0bffa0b 	ldhu	r2,-24(fp)
10000c38:	01040074 	movhi	r4,4097
10000c3c:	21399b04 	addi	r4,r4,-6548
10000c40:	100b883a 	mov	r5,r2
10000c44:	00022600 	call	10002260 <printf>
	while (usb_ctl_val != 0x03)
10000c48:	00000206 	br	10000c54 <main+0x93c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c4c:	00021380 	call	10002138 <UsbGetRetryCnt>
10000c50:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c54:	e0bffa0b 	ldhu	r2,-24(fp)
10000c58:	108000d8 	cmpnei	r2,r2,3
10000c5c:	103ffb1e 	bne	r2,zero,10000c4c <__alt_data_end+0xf8000c4c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000c60:	01040074 	movhi	r4,4097
10000c64:	2139a704 	addi	r4,r4,-6500
10000c68:	00023200 	call	10002320 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000c6c:	0001c340 	call	10001c34 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c70:	00000306 	br	10000c80 <main+0x968>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000c74:	0001c340 	call	10001c34 <UsbGetHidDesc>
		usleep(10*1000);
10000c78:	0109c404 	movi	r4,10000
10000c7c:	000c1980 	call	1000c198 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c80:	010000c4 	movi	r4,3
10000c84:	00002b00 	call	100002b0 <IO_read>
10000c88:	10bfffcc 	andi	r2,r2,65535
10000c8c:	1080040c 	andi	r2,r2,16
10000c90:	103ff826 	beq	r2,zero,10000c74 <__alt_data_end+0xf8000c74>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c94:	00020b40 	call	100020b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c98:	01000084 	movi	r4,2
10000c9c:	01414184 	movi	r5,1286
10000ca0:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000ca4:	0009883a 	mov	r4,zero
10000ca8:	00002b00 	call	100002b0 <IO_read>
10000cac:	10bfffcc 	andi	r2,r2,65535
10000cb0:	01040074 	movhi	r4,4097
10000cb4:	21399004 	addi	r4,r4,-6592
10000cb8:	100b883a 	mov	r5,r2
10000cbc:	00022600 	call	10002260 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cc0:	01000084 	movi	r4,2
10000cc4:	01414204 	movi	r5,1288
10000cc8:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ccc:	0009883a 	mov	r4,zero
10000cd0:	00002b00 	call	100002b0 <IO_read>
10000cd4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000cd8:	e0bffa0b 	ldhu	r2,-24(fp)
10000cdc:	01040074 	movhi	r4,4097
10000ce0:	21399b04 	addi	r4,r4,-6548
10000ce4:	100b883a 	mov	r5,r2
10000ce8:	00022600 	call	10002260 <printf>
	while (usb_ctl_val != 0x03)
10000cec:	00000206 	br	10000cf8 <main+0x9e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000cf0:	00021380 	call	10002138 <UsbGetRetryCnt>
10000cf4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000cf8:	e0bffa0b 	ldhu	r2,-24(fp)
10000cfc:	108000d8 	cmpnei	r2,r2,3
10000d00:	103ffb1e 	bne	r2,zero,10000cf0 <__alt_data_end+0xf8000cf0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d04:	01040074 	movhi	r4,4097
10000d08:	2139b904 	addi	r4,r4,-6428
10000d0c:	00023200 	call	10002320 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000d10:	0001d780 	call	10001d78 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d14:	00000306 	br	10000d24 <main+0xa0c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d18:	0001d780 	call	10001d78 <UsbGetReportDesc>
		usleep(10*1000);
10000d1c:	0109c404 	movi	r4,10000
10000d20:	000c1980 	call	1000c198 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d24:	010000c4 	movi	r4,3
10000d28:	00002b00 	call	100002b0 <IO_read>
10000d2c:	10bfffcc 	andi	r2,r2,65535
10000d30:	1080040c 	andi	r2,r2,16
10000d34:	103ff826 	beq	r2,zero,10000d18 <__alt_data_end+0xf8000d18>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d38:	00020b40 	call	100020b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d3c:	01000084 	movi	r4,2
10000d40:	01414184 	movi	r5,1286
10000d44:	00002440 	call	10000244 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d48:	0009883a 	mov	r4,zero
10000d4c:	00002b00 	call	100002b0 <IO_read>
10000d50:	10bfffcc 	andi	r2,r2,65535
10000d54:	01040074 	movhi	r4,4097
10000d58:	2139cd04 	addi	r4,r4,-6348
10000d5c:	100b883a 	mov	r5,r2
10000d60:	00022600 	call	10002260 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d64:	01000084 	movi	r4,2
10000d68:	01414204 	movi	r5,1288
10000d6c:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d70:	0009883a 	mov	r4,zero
10000d74:	00002b00 	call	100002b0 <IO_read>
10000d78:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000d7c:	e0bffa0b 	ldhu	r2,-24(fp)
10000d80:	01040074 	movhi	r4,4097
10000d84:	2139d904 	addi	r4,r4,-6300
10000d88:	100b883a 	mov	r5,r2
10000d8c:	00022600 	call	10002260 <printf>
	while (usb_ctl_val != 0x03)
10000d90:	00000206 	br	10000d9c <main+0xa84>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d94:	00021380 	call	10002138 <UsbGetRetryCnt>
10000d98:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d9c:	e0bffa0b 	ldhu	r2,-24(fp)
10000da0:	108000d8 	cmpnei	r2,r2,3
10000da4:	103ffb1e 	bne	r2,zero,10000d94 <__alt_data_end+0xf8000d94>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000da8:	01040074 	movhi	r4,4097
10000dac:	2139e504 	addi	r4,r4,-6252
10000db0:	00023200 	call	10002320 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000db4:	0109c404 	movi	r4,10000
10000db8:	000c1980 	call	1000c198 <usleep>
	while(1)
	{
		toggle++;
10000dbc:	e0bffa83 	ldbu	r2,-22(fp)
10000dc0:	10800044 	addi	r2,r2,1
10000dc4:	e0bffa85 	stb	r2,-22(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000dc8:	01000084 	movi	r4,2
10000dcc:	01414004 	movi	r5,1280
10000dd0:	00002440 	call	10000244 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000dd4:	0009883a 	mov	r4,zero
10000dd8:	01414704 	movi	r5,1308
10000ddc:	00002440 	call	10000244 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000de0:	e0bffc83 	ldbu	r2,-14(fp)
10000de4:	108003cc 	andi	r2,r2,15
10000de8:	0009883a 	mov	r4,zero
10000dec:	100b883a 	mov	r5,r2
10000df0:	00002440 	call	10000244 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000df4:	0009883a 	mov	r4,zero
10000df8:	0140a444 	movi	r5,657
10000dfc:	00002440 	call	10000244 <IO_write>
		if(toggle%2)
10000e00:	e0bffa83 	ldbu	r2,-22(fp)
10000e04:	1080004c 	andi	r2,r2,1
10000e08:	10803fcc 	andi	r2,r2,255
10000e0c:	10000426 	beq	r2,zero,10000e20 <main+0xb08>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000e10:	0009883a 	mov	r4,zero
10000e14:	01400044 	movi	r5,1
10000e18:	00002440 	call	10000244 <IO_write>
10000e1c:	00000306 	br	10000e2c <main+0xb14>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000e20:	0009883a 	mov	r4,zero
10000e24:	01401044 	movi	r5,65
10000e28:	00002440 	call	10000244 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000e2c:	0009883a 	mov	r4,zero
10000e30:	014004c4 	movi	r5,19
10000e34:	00002440 	call	10000244 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000e38:	0009883a 	mov	r4,zero
10000e3c:	000b883a 	mov	r5,zero
10000e40:	00002440 	call	10000244 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000e44:	01006c04 	movi	r4,432
10000e48:	01414004 	movi	r5,1280
10000e4c:	00010f00 	call	100010f0 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e50:	00002406 	br	10000ee4 <main+0xbcc>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000e54:	01000084 	movi	r4,2
10000e58:	01414004 	movi	r5,1280
10000e5c:	00002440 	call	10000244 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000e60:	0009883a 	mov	r4,zero
10000e64:	01414704 	movi	r5,1308
10000e68:	00002440 	call	10000244 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000e6c:	e0bffc83 	ldbu	r2,-14(fp)
10000e70:	108003cc 	andi	r2,r2,15
10000e74:	0009883a 	mov	r4,zero
10000e78:	100b883a 	mov	r5,r2
10000e7c:	00002440 	call	10000244 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000e80:	0009883a 	mov	r4,zero
10000e84:	0140a444 	movi	r5,657
10000e88:	00002440 	call	10000244 <IO_write>
			if(toggle%2)
10000e8c:	e0bffa83 	ldbu	r2,-22(fp)
10000e90:	1080004c 	andi	r2,r2,1
10000e94:	10803fcc 	andi	r2,r2,255
10000e98:	10000426 	beq	r2,zero,10000eac <main+0xb94>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000e9c:	0009883a 	mov	r4,zero
10000ea0:	01400044 	movi	r5,1
10000ea4:	00002440 	call	10000244 <IO_write>
10000ea8:	00000306 	br	10000eb8 <main+0xba0>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000eac:	0009883a 	mov	r4,zero
10000eb0:	01401044 	movi	r5,65
10000eb4:	00002440 	call	10000244 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000eb8:	0009883a 	mov	r4,zero
10000ebc:	014004c4 	movi	r5,19
10000ec0:	00002440 	call	10000244 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000ec4:	0009883a 	mov	r4,zero
10000ec8:	000b883a 	mov	r5,zero
10000ecc:	00002440 	call	10000244 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ed0:	01006c04 	movi	r4,432
10000ed4:	01414004 	movi	r5,1280
10000ed8:	00010f00 	call	100010f0 <UsbWrite>
			usleep(10*1000);
10000edc:	0109c404 	movi	r4,10000
10000ee0:	000c1980 	call	1000c198 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ee4:	010000c4 	movi	r4,3
10000ee8:	00002b00 	call	100002b0 <IO_read>
10000eec:	10bfffcc 	andi	r2,r2,65535
10000ef0:	1080040c 	andi	r2,r2,16
10000ef4:	103fd726 	beq	r2,zero,10000e54 <__alt_data_end+0xf8000e54>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10000ef8:	00020b40 	call	100020b4 <UsbWaitTDListDone>
10000efc:	e0bffa0d 	sth	r2,-24(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10000f00:	01000084 	movi	r4,2
10000f04:	01414784 	movi	r5,1310
10000f08:	00002440 	call	10000244 <IO_write>
		keycode[0] = IO_read(HPI_DATA);
10000f0c:	0009883a 	mov	r4,zero
10000f10:	00002b00 	call	100002b0 <IO_read>
10000f14:	10bfffcc 	andi	r2,r2,65535
10000f18:	e0bffd15 	stw	r2,-12(fp)
		keycode[1] = IO_read(HPI_DATA);
10000f1c:	0009883a 	mov	r4,zero
10000f20:	00002b00 	call	100002b0 <IO_read>
10000f24:	10bfffcc 	andi	r2,r2,65535
10000f28:	e0bffe15 	stw	r2,-8(fp)
		keycode[2] = IO_read(HPI_DATA);
10000f2c:	0009883a 	mov	r4,zero
10000f30:	00002b00 	call	100002b0 <IO_read>
10000f34:	10bfffcc 	andi	r2,r2,65535
10000f38:	e0bfff15 	stw	r2,-4(fp)
		//printf("\nfirst two keycode values are %04x\n",keycode);


		IOWR(0x0040, 0, keycode[0] & 0xffff);
10000f3c:	e0bffd17 	ldw	r2,-12(fp)
10000f40:	10ffffcc 	andi	r3,r2,65535
10000f44:	00801004 	movi	r2,64
10000f48:	10c00035 	stwio	r3,0(r2)
		IOWR(0x0100, 0, keycode[1] & 0xffff);
10000f4c:	e0bffe17 	ldw	r2,-8(fp)
10000f50:	10ffffcc 	andi	r3,r2,65535
10000f54:	00804004 	movi	r2,256
10000f58:	10c00035 	stwio	r3,0(r2)
		IOWR(0x0110, 0, keycode[2] & 0xffff);
10000f5c:	e0bfff17 	ldw	r2,-4(fp)
10000f60:	10ffffcc 	andi	r3,r2,65535
10000f64:	00804404 	movi	r2,272
10000f68:	10c00035 	stwio	r3,0(r2)
		printf("\nfirst two keycode values are %04x\n",keycode[0]);
10000f6c:	e0bffd17 	ldw	r2,-12(fp)
10000f70:	01040074 	movhi	r4,4097
10000f74:	2139f904 	addi	r4,r4,-6172
10000f78:	100b883a 	mov	r5,r2
10000f7c:	00022600 	call	10002260 <printf>
		printf("\nfirst two keycode values are %04x\n",keycode[1]);
10000f80:	e0bffe17 	ldw	r2,-8(fp)
10000f84:	01040074 	movhi	r4,4097
10000f88:	2139f904 	addi	r4,r4,-6172
10000f8c:	100b883a 	mov	r5,r2
10000f90:	00022600 	call	10002260 <printf>
		printf("\nfirst two keycode values are %04x\n",keycode[2]);
10000f94:	e0bfff17 	ldw	r2,-4(fp)
10000f98:	01040074 	movhi	r4,4097
10000f9c:	2139f904 	addi	r4,r4,-6172
10000fa0:	100b883a 	mov	r5,r2
10000fa4:	00022600 	call	10002260 <printf>

		usleep(200);//usleep(5000);
10000fa8:	01003204 	movi	r4,200
10000fac:	000c1980 	call	1000c198 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000fb0:	d0a6a60b 	ldhu	r2,-25960(gp)
10000fb4:	10bfffcc 	andi	r2,r2,65535
10000fb8:	1009883a 	mov	r4,r2
10000fbc:	00011440 	call	10001144 <UsbRead>
10000fc0:	e0bffa0d 	sth	r2,-24(fp)

		if(!(usb_ctl_val & no_device))
10000fc4:	d0a6a68b 	ldhu	r2,-25958(gp)
10000fc8:	e0fffa0b 	ldhu	r3,-24(fp)
10000fcc:	1884703a 	and	r2,r3,r2
10000fd0:	10bfffcc 	andi	r2,r2,65535
10000fd4:	10003f1e 	bne	r2,zero,100010d4 <main+0xdbc>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000fd8:	e03ffac5 	stb	zero,-21(fp)
10000fdc:	00000f06 	br	1000101c <main+0xd04>
			{
				usleep(5*1000);
10000fe0:	0104e204 	movi	r4,5000
10000fe4:	000c1980 	call	1000c198 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10000fe8:	d0a6a60b 	ldhu	r2,-25960(gp)
10000fec:	10bfffcc 	andi	r2,r2,65535
10000ff0:	1009883a 	mov	r4,r2
10000ff4:	00011440 	call	10001144 <UsbRead>
10000ff8:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device) break;
10000ffc:	d0a6a68b 	ldhu	r2,-25958(gp)
10001000:	e0fffa0b 	ldhu	r3,-24(fp)
10001004:	1884703a 	and	r2,r3,r2
10001008:	10bfffcc 	andi	r2,r2,65535
1000100c:	1000071e 	bne	r2,zero,1000102c <main+0xd14>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001010:	e0bffac3 	ldbu	r2,-21(fp)
10001014:	10800044 	addi	r2,r2,1
10001018:	e0bffac5 	stb	r2,-21(fp)
1000101c:	e0bffac3 	ldbu	r2,-21(fp)
10001020:	108001f0 	cmpltui	r2,r2,7
10001024:	103fee1e 	bne	r2,zero,10000fe0 <__alt_data_end+0xf8000fe0>
10001028:	00000106 	br	10001030 <main+0xd18>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
1000102c:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10001030:	d0a6a68b 	ldhu	r2,-25958(gp)
10001034:	e0fffa0b 	ldhu	r3,-24(fp)
10001038:	1884703a 	and	r2,r3,r2
1000103c:	10bfffcc 	andi	r2,r2,65535
10001040:	1000241e 	bne	r2,zero,100010d4 <main+0xdbc>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001044:	01040074 	movhi	r4,4097
10001048:	213a0204 	addi	r4,r4,-6136
1000104c:	00023200 	call	10002320 <puts>
				printf("[INFO]: please insert again!!! \n");
10001050:	01040074 	movhi	r4,4097
10001054:	213a0d04 	addi	r4,r4,-6092
10001058:	00023200 	call	10002320 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
1000105c:	00001d06 	br	100010d4 <main+0xdbc>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001060:	d0a6a60b 	ldhu	r2,-25960(gp)
10001064:	10bfffcc 	andi	r2,r2,65535
10001068:	1009883a 	mov	r4,r2
1000106c:	00011440 	call	10001144 <UsbRead>
10001070:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
10001074:	0104e204 	movi	r4,5000
10001078:	000c1980 	call	1000c198 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000107c:	d0a6a60b 	ldhu	r2,-25960(gp)
10001080:	10bfffcc 	andi	r2,r2,65535
10001084:	1009883a 	mov	r4,r2
10001088:	00011440 	call	10001144 <UsbRead>
1000108c:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
10001090:	0104e204 	movi	r4,5000
10001094:	000c1980 	call	1000c198 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001098:	d0a6a60b 	ldhu	r2,-25960(gp)
1000109c:	10bfffcc 	andi	r2,r2,65535
100010a0:	1009883a 	mov	r4,r2
100010a4:	00011440 	call	10001144 <UsbRead>
100010a8:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
100010ac:	0104e204 	movi	r4,5000
100010b0:	000c1980 	call	1000c198 <usleep>

			if(usb_ctl_val & no_device)
100010b4:	d0a6a68b 	ldhu	r2,-25958(gp)
100010b8:	e0fffa0b 	ldhu	r3,-24(fp)
100010bc:	1884703a 	and	r2,r3,r2
100010c0:	10bfffcc 	andi	r2,r2,65535
100010c4:	103ca41e 	bne	r2,zero,10000358 <__alt_data_end+0xf8000358>
				goto USB_HOT_PLUG;

			usleep(200);
100010c8:	01003204 	movi	r4,200
100010cc:	000c1980 	call	1000c198 <usleep>
100010d0:	00000106 	br	100010d8 <main+0xdc0>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
100010d4:	0001883a 	nop
100010d8:	d0a6a68b 	ldhu	r2,-25958(gp)
100010dc:	e0fffa0b 	ldhu	r3,-24(fp)
100010e0:	1884703a 	and	r2,r3,r2
100010e4:	10bfffcc 	andi	r2,r2,65535
100010e8:	103fdd26 	beq	r2,zero,10001060 <__alt_data_end+0xf8001060>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
100010ec:	003f3306 	br	10000dbc <__alt_data_end+0xf8000dbc>

100010f0 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100010f0:	defffc04 	addi	sp,sp,-16
100010f4:	dfc00315 	stw	ra,12(sp)
100010f8:	df000215 	stw	fp,8(sp)
100010fc:	df000204 	addi	fp,sp,8
10001100:	2007883a 	mov	r3,r4
10001104:	2805883a 	mov	r2,r5
10001108:	e0fffe0d 	sth	r3,-8(fp)
1000110c:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10001110:	e0bffe0b 	ldhu	r2,-8(fp)
10001114:	01000084 	movi	r4,2
10001118:	100b883a 	mov	r5,r2
1000111c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA, Data);
10001120:	e0bfff0b 	ldhu	r2,-4(fp)
10001124:	0009883a 	mov	r4,zero
10001128:	100b883a 	mov	r5,r2
1000112c:	00002440 	call	10000244 <IO_write>
}
10001130:	e037883a 	mov	sp,fp
10001134:	dfc00117 	ldw	ra,4(sp)
10001138:	df000017 	ldw	fp,0(sp)
1000113c:	dec00204 	addi	sp,sp,8
10001140:	f800283a 	ret

10001144 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001144:	defffd04 	addi	sp,sp,-12
10001148:	dfc00215 	stw	ra,8(sp)
1000114c:	df000115 	stw	fp,4(sp)
10001150:	df000104 	addi	fp,sp,4
10001154:	2005883a 	mov	r2,r4
10001158:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
1000115c:	e0bfff0b 	ldhu	r2,-4(fp)
10001160:	01000084 	movi	r4,2
10001164:	100b883a 	mov	r5,r2
10001168:	00002440 	call	10000244 <IO_write>
	return IO_read(HPI_DATA);
1000116c:	0009883a 	mov	r4,zero
10001170:	00002b00 	call	100002b0 <IO_read>
}
10001174:	e037883a 	mov	sp,fp
10001178:	dfc00117 	ldw	ra,4(sp)
1000117c:	df000017 	ldw	fp,0(sp)
10001180:	dec00204 	addi	sp,sp,8
10001184:	f800283a 	ret

10001188 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001188:	defffe04 	addi	sp,sp,-8
1000118c:	dfc00115 	stw	ra,4(sp)
10001190:	df000015 	stw	fp,0(sp)
10001194:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10001198:	01000044 	movi	r4,1
1000119c:	017e9414 	movui	r5,64080
100011a0:	00002440 	call	10000244 <IO_write>
	usleep(100000);
100011a4:	010000b4 	movhi	r4,2
100011a8:	2121a804 	addi	r4,r4,-31072
100011ac:	000c1980 	call	1000c198 <usleep>
	printf("[USB INIT]:reset finished!\n");
100011b0:	01040074 	movhi	r4,4097
100011b4:	213a1504 	addi	r4,r4,-6060
100011b8:	00023200 	call	10002320 <puts>

	usleep(500000);
100011bc:	01000234 	movhi	r4,8
100011c0:	21284804 	addi	r4,r4,-24288
100011c4:	000c1980 	call	1000c198 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100011c8:	01040074 	movhi	r4,4097
100011cc:	213a1c04 	addi	r4,r4,-6032
100011d0:	00023200 	call	10002320 <puts>
	IO_read(HPI_MAILBOX);
100011d4:	01000044 	movi	r4,1
100011d8:	00002b00 	call	100002b0 <IO_read>
	IO_read(HPI_STATUS);
100011dc:	010000c4 	movi	r4,3
100011e0:	00002b00 	call	100002b0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
100011e4:	01005104 	movi	r4,324
100011e8:	00011440 	call	10001144 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100011ec:	01005104 	movi	r4,324
100011f0:	000b883a 	mov	r5,zero
100011f4:	00010f00 	call	100010f0 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
100011f8:	01005204 	movi	r4,328
100011fc:	00011440 	call	10001144 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001200:	01005204 	movi	r4,328
10001204:	000b883a 	mov	r5,zero
10001208:	00010f00 	call	100010f0 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000120c:	01302414 	movui	r4,49296
10001210:	017fffd4 	movui	r5,65535
10001214:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001218:	01302c14 	movui	r4,49328
1000121c:	017fffd4 	movui	r5,65535
10001220:	00010f00 	call	100010f0 <UsbWrite>
}
10001224:	e037883a 	mov	sp,fp
10001228:	dfc00117 	ldw	ra,4(sp)
1000122c:	df000017 	ldw	fp,0(sp)
10001230:	dec00204 	addi	sp,sp,8
10001234:	f800283a 	ret

10001238 <UsbSetAddress>:


void UsbSetAddress()
{
10001238:	defffe04 	addi	sp,sp,-8
1000123c:	dfc00115 	stw	ra,4(sp)
10001240:	df000015 	stw	fp,0(sp)
10001244:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001248:	01000084 	movi	r4,2
1000124c:	01414004 	movi	r5,1280
10001250:	00002440 	call	10000244 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001254:	0009883a 	mov	r4,zero
10001258:	01414304 	movi	r5,1292
1000125c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001260:	0009883a 	mov	r4,zero
10001264:	01400204 	movi	r5,8
10001268:	00002440 	call	10000244 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
1000126c:	0009883a 	mov	r4,zero
10001270:	01403404 	movi	r5,208
10001274:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001278:	0009883a 	mov	r4,zero
1000127c:	01400044 	movi	r5,1
10001280:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001284:	0009883a 	mov	r4,zero
10001288:	014004c4 	movi	r5,19
1000128c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001290:	0009883a 	mov	r4,zero
10001294:	01414504 	movi	r5,1300
10001298:	00002440 	call	10000244 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
1000129c:	0009883a 	mov	r4,zero
100012a0:	01414004 	movi	r5,1280
100012a4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0002);
100012a8:	0009883a 	mov	r4,zero
100012ac:	01400084 	movi	r5,2
100012b0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
100012b4:	0009883a 	mov	r4,zero
100012b8:	000b883a 	mov	r5,zero
100012bc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
100012c0:	0009883a 	mov	r4,zero
100012c4:	000b883a 	mov	r5,zero
100012c8:	00002440 	call	10000244 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
100012cc:	0009883a 	mov	r4,zero
100012d0:	000b883a 	mov	r5,zero
100012d4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//
100012d8:	0009883a 	mov	r4,zero
100012dc:	000b883a 	mov	r5,zero
100012e0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0090);//
100012e4:	0009883a 	mov	r4,zero
100012e8:	01402404 	movi	r5,144
100012ec:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);
100012f0:	0009883a 	mov	r4,zero
100012f4:	01401044 	movi	r5,65
100012f8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
100012fc:	0009883a 	mov	r4,zero
10001300:	014004c4 	movi	r5,19
10001304:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001308:	0009883a 	mov	r4,zero
1000130c:	000b883a 	mov	r5,zero
10001310:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001314:	01006c04 	movi	r4,432
10001318:	01414004 	movi	r5,1280
1000131c:	00010f00 	call	100010f0 <UsbWrite>
}
10001320:	e037883a 	mov	sp,fp
10001324:	dfc00117 	ldw	ra,4(sp)
10001328:	df000017 	ldw	fp,0(sp)
1000132c:	dec00204 	addi	sp,sp,8
10001330:	f800283a 	ret

10001334 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10001334:	defffe04 	addi	sp,sp,-8
10001338:	dfc00115 	stw	ra,4(sp)
1000133c:	df000015 	stw	fp,0(sp)
10001340:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001344:	01000084 	movi	r4,2
10001348:	01414004 	movi	r5,1280
1000134c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001350:	0009883a 	mov	r4,zero
10001354:	01414304 	movi	r5,1292
10001358:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000135c:	0009883a 	mov	r4,zero
10001360:	01400204 	movi	r5,8
10001364:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001368:	0009883a 	mov	r4,zero
1000136c:	0140b404 	movi	r5,720
10001370:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001374:	0009883a 	mov	r4,zero
10001378:	01400044 	movi	r5,1
1000137c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001380:	0009883a 	mov	r4,zero
10001384:	014004c4 	movi	r5,19
10001388:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000138c:	0009883a 	mov	r4,zero
10001390:	01414504 	movi	r5,1300
10001394:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001398:	0009883a 	mov	r4,zero
1000139c:	0141a004 	movi	r5,1664
100013a0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100013a4:	0009883a 	mov	r4,zero
100013a8:	01404004 	movi	r5,256
100013ac:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
100013b0:	0009883a 	mov	r4,zero
100013b4:	000b883a 	mov	r5,zero
100013b8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);
100013bc:	0009883a 	mov	r4,zero
100013c0:	01400204 	movi	r5,8
100013c4:	00002440 	call	10000244 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
100013c8:	0009883a 	mov	r4,zero
100013cc:	01414b04 	movi	r5,1324
100013d0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//
100013d4:	0009883a 	mov	r4,zero
100013d8:	01400204 	movi	r5,8
100013dc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//
100013e0:	0009883a 	mov	r4,zero
100013e4:	0140a404 	movi	r5,656
100013e8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);
100013ec:	0009883a 	mov	r4,zero
100013f0:	01401044 	movi	r5,65
100013f4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
100013f8:	0009883a 	mov	r4,zero
100013fc:	014004c4 	movi	r5,19
10001400:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);
10001404:	0009883a 	mov	r4,zero
10001408:	01414804 	movi	r5,1312
1000140c:	00002440 	call	10000244 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10001410:	0009883a 	mov	r4,zero
10001414:	000b883a 	mov	r5,zero
10001418:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
1000141c:	0009883a 	mov	r4,zero
10001420:	000b883a 	mov	r5,zero
10001424:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10001428:	0009883a 	mov	r4,zero
1000142c:	01408404 	movi	r5,528
10001430:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001434:	0009883a 	mov	r4,zero
10001438:	01401044 	movi	r5,65
1000143c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001440:	0009883a 	mov	r4,zero
10001444:	014004c4 	movi	r5,19
10001448:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000144c:	0009883a 	mov	r4,zero
10001450:	000b883a 	mov	r5,zero
10001454:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001458:	01006c04 	movi	r4,432
1000145c:	01414004 	movi	r5,1280
10001460:	00010f00 	call	100010f0 <UsbWrite>
}
10001464:	e037883a 	mov	sp,fp
10001468:	dfc00117 	ldw	ra,4(sp)
1000146c:	df000017 	ldw	fp,0(sp)
10001470:	dec00204 	addi	sp,sp,8
10001474:	f800283a 	ret

10001478 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10001478:	defffe04 	addi	sp,sp,-8
1000147c:	dfc00115 	stw	ra,4(sp)
10001480:	df000015 	stw	fp,0(sp)
10001484:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001488:	01000084 	movi	r4,2
1000148c:	01414004 	movi	r5,1280
10001490:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001494:	0009883a 	mov	r4,zero
10001498:	01414304 	movi	r5,1292
1000149c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100014a0:	0009883a 	mov	r4,zero
100014a4:	01400204 	movi	r5,8
100014a8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100014ac:	0009883a 	mov	r4,zero
100014b0:	0140b404 	movi	r5,720
100014b4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
100014b8:	0009883a 	mov	r4,zero
100014bc:	01400044 	movi	r5,1
100014c0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
100014c4:	0009883a 	mov	r4,zero
100014c8:	014004c4 	movi	r5,19
100014cc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
100014d0:	0009883a 	mov	r4,zero
100014d4:	01414504 	movi	r5,1300
100014d8:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100014dc:	0009883a 	mov	r4,zero
100014e0:	0141a004 	movi	r5,1664
100014e4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
100014e8:	0009883a 	mov	r4,zero
100014ec:	01404004 	movi	r5,256
100014f0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100014f4:	0009883a 	mov	r4,zero
100014f8:	000b883a 	mov	r5,zero
100014fc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10001500:	0009883a 	mov	r4,zero
10001504:	01400484 	movi	r5,18
10001508:	00002440 	call	10000244 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000150c:	0009883a 	mov	r4,zero
10001510:	01415104 	movi	r5,1348
10001514:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001518:	0009883a 	mov	r4,zero
1000151c:	01400204 	movi	r5,8
10001520:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001524:	0009883a 	mov	r4,zero
10001528:	0140a404 	movi	r5,656
1000152c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001530:	0009883a 	mov	r4,zero
10001534:	01401044 	movi	r5,65
10001538:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000153c:	0009883a 	mov	r4,zero
10001540:	014004c4 	movi	r5,19
10001544:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001548:	0009883a 	mov	r4,zero
1000154c:	01414804 	movi	r5,1312
10001550:	00002440 	call	10000244 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001554:	0009883a 	mov	r4,zero
10001558:	01415304 	movi	r5,1356
1000155c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001560:	0009883a 	mov	r4,zero
10001564:	01400204 	movi	r5,8
10001568:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000156c:	0009883a 	mov	r4,zero
10001570:	0140a404 	movi	r5,656
10001574:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10001578:	0009883a 	mov	r4,zero
1000157c:	01400044 	movi	r5,1
10001580:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001584:	0009883a 	mov	r4,zero
10001588:	014004c4 	movi	r5,19
1000158c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001590:	0009883a 	mov	r4,zero
10001594:	01414b04 	movi	r5,1324
10001598:	00002440 	call	10000244 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
1000159c:	0009883a 	mov	r4,zero
100015a0:	01415504 	movi	r5,1364
100015a4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
100015a8:	0009883a 	mov	r4,zero
100015ac:	01400084 	movi	r5,2
100015b0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100015b4:	0009883a 	mov	r4,zero
100015b8:	0140a404 	movi	r5,656
100015bc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100015c0:	0009883a 	mov	r4,zero
100015c4:	01401044 	movi	r5,65
100015c8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100015cc:	0009883a 	mov	r4,zero
100015d0:	014004c4 	movi	r5,19
100015d4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100015d8:	0009883a 	mov	r4,zero
100015dc:	01414e04 	movi	r5,1336
100015e0:	00002440 	call	10000244 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
100015e4:	0009883a 	mov	r4,zero
100015e8:	000b883a 	mov	r5,zero
100015ec:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100015f0:	0009883a 	mov	r4,zero
100015f4:	000b883a 	mov	r5,zero
100015f8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
100015fc:	0009883a 	mov	r4,zero
10001600:	01408404 	movi	r5,528
10001604:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001608:	0009883a 	mov	r4,zero
1000160c:	01401044 	movi	r5,65
10001610:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001614:	0009883a 	mov	r4,zero
10001618:	014004c4 	movi	r5,19
1000161c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001620:	0009883a 	mov	r4,zero
10001624:	000b883a 	mov	r5,zero
10001628:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000162c:	01006c04 	movi	r4,432
10001630:	01414004 	movi	r5,1280
10001634:	00010f00 	call	100010f0 <UsbWrite>
}
10001638:	e037883a 	mov	sp,fp
1000163c:	dfc00117 	ldw	ra,4(sp)
10001640:	df000017 	ldw	fp,0(sp)
10001644:	dec00204 	addi	sp,sp,8
10001648:	f800283a 	ret

1000164c <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
1000164c:	defffe04 	addi	sp,sp,-8
10001650:	dfc00115 	stw	ra,4(sp)
10001654:	df000015 	stw	fp,0(sp)
10001658:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000165c:	01000084 	movi	r4,2
10001660:	01414004 	movi	r5,1280
10001664:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001668:	0009883a 	mov	r4,zero
1000166c:	01414304 	movi	r5,1292
10001670:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001674:	0009883a 	mov	r4,zero
10001678:	01400204 	movi	r5,8
1000167c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001680:	0009883a 	mov	r4,zero
10001684:	0140b404 	movi	r5,720
10001688:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000168c:	0009883a 	mov	r4,zero
10001690:	01400044 	movi	r5,1
10001694:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001698:	0009883a 	mov	r4,zero
1000169c:	014004c4 	movi	r5,19
100016a0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
100016a4:	0009883a 	mov	r4,zero
100016a8:	01414504 	movi	r5,1300
100016ac:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100016b0:	0009883a 	mov	r4,zero
100016b4:	0141a004 	movi	r5,1664
100016b8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100016bc:	0009883a 	mov	r4,zero
100016c0:	01408004 	movi	r5,512
100016c4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100016c8:	0009883a 	mov	r4,zero
100016cc:	000b883a 	mov	r5,zero
100016d0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
100016d4:	0009883a 	mov	r4,zero
100016d8:	01400244 	movi	r5,9
100016dc:	00002440 	call	10000244 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100016e0:	0009883a 	mov	r4,zero
100016e4:	01415104 	movi	r5,1348
100016e8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100016ec:	0009883a 	mov	r4,zero
100016f0:	01400204 	movi	r5,8
100016f4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100016f8:	0009883a 	mov	r4,zero
100016fc:	0140a404 	movi	r5,656
10001700:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001704:	0009883a 	mov	r4,zero
10001708:	01401044 	movi	r5,65
1000170c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001710:	0009883a 	mov	r4,zero
10001714:	014004c4 	movi	r5,19
10001718:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000171c:	0009883a 	mov	r4,zero
10001720:	01414804 	movi	r5,1312
10001724:	00002440 	call	10000244 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001728:	0009883a 	mov	r4,zero
1000172c:	01415304 	movi	r5,1356
10001730:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10001734:	0009883a 	mov	r4,zero
10001738:	01400044 	movi	r5,1
1000173c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001740:	0009883a 	mov	r4,zero
10001744:	0140a404 	movi	r5,656
10001748:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000174c:	0009883a 	mov	r4,zero
10001750:	01400044 	movi	r5,1
10001754:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001758:	0009883a 	mov	r4,zero
1000175c:	014004c4 	movi	r5,19
10001760:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001764:	0009883a 	mov	r4,zero
10001768:	01414b04 	movi	r5,1324
1000176c:	00002440 	call	10000244 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001770:	0009883a 	mov	r4,zero
10001774:	000b883a 	mov	r5,zero
10001778:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
1000177c:	0009883a 	mov	r4,zero
10001780:	000b883a 	mov	r5,zero
10001784:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001788:	0009883a 	mov	r4,zero
1000178c:	01408404 	movi	r5,528
10001790:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001794:	0009883a 	mov	r4,zero
10001798:	01401044 	movi	r5,65
1000179c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100017a0:	0009883a 	mov	r4,zero
100017a4:	014004c4 	movi	r5,19
100017a8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100017ac:	0009883a 	mov	r4,zero
100017b0:	000b883a 	mov	r5,zero
100017b4:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100017b8:	01006c04 	movi	r4,432
100017bc:	01414004 	movi	r5,1280
100017c0:	00010f00 	call	100010f0 <UsbWrite>
}
100017c4:	e037883a 	mov	sp,fp
100017c8:	dfc00117 	ldw	ra,4(sp)
100017cc:	df000017 	ldw	fp,0(sp)
100017d0:	dec00204 	addi	sp,sp,8
100017d4:	f800283a 	ret

100017d8 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
100017d8:	defffe04 	addi	sp,sp,-8
100017dc:	dfc00115 	stw	ra,4(sp)
100017e0:	df000015 	stw	fp,0(sp)
100017e4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100017e8:	01000084 	movi	r4,2
100017ec:	01414004 	movi	r5,1280
100017f0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
100017f4:	0009883a 	mov	r4,zero
100017f8:	01414304 	movi	r5,1292
100017fc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001800:	0009883a 	mov	r4,zero
10001804:	01400204 	movi	r5,8
10001808:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000180c:	0009883a 	mov	r4,zero
10001810:	0140b404 	movi	r5,720
10001814:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001818:	0009883a 	mov	r4,zero
1000181c:	01400044 	movi	r5,1
10001820:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001824:	0009883a 	mov	r4,zero
10001828:	014004c4 	movi	r5,19
1000182c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001830:	0009883a 	mov	r4,zero
10001834:	01414504 	movi	r5,1300
10001838:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000183c:	0009883a 	mov	r4,zero
10001840:	0141a004 	movi	r5,1664
10001844:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001848:	0009883a 	mov	r4,zero
1000184c:	01408004 	movi	r5,512
10001850:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001854:	0009883a 	mov	r4,zero
10001858:	000b883a 	mov	r5,zero
1000185c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10001860:	0009883a 	mov	r4,zero
10001864:	01403fc4 	movi	r5,255
10001868:	00002440 	call	10000244 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
1000186c:	0009883a 	mov	r4,zero
10001870:	01415704 	movi	r5,1372
10001874:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001878:	0009883a 	mov	r4,zero
1000187c:	01400204 	movi	r5,8
10001880:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001884:	0009883a 	mov	r4,zero
10001888:	0140a404 	movi	r5,656
1000188c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001890:	0009883a 	mov	r4,zero
10001894:	01401044 	movi	r5,65
10001898:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000189c:	0009883a 	mov	r4,zero
100018a0:	014004c4 	movi	r5,19
100018a4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100018a8:	0009883a 	mov	r4,zero
100018ac:	01414804 	movi	r5,1312
100018b0:	00002440 	call	10000244 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
100018b4:	0009883a 	mov	r4,zero
100018b8:	01415904 	movi	r5,1380
100018bc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100018c0:	0009883a 	mov	r4,zero
100018c4:	01400204 	movi	r5,8
100018c8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100018cc:	0009883a 	mov	r4,zero
100018d0:	0140a404 	movi	r5,656
100018d4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100018d8:	0009883a 	mov	r4,zero
100018dc:	01400044 	movi	r5,1
100018e0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100018e4:	0009883a 	mov	r4,zero
100018e8:	014004c4 	movi	r5,19
100018ec:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100018f0:	0009883a 	mov	r4,zero
100018f4:	01414b04 	movi	r5,1324
100018f8:	00002440 	call	10000244 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
100018fc:	0009883a 	mov	r4,zero
10001900:	01415b04 	movi	r5,1388
10001904:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001908:	0009883a 	mov	r4,zero
1000190c:	01400204 	movi	r5,8
10001910:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001914:	0009883a 	mov	r4,zero
10001918:	0140a404 	movi	r5,656
1000191c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001920:	0009883a 	mov	r4,zero
10001924:	01401044 	movi	r5,65
10001928:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000192c:	0009883a 	mov	r4,zero
10001930:	014004c4 	movi	r5,19
10001934:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001938:	0009883a 	mov	r4,zero
1000193c:	01414e04 	movi	r5,1336
10001940:	00002440 	call	10000244 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001944:	0009883a 	mov	r4,zero
10001948:	01415d04 	movi	r5,1396
1000194c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001950:	0009883a 	mov	r4,zero
10001954:	01400204 	movi	r5,8
10001958:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000195c:	0009883a 	mov	r4,zero
10001960:	0140a404 	movi	r5,656
10001964:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001968:	0009883a 	mov	r4,zero
1000196c:	01400044 	movi	r5,1
10001970:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001974:	0009883a 	mov	r4,zero
10001978:	014004c4 	movi	r5,19
1000197c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001980:	0009883a 	mov	r4,zero
10001984:	01415104 	movi	r5,1348
10001988:	00002440 	call	10000244 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
1000198c:	0009883a 	mov	r4,zero
10001990:	01415f04 	movi	r5,1404
10001994:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001998:	0009883a 	mov	r4,zero
1000199c:	01400084 	movi	r5,2
100019a0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100019a4:	0009883a 	mov	r4,zero
100019a8:	0140a404 	movi	r5,656
100019ac:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100019b0:	0009883a 	mov	r4,zero
100019b4:	01401044 	movi	r5,65
100019b8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100019bc:	0009883a 	mov	r4,zero
100019c0:	014004c4 	movi	r5,19
100019c4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100019c8:	0009883a 	mov	r4,zero
100019cc:	01415404 	movi	r5,1360
100019d0:	00002440 	call	10000244 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
100019d4:	0009883a 	mov	r4,zero
100019d8:	000b883a 	mov	r5,zero
100019dc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100019e0:	0009883a 	mov	r4,zero
100019e4:	000b883a 	mov	r5,zero
100019e8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
100019ec:	0009883a 	mov	r4,zero
100019f0:	01408404 	movi	r5,528
100019f4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
100019f8:	0009883a 	mov	r4,zero
100019fc:	01401044 	movi	r5,65
10001a00:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001a04:	0009883a 	mov	r4,zero
10001a08:	014004c4 	movi	r5,19
10001a0c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001a10:	0009883a 	mov	r4,zero
10001a14:	000b883a 	mov	r5,zero
10001a18:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a1c:	01006c04 	movi	r4,432
10001a20:	01414004 	movi	r5,1280
10001a24:	00010f00 	call	100010f0 <UsbWrite>
}
10001a28:	e037883a 	mov	sp,fp
10001a2c:	dfc00117 	ldw	ra,4(sp)
10001a30:	df000017 	ldw	fp,0(sp)
10001a34:	dec00204 	addi	sp,sp,8
10001a38:	f800283a 	ret

10001a3c <UsbSetConfig>:

void UsbSetConfig()
{
10001a3c:	defffe04 	addi	sp,sp,-8
10001a40:	dfc00115 	stw	ra,4(sp)
10001a44:	df000015 	stw	fp,0(sp)
10001a48:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001a4c:	01000084 	movi	r4,2
10001a50:	01414004 	movi	r5,1280
10001a54:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001a58:	0009883a 	mov	r4,zero
10001a5c:	01414304 	movi	r5,1292
10001a60:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001a64:	0009883a 	mov	r4,zero
10001a68:	01400204 	movi	r5,8
10001a6c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001a70:	0009883a 	mov	r4,zero
10001a74:	0140b404 	movi	r5,720
10001a78:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001a7c:	0009883a 	mov	r4,zero
10001a80:	01400044 	movi	r5,1
10001a84:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001a88:	0009883a 	mov	r4,zero
10001a8c:	014004c4 	movi	r5,19
10001a90:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001a94:	0009883a 	mov	r4,zero
10001a98:	01414504 	movi	r5,1300
10001a9c:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001aa0:	0009883a 	mov	r4,zero
10001aa4:	01424004 	movi	r5,2304
10001aa8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001aac:	0009883a 	mov	r4,zero
10001ab0:	01400044 	movi	r5,1
10001ab4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001ab8:	0009883a 	mov	r4,zero
10001abc:	000b883a 	mov	r5,zero
10001ac0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001ac4:	0009883a 	mov	r4,zero
10001ac8:	000b883a 	mov	r5,zero
10001acc:	00002440 	call	10000244 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001ad0:	0009883a 	mov	r4,zero
10001ad4:	000b883a 	mov	r5,zero
10001ad8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001adc:	0009883a 	mov	r4,zero
10001ae0:	000b883a 	mov	r5,zero
10001ae4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001ae8:	0009883a 	mov	r4,zero
10001aec:	0140a404 	movi	r5,656
10001af0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001af4:	0009883a 	mov	r4,zero
10001af8:	01401044 	movi	r5,65
10001afc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b00:	0009883a 	mov	r4,zero
10001b04:	014004c4 	movi	r5,19
10001b08:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b0c:	0009883a 	mov	r4,zero
10001b10:	000b883a 	mov	r5,zero
10001b14:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001b18:	01006c04 	movi	r4,432
10001b1c:	01414004 	movi	r5,1280
10001b20:	00010f00 	call	100010f0 <UsbWrite>

}
10001b24:	e037883a 	mov	sp,fp
10001b28:	dfc00117 	ldw	ra,4(sp)
10001b2c:	df000017 	ldw	fp,0(sp)
10001b30:	dec00204 	addi	sp,sp,8
10001b34:	f800283a 	ret

10001b38 <UsbClassRequest>:

void UsbClassRequest()
{
10001b38:	defffe04 	addi	sp,sp,-8
10001b3c:	dfc00115 	stw	ra,4(sp)
10001b40:	df000015 	stw	fp,0(sp)
10001b44:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001b48:	01000084 	movi	r4,2
10001b4c:	01414004 	movi	r5,1280
10001b50:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001b54:	0009883a 	mov	r4,zero
10001b58:	01414304 	movi	r5,1292
10001b5c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001b60:	0009883a 	mov	r4,zero
10001b64:	01400204 	movi	r5,8
10001b68:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001b6c:	0009883a 	mov	r4,zero
10001b70:	0140b404 	movi	r5,720
10001b74:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001b78:	0009883a 	mov	r4,zero
10001b7c:	01400044 	movi	r5,1
10001b80:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b84:	0009883a 	mov	r4,zero
10001b88:	014004c4 	movi	r5,19
10001b8c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001b90:	0009883a 	mov	r4,zero
10001b94:	01414504 	movi	r5,1300
10001b98:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001b9c:	0009883a 	mov	r4,zero
10001ba0:	01428844 	movi	r5,2593
10001ba4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001ba8:	0009883a 	mov	r4,zero
10001bac:	000b883a 	mov	r5,zero
10001bb0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001bb4:	0009883a 	mov	r4,zero
10001bb8:	000b883a 	mov	r5,zero
10001bbc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001bc0:	0009883a 	mov	r4,zero
10001bc4:	000b883a 	mov	r5,zero
10001bc8:	00002440 	call	10000244 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001bcc:	0009883a 	mov	r4,zero
10001bd0:	000b883a 	mov	r5,zero
10001bd4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001bd8:	0009883a 	mov	r4,zero
10001bdc:	000b883a 	mov	r5,zero
10001be0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001be4:	0009883a 	mov	r4,zero
10001be8:	0140a404 	movi	r5,656
10001bec:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001bf0:	0009883a 	mov	r4,zero
10001bf4:	01401044 	movi	r5,65
10001bf8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001bfc:	0009883a 	mov	r4,zero
10001c00:	014004c4 	movi	r5,19
10001c04:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c08:	0009883a 	mov	r4,zero
10001c0c:	000b883a 	mov	r5,zero
10001c10:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c14:	01006c04 	movi	r4,432
10001c18:	01414004 	movi	r5,1280
10001c1c:	00010f00 	call	100010f0 <UsbWrite>
}
10001c20:	e037883a 	mov	sp,fp
10001c24:	dfc00117 	ldw	ra,4(sp)
10001c28:	df000017 	ldw	fp,0(sp)
10001c2c:	dec00204 	addi	sp,sp,8
10001c30:	f800283a 	ret

10001c34 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001c34:	defffe04 	addi	sp,sp,-8
10001c38:	dfc00115 	stw	ra,4(sp)
10001c3c:	df000015 	stw	fp,0(sp)
10001c40:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001c44:	01000084 	movi	r4,2
10001c48:	01414004 	movi	r5,1280
10001c4c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001c50:	0009883a 	mov	r4,zero
10001c54:	01414304 	movi	r5,1292
10001c58:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001c5c:	0009883a 	mov	r4,zero
10001c60:	01400204 	movi	r5,8
10001c64:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001c68:	0009883a 	mov	r4,zero
10001c6c:	0140b404 	movi	r5,720
10001c70:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001c74:	0009883a 	mov	r4,zero
10001c78:	01400044 	movi	r5,1
10001c7c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c80:	0009883a 	mov	r4,zero
10001c84:	014004c4 	movi	r5,19
10001c88:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001c8c:	0009883a 	mov	r4,zero
10001c90:	01414504 	movi	r5,1300
10001c94:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001c98:	0009883a 	mov	r4,zero
10001c9c:	0141a044 	movi	r5,1665
10001ca0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001ca4:	0009883a 	mov	r4,zero
10001ca8:	01484004 	movi	r5,8448
10001cac:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001cb0:	0009883a 	mov	r4,zero
10001cb4:	000b883a 	mov	r5,zero
10001cb8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001cbc:	0009883a 	mov	r4,zero
10001cc0:	01401ec4 	movi	r5,123
10001cc4:	00002440 	call	10000244 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001cc8:	0009883a 	mov	r4,zero
10001ccc:	01415104 	movi	r5,1348
10001cd0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001cd4:	0009883a 	mov	r4,zero
10001cd8:	01400204 	movi	r5,8
10001cdc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001ce0:	0009883a 	mov	r4,zero
10001ce4:	0140a404 	movi	r5,656
10001ce8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001cec:	0009883a 	mov	r4,zero
10001cf0:	01401044 	movi	r5,65
10001cf4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001cf8:	0009883a 	mov	r4,zero
10001cfc:	014004c4 	movi	r5,19
10001d00:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001d04:	0009883a 	mov	r4,zero
10001d08:	01414804 	movi	r5,1312
10001d0c:	00002440 	call	10000244 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001d10:	0009883a 	mov	r4,zero
10001d14:	000b883a 	mov	r5,zero
10001d18:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001d1c:	0009883a 	mov	r4,zero
10001d20:	000b883a 	mov	r5,zero
10001d24:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001d28:	0009883a 	mov	r4,zero
10001d2c:	01408404 	movi	r5,528
10001d30:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001d34:	0009883a 	mov	r4,zero
10001d38:	01401044 	movi	r5,65
10001d3c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001d40:	0009883a 	mov	r4,zero
10001d44:	014004c4 	movi	r5,19
10001d48:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001d4c:	0009883a 	mov	r4,zero
10001d50:	000b883a 	mov	r5,zero
10001d54:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d58:	01006c04 	movi	r4,432
10001d5c:	01414004 	movi	r5,1280
10001d60:	00010f00 	call	100010f0 <UsbWrite>

}
10001d64:	e037883a 	mov	sp,fp
10001d68:	dfc00117 	ldw	ra,4(sp)
10001d6c:	df000017 	ldw	fp,0(sp)
10001d70:	dec00204 	addi	sp,sp,8
10001d74:	f800283a 	ret

10001d78 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001d78:	defffe04 	addi	sp,sp,-8
10001d7c:	dfc00115 	stw	ra,4(sp)
10001d80:	df000015 	stw	fp,0(sp)
10001d84:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001d88:	01000084 	movi	r4,2
10001d8c:	01414004 	movi	r5,1280
10001d90:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001d94:	0009883a 	mov	r4,zero
10001d98:	01414304 	movi	r5,1292
10001d9c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001da0:	0009883a 	mov	r4,zero
10001da4:	01400204 	movi	r5,8
10001da8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001dac:	0009883a 	mov	r4,zero
10001db0:	0140b404 	movi	r5,720
10001db4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001db8:	0009883a 	mov	r4,zero
10001dbc:	01400044 	movi	r5,1
10001dc0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001dc4:	0009883a 	mov	r4,zero
10001dc8:	014004c4 	movi	r5,19
10001dcc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001dd0:	0009883a 	mov	r4,zero
10001dd4:	01414504 	movi	r5,1300
10001dd8:	00002440 	call	10000244 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001ddc:	0009883a 	mov	r4,zero
10001de0:	0141a044 	movi	r5,1665
10001de4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001de8:	0009883a 	mov	r4,zero
10001dec:	01488004 	movi	r5,8704
10001df0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001df4:	0009883a 	mov	r4,zero
10001df8:	000b883a 	mov	r5,zero
10001dfc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001e00:	0009883a 	mov	r4,zero
10001e04:	01401ec4 	movi	r5,123
10001e08:	00002440 	call	10000244 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10001e0c:	0009883a 	mov	r4,zero
10001e10:	01416004 	movi	r5,1408
10001e14:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001e18:	0009883a 	mov	r4,zero
10001e1c:	01400204 	movi	r5,8
10001e20:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001e24:	0009883a 	mov	r4,zero
10001e28:	0140a404 	movi	r5,656
10001e2c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001e30:	0009883a 	mov	r4,zero
10001e34:	01401044 	movi	r5,65
10001e38:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001e3c:	0009883a 	mov	r4,zero
10001e40:	014004c4 	movi	r5,19
10001e44:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001e48:	0009883a 	mov	r4,zero
10001e4c:	01414804 	movi	r5,1312
10001e50:	00002440 	call	10000244 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10001e54:	0009883a 	mov	r4,zero
10001e58:	01416204 	movi	r5,1416
10001e5c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001e60:	0009883a 	mov	r4,zero
10001e64:	01400204 	movi	r5,8
10001e68:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001e6c:	0009883a 	mov	r4,zero
10001e70:	0140a404 	movi	r5,656
10001e74:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001e78:	0009883a 	mov	r4,zero
10001e7c:	01400044 	movi	r5,1
10001e80:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001e84:	0009883a 	mov	r4,zero
10001e88:	014004c4 	movi	r5,19
10001e8c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001e90:	0009883a 	mov	r4,zero
10001e94:	01414b04 	movi	r5,1324
10001e98:	00002440 	call	10000244 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10001e9c:	0009883a 	mov	r4,zero
10001ea0:	01416404 	movi	r5,1424
10001ea4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001ea8:	0009883a 	mov	r4,zero
10001eac:	01400204 	movi	r5,8
10001eb0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001eb4:	0009883a 	mov	r4,zero
10001eb8:	0140a404 	movi	r5,656
10001ebc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001ec0:	0009883a 	mov	r4,zero
10001ec4:	01401044 	movi	r5,65
10001ec8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001ecc:	0009883a 	mov	r4,zero
10001ed0:	014004c4 	movi	r5,19
10001ed4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001ed8:	0009883a 	mov	r4,zero
10001edc:	01414e04 	movi	r5,1336
10001ee0:	00002440 	call	10000244 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10001ee4:	0009883a 	mov	r4,zero
10001ee8:	01416604 	movi	r5,1432
10001eec:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001ef0:	0009883a 	mov	r4,zero
10001ef4:	01400204 	movi	r5,8
10001ef8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001efc:	0009883a 	mov	r4,zero
10001f00:	0140a404 	movi	r5,656
10001f04:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001f08:	0009883a 	mov	r4,zero
10001f0c:	01400044 	movi	r5,1
10001f10:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001f14:	0009883a 	mov	r4,zero
10001f18:	014004c4 	movi	r5,19
10001f1c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001f20:	0009883a 	mov	r4,zero
10001f24:	01415104 	movi	r5,1348
10001f28:	00002440 	call	10000244 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10001f2c:	0009883a 	mov	r4,zero
10001f30:	01416804 	movi	r5,1440
10001f34:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001f38:	0009883a 	mov	r4,zero
10001f3c:	01400204 	movi	r5,8
10001f40:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001f44:	0009883a 	mov	r4,zero
10001f48:	0140a404 	movi	r5,656
10001f4c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001f50:	0009883a 	mov	r4,zero
10001f54:	01401044 	movi	r5,65
10001f58:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001f5c:	0009883a 	mov	r4,zero
10001f60:	014004c4 	movi	r5,19
10001f64:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001f68:	0009883a 	mov	r4,zero
10001f6c:	01415404 	movi	r5,1360
10001f70:	00002440 	call	10000244 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10001f74:	0009883a 	mov	r4,zero
10001f78:	01416a04 	movi	r5,1448
10001f7c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001f80:	0009883a 	mov	r4,zero
10001f84:	01400204 	movi	r5,8
10001f88:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001f8c:	0009883a 	mov	r4,zero
10001f90:	0140a404 	movi	r5,656
10001f94:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001f98:	0009883a 	mov	r4,zero
10001f9c:	01400044 	movi	r5,1
10001fa0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001fa4:	0009883a 	mov	r4,zero
10001fa8:	014004c4 	movi	r5,19
10001fac:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10001fb0:	0009883a 	mov	r4,zero
10001fb4:	01415704 	movi	r5,1372
10001fb8:	00002440 	call	10000244 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10001fbc:	0009883a 	mov	r4,zero
10001fc0:	01416c04 	movi	r5,1456
10001fc4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001fc8:	0009883a 	mov	r4,zero
10001fcc:	01400204 	movi	r5,8
10001fd0:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10001fd4:	0009883a 	mov	r4,zero
10001fd8:	0140a404 	movi	r5,656
10001fdc:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10001fe0:	0009883a 	mov	r4,zero
10001fe4:	01401044 	movi	r5,65
10001fe8:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001fec:	0009883a 	mov	r4,zero
10001ff0:	014004c4 	movi	r5,19
10001ff4:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10001ff8:	0009883a 	mov	r4,zero
10001ffc:	01415a04 	movi	r5,1384
10002000:	00002440 	call	10000244 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002004:	0009883a 	mov	r4,zero
10002008:	01416e04 	movi	r5,1464
1000200c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002010:	0009883a 	mov	r4,zero
10002014:	014000c4 	movi	r5,3
10002018:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000201c:	0009883a 	mov	r4,zero
10002020:	0140a404 	movi	r5,656
10002024:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002028:	0009883a 	mov	r4,zero
1000202c:	01400044 	movi	r5,1
10002030:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002034:	0009883a 	mov	r4,zero
10002038:	014004c4 	movi	r5,19
1000203c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002040:	0009883a 	mov	r4,zero
10002044:	01415d04 	movi	r5,1396
10002048:	00002440 	call	10000244 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
1000204c:	0009883a 	mov	r4,zero
10002050:	000b883a 	mov	r5,zero
10002054:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002058:	0009883a 	mov	r4,zero
1000205c:	000b883a 	mov	r5,zero
10002060:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10002064:	0009883a 	mov	r4,zero
10002068:	01408404 	movi	r5,528
1000206c:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002070:	0009883a 	mov	r4,zero
10002074:	01401044 	movi	r5,65
10002078:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000207c:	0009883a 	mov	r4,zero
10002080:	014004c4 	movi	r5,19
10002084:	00002440 	call	10000244 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002088:	0009883a 	mov	r4,zero
1000208c:	000b883a 	mov	r5,zero
10002090:	00002440 	call	10000244 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002094:	01006c04 	movi	r4,432
10002098:	01414004 	movi	r5,1280
1000209c:	00010f00 	call	100010f0 <UsbWrite>

}
100020a0:	e037883a 	mov	sp,fp
100020a4:	dfc00117 	ldw	ra,4(sp)
100020a8:	df000017 	ldw	fp,0(sp)
100020ac:	dec00204 	addi	sp,sp,8
100020b0:	f800283a 	ret

100020b4 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100020b4:	defffd04 	addi	sp,sp,-12
100020b8:	dfc00215 	stw	ra,8(sp)
100020bc:	df000115 	stw	fp,4(sp)
100020c0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100020c4:	01005104 	movi	r4,324
100020c8:	00011440 	call	10001144 <UsbRead>
100020cc:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100020d0:	01005104 	movi	r4,324
100020d4:	000b883a 	mov	r5,zero
100020d8:	00010f00 	call	100010f0 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100020dc:	00000d06 	br	10002114 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100020e0:	e0bfff0b 	ldhu	r2,-4(fp)
100020e4:	10000526 	beq	r2,zero,100020fc <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100020e8:	e0bfff0b 	ldhu	r2,-4(fp)
100020ec:	01040074 	movhi	r4,4097
100020f0:	213a2504 	addi	r4,r4,-5996
100020f4:	100b883a 	mov	r5,r2
100020f8:	00022600 	call	10002260 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100020fc:	01005104 	movi	r4,324
10002100:	00011440 	call	10001144 <UsbRead>
10002104:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002108:	01005104 	movi	r4,324
1000210c:	000b883a 	mov	r5,zero
10002110:	00010f00 	call	100010f0 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002114:	e0bfff0b 	ldhu	r2,-4(fp)
10002118:	10840018 	cmpnei	r2,r2,4096
1000211c:	103ff01e 	bne	r2,zero,100020e0 <__alt_data_end+0xf80020e0>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10002120:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002124:	e037883a 	mov	sp,fp
10002128:	dfc00117 	ldw	ra,4(sp)
1000212c:	df000017 	ldw	fp,0(sp)
10002130:	dec00204 	addi	sp,sp,8
10002134:	f800283a 	ret

10002138 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002138:	defffd04 	addi	sp,sp,-12
1000213c:	dfc00215 	stw	ra,8(sp)
10002140:	df000115 	stw	fp,4(sp)
10002144:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002148:	010000c4 	movi	r4,3
1000214c:	00002b00 	call	100002b0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002150:	01005104 	movi	r4,324
10002154:	00011440 	call	10001144 <UsbRead>
10002158:	10bfffcc 	andi	r2,r2,65535
1000215c:	10840018 	cmpnei	r2,r2,4096
10002160:	1000091e 	bne	r2,zero,10002188 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002164:	01005104 	movi	r4,324
10002168:	000b883a 	mov	r5,zero
1000216c:	00010f00 	call	100010f0 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002170:	0001883a 	nop
10002174:	010000c4 	movi	r4,3
10002178:	00002b00 	call	100002b0 <IO_read>
1000217c:	10bfffcc 	andi	r2,r2,65535
10002180:	1080040c 	andi	r2,r2,16
10002184:	103ffb26 	beq	r2,zero,10002174 <__alt_data_end+0xf8002174>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002188:	01000084 	movi	r4,2
1000218c:	01414204 	movi	r5,1288
10002190:	00002440 	call	10000244 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002194:	0009883a 	mov	r4,zero
10002198:	00002b00 	call	100002b0 <IO_read>
1000219c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
100021a0:	e0bfff0b 	ldhu	r2,-4(fp)
}
100021a4:	e037883a 	mov	sp,fp
100021a8:	dfc00117 	ldw	ra,4(sp)
100021ac:	df000017 	ldw	fp,0(sp)
100021b0:	dec00204 	addi	sp,sp,8
100021b4:	f800283a 	ret

100021b8 <UsbPrintMem>:


void UsbPrintMem()
{
100021b8:	defffc04 	addi	sp,sp,-16
100021bc:	dfc00315 	stw	ra,12(sp)
100021c0:	df000215 	stw	fp,8(sp)
100021c4:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
100021c8:	01000084 	movi	r4,2
100021cc:	01414004 	movi	r5,1280
100021d0:	00002440 	call	10000244 <IO_write>
	for (i = 0; i <= 200; i += 2)
100021d4:	e03ffe15 	stw	zero,-8(fp)
100021d8:	00000e06 	br	10002214 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
100021dc:	0009883a 	mov	r4,zero
100021e0:	00002b00 	call	100002b0 <IO_read>
100021e4:	10bfffcc 	andi	r2,r2,65535
100021e8:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
100021ec:	e0bffe17 	ldw	r2,-8(fp)
100021f0:	10814004 	addi	r2,r2,1280
100021f4:	01040074 	movhi	r4,4097
100021f8:	213a2d04 	addi	r4,r4,-5964
100021fc:	100b883a 	mov	r5,r2
10002200:	e1bfff17 	ldw	r6,-4(fp)
10002204:	00022600 	call	10002260 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10002208:	e0bffe17 	ldw	r2,-8(fp)
1000220c:	10800084 	addi	r2,r2,2
10002210:	e0bffe15 	stw	r2,-8(fp)
10002214:	e0bffe17 	ldw	r2,-8(fp)
10002218:	10803250 	cmplti	r2,r2,201
1000221c:	103fef1e 	bne	r2,zero,100021dc <__alt_data_end+0xf80021dc>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10002220:	e037883a 	mov	sp,fp
10002224:	dfc00117 	ldw	ra,4(sp)
10002228:	df000017 	ldw	fp,0(sp)
1000222c:	dec00204 	addi	sp,sp,8
10002230:	f800283a 	ret

10002234 <_printf_r>:
10002234:	defffd04 	addi	sp,sp,-12
10002238:	dfc00015 	stw	ra,0(sp)
1000223c:	d9800115 	stw	r6,4(sp)
10002240:	d9c00215 	stw	r7,8(sp)
10002244:	280d883a 	mov	r6,r5
10002248:	21400217 	ldw	r5,8(r4)
1000224c:	d9c00104 	addi	r7,sp,4
10002250:	00023f40 	call	100023f4 <___vfprintf_internal_r>
10002254:	dfc00017 	ldw	ra,0(sp)
10002258:	dec00304 	addi	sp,sp,12
1000225c:	f800283a 	ret

10002260 <printf>:
10002260:	defffc04 	addi	sp,sp,-16
10002264:	dfc00015 	stw	ra,0(sp)
10002268:	d9400115 	stw	r5,4(sp)
1000226c:	d9800215 	stw	r6,8(sp)
10002270:	d9c00315 	stw	r7,12(sp)
10002274:	00840074 	movhi	r2,4097
10002278:	10818404 	addi	r2,r2,1552
1000227c:	10800017 	ldw	r2,0(r2)
10002280:	200b883a 	mov	r5,r4
10002284:	d9800104 	addi	r6,sp,4
10002288:	11000217 	ldw	r4,8(r2)
1000228c:	00042700 	call	10004270 <__vfprintf_internal>
10002290:	dfc00017 	ldw	ra,0(sp)
10002294:	dec00404 	addi	sp,sp,16
10002298:	f800283a 	ret

1000229c <_puts_r>:
1000229c:	defff604 	addi	sp,sp,-40
100022a0:	dc400815 	stw	r17,32(sp)
100022a4:	2023883a 	mov	r17,r4
100022a8:	2809883a 	mov	r4,r5
100022ac:	dc000715 	stw	r16,28(sp)
100022b0:	dfc00915 	stw	ra,36(sp)
100022b4:	2821883a 	mov	r16,r5
100022b8:	00023340 	call	10002334 <strlen>
100022bc:	10c00044 	addi	r3,r2,1
100022c0:	d8800115 	stw	r2,4(sp)
100022c4:	89400217 	ldw	r5,8(r17)
100022c8:	00840074 	movhi	r2,4097
100022cc:	10ba3204 	addi	r2,r2,-5944
100022d0:	d8800215 	stw	r2,8(sp)
100022d4:	00800044 	movi	r2,1
100022d8:	d8800315 	stw	r2,12(sp)
100022dc:	8809883a 	mov	r4,r17
100022e0:	00800084 	movi	r2,2
100022e4:	d9800404 	addi	r6,sp,16
100022e8:	dc000015 	stw	r16,0(sp)
100022ec:	d8c00615 	stw	r3,24(sp)
100022f0:	dec00415 	stw	sp,16(sp)
100022f4:	d8800515 	stw	r2,20(sp)
100022f8:	00065700 	call	10006570 <__sfvwrite_r>
100022fc:	1000061e 	bne	r2,zero,10002318 <_puts_r+0x7c>
10002300:	00800284 	movi	r2,10
10002304:	dfc00917 	ldw	ra,36(sp)
10002308:	dc400817 	ldw	r17,32(sp)
1000230c:	dc000717 	ldw	r16,28(sp)
10002310:	dec00a04 	addi	sp,sp,40
10002314:	f800283a 	ret
10002318:	00bfffc4 	movi	r2,-1
1000231c:	003ff906 	br	10002304 <__alt_data_end+0xf8002304>

10002320 <puts>:
10002320:	00840074 	movhi	r2,4097
10002324:	10818404 	addi	r2,r2,1552
10002328:	200b883a 	mov	r5,r4
1000232c:	11000017 	ldw	r4,0(r2)
10002330:	000229c1 	jmpi	1000229c <_puts_r>

10002334 <strlen>:
10002334:	208000cc 	andi	r2,r4,3
10002338:	10001f1e 	bne	r2,zero,100023b8 <strlen+0x84>
1000233c:	20800017 	ldw	r2,0(r4)
10002340:	01ffbff4 	movhi	r7,65279
10002344:	39ffbfc4 	addi	r7,r7,-257
10002348:	01a02074 	movhi	r6,32897
1000234c:	31a02004 	addi	r6,r6,-32640
10002350:	11c7883a 	add	r3,r2,r7
10002354:	0084303a 	nor	r2,zero,r2
10002358:	1886703a 	and	r3,r3,r2
1000235c:	1986703a 	and	r3,r3,r6
10002360:	2005883a 	mov	r2,r4
10002364:	1800101e 	bne	r3,zero,100023a8 <strlen+0x74>
10002368:	10800104 	addi	r2,r2,4
1000236c:	10c00017 	ldw	r3,0(r2)
10002370:	19cb883a 	add	r5,r3,r7
10002374:	00c6303a 	nor	r3,zero,r3
10002378:	28c6703a 	and	r3,r5,r3
1000237c:	1986703a 	and	r3,r3,r6
10002380:	1800091e 	bne	r3,zero,100023a8 <strlen+0x74>
10002384:	10800104 	addi	r2,r2,4
10002388:	10c00017 	ldw	r3,0(r2)
1000238c:	19cb883a 	add	r5,r3,r7
10002390:	00c6303a 	nor	r3,zero,r3
10002394:	28c6703a 	and	r3,r5,r3
10002398:	1986703a 	and	r3,r3,r6
1000239c:	183ff226 	beq	r3,zero,10002368 <__alt_data_end+0xf8002368>
100023a0:	00000106 	br	100023a8 <strlen+0x74>
100023a4:	10800044 	addi	r2,r2,1
100023a8:	10c00007 	ldb	r3,0(r2)
100023ac:	183ffd1e 	bne	r3,zero,100023a4 <__alt_data_end+0xf80023a4>
100023b0:	1105c83a 	sub	r2,r2,r4
100023b4:	f800283a 	ret
100023b8:	2005883a 	mov	r2,r4
100023bc:	003ffa06 	br	100023a8 <__alt_data_end+0xf80023a8>

100023c0 <__sprint_r>:
100023c0:	30800217 	ldw	r2,8(r6)
100023c4:	defffe04 	addi	sp,sp,-8
100023c8:	dc000015 	stw	r16,0(sp)
100023cc:	dfc00115 	stw	ra,4(sp)
100023d0:	3021883a 	mov	r16,r6
100023d4:	10000226 	beq	r2,zero,100023e0 <__sprint_r+0x20>
100023d8:	00065700 	call	10006570 <__sfvwrite_r>
100023dc:	80000215 	stw	zero,8(r16)
100023e0:	80000115 	stw	zero,4(r16)
100023e4:	dfc00117 	ldw	ra,4(sp)
100023e8:	dc000017 	ldw	r16,0(sp)
100023ec:	dec00204 	addi	sp,sp,8
100023f0:	f800283a 	ret

100023f4 <___vfprintf_internal_r>:
100023f4:	defeb904 	addi	sp,sp,-1308
100023f8:	dc013d15 	stw	r16,1268(sp)
100023fc:	d9013015 	stw	r4,1216(sp)
10002400:	dfc14615 	stw	ra,1304(sp)
10002404:	df014515 	stw	fp,1300(sp)
10002408:	ddc14415 	stw	r23,1296(sp)
1000240c:	dd814315 	stw	r22,1292(sp)
10002410:	dd414215 	stw	r21,1288(sp)
10002414:	dd014115 	stw	r20,1284(sp)
10002418:	dcc14015 	stw	r19,1280(sp)
1000241c:	dc813f15 	stw	r18,1276(sp)
10002420:	dc413e15 	stw	r17,1272(sp)
10002424:	d9412915 	stw	r5,1188(sp)
10002428:	3021883a 	mov	r16,r6
1000242c:	d9c12d15 	stw	r7,1204(sp)
10002430:	0006c5c0 	call	10006c5c <_localeconv_r>
10002434:	10800017 	ldw	r2,0(r2)
10002438:	d9013017 	ldw	r4,1216(sp)
1000243c:	d8013315 	stw	zero,1228(sp)
10002440:	d8813715 	stw	r2,1244(sp)
10002444:	d8013415 	stw	zero,1232(sp)
10002448:	20000226 	beq	r4,zero,10002454 <___vfprintf_internal_r+0x60>
1000244c:	20800e17 	ldw	r2,56(r4)
10002450:	10014b26 	beq	r2,zero,10002980 <___vfprintf_internal_r+0x58c>
10002454:	d8c12917 	ldw	r3,1188(sp)
10002458:	1880030b 	ldhu	r2,12(r3)
1000245c:	10c0020c 	andi	r3,r2,8
10002460:	18ffffcc 	andi	r3,r3,65535
10002464:	18e0001c 	xori	r3,r3,32768
10002468:	18e00004 	addi	r3,r3,-32768
1000246c:	1800ed26 	beq	r3,zero,10002824 <___vfprintf_internal_r+0x430>
10002470:	d9012917 	ldw	r4,1188(sp)
10002474:	20c00417 	ldw	r3,16(r4)
10002478:	1800ea26 	beq	r3,zero,10002824 <___vfprintf_internal_r+0x430>
1000247c:	1100068c 	andi	r4,r2,26
10002480:	00c00284 	movi	r3,10
10002484:	20c0f026 	beq	r4,r3,10002848 <___vfprintf_internal_r+0x454>
10002488:	d9010dc4 	addi	r4,sp,1079
1000248c:	d8810e04 	addi	r2,sp,1080
10002490:	dc413017 	ldw	r17,1216(sp)
10002494:	d8c00404 	addi	r3,sp,16
10002498:	d9012615 	stw	r4,1176(sp)
1000249c:	1109c83a 	sub	r4,r2,r4
100024a0:	d8812715 	stw	r2,1180(sp)
100024a4:	d8c11b15 	stw	r3,1132(sp)
100024a8:	d8011d15 	stw	zero,1140(sp)
100024ac:	d8011c15 	stw	zero,1136(sp)
100024b0:	802b883a 	mov	r21,r16
100024b4:	d8013215 	stw	zero,1224(sp)
100024b8:	d8013615 	stw	zero,1240(sp)
100024bc:	d8013515 	stw	zero,1236(sp)
100024c0:	d8012c15 	stw	zero,1200(sp)
100024c4:	1813883a 	mov	r9,r3
100024c8:	d9013915 	stw	r4,1252(sp)
100024cc:	a8800007 	ldb	r2,0(r21)
100024d0:	1002f326 	beq	r2,zero,100030a0 <___vfprintf_internal_r+0xcac>
100024d4:	00c00944 	movi	r3,37
100024d8:	a825883a 	mov	r18,r21
100024dc:	10c0021e 	bne	r2,r3,100024e8 <___vfprintf_internal_r+0xf4>
100024e0:	00001406 	br	10002534 <___vfprintf_internal_r+0x140>
100024e4:	10c00326 	beq	r2,r3,100024f4 <___vfprintf_internal_r+0x100>
100024e8:	94800044 	addi	r18,r18,1
100024ec:	90800007 	ldb	r2,0(r18)
100024f0:	103ffc1e 	bne	r2,zero,100024e4 <__alt_data_end+0xf80024e4>
100024f4:	9561c83a 	sub	r16,r18,r21
100024f8:	80000e26 	beq	r16,zero,10002534 <___vfprintf_internal_r+0x140>
100024fc:	da011d17 	ldw	r8,1140(sp)
10002500:	d8c11c17 	ldw	r3,1136(sp)
10002504:	4d400015 	stw	r21,0(r9)
10002508:	4c000115 	stw	r16,4(r9)
1000250c:	4411883a 	add	r8,r8,r16
10002510:	18c00044 	addi	r3,r3,1
10002514:	da011d15 	stw	r8,1140(sp)
10002518:	d8c11c15 	stw	r3,1136(sp)
1000251c:	008001c4 	movi	r2,7
10002520:	10c11016 	blt	r2,r3,10002964 <___vfprintf_internal_r+0x570>
10002524:	4a400204 	addi	r9,r9,8
10002528:	d8812c17 	ldw	r2,1200(sp)
1000252c:	1405883a 	add	r2,r2,r16
10002530:	d8812c15 	stw	r2,1200(sp)
10002534:	90800007 	ldb	r2,0(r18)
10002538:	1000ee26 	beq	r2,zero,100028f4 <___vfprintf_internal_r+0x500>
1000253c:	95400044 	addi	r21,r18,1
10002540:	94800047 	ldb	r18,1(r18)
10002544:	073fffc4 	movi	fp,-1
10002548:	e007883a 	mov	r3,fp
1000254c:	d8012585 	stb	zero,1174(sp)
10002550:	d8012e15 	stw	zero,1208(sp)
10002554:	0021883a 	mov	r16,zero
10002558:	05001604 	movi	r20,88
1000255c:	04c00244 	movi	r19,9
10002560:	4839883a 	mov	fp,r9
10002564:	ad400044 	addi	r21,r21,1
10002568:	90bff804 	addi	r2,r18,-32
1000256c:	a080462e 	bgeu	r20,r2,10002688 <___vfprintf_internal_r+0x294>
10002570:	e013883a 	mov	r9,fp
10002574:	9000df26 	beq	r18,zero,100028f4 <___vfprintf_internal_r+0x500>
10002578:	00c00044 	movi	r3,1
1000257c:	d8c12815 	stw	r3,1184(sp)
10002580:	dc810405 	stb	r18,1040(sp)
10002584:	d8012585 	stb	zero,1174(sp)
10002588:	d8c12b15 	stw	r3,1196(sp)
1000258c:	dcc10404 	addi	r19,sp,1040
10002590:	d8013115 	stw	zero,1220(sp)
10002594:	80c0008c 	andi	r3,r16,2
10002598:	d8c12a15 	stw	r3,1192(sp)
1000259c:	18000326 	beq	r3,zero,100025ac <___vfprintf_internal_r+0x1b8>
100025a0:	d8c12817 	ldw	r3,1184(sp)
100025a4:	18c00084 	addi	r3,r3,2
100025a8:	d8c12815 	stw	r3,1184(sp)
100025ac:	80c0210c 	andi	r3,r16,132
100025b0:	d8c12f15 	stw	r3,1212(sp)
100025b4:	1802251e 	bne	r3,zero,10002e4c <___vfprintf_internal_r+0xa58>
100025b8:	d9012e17 	ldw	r4,1208(sp)
100025bc:	d8c12817 	ldw	r3,1184(sp)
100025c0:	20edc83a 	sub	r22,r4,r3
100025c4:	0582210e 	bge	zero,r22,10002e4c <___vfprintf_internal_r+0xa58>
100025c8:	02800404 	movi	r10,16
100025cc:	da011d17 	ldw	r8,1140(sp)
100025d0:	d8c11c17 	ldw	r3,1136(sp)
100025d4:	05c40074 	movhi	r23,4097
100025d8:	bdfa4384 	addi	r23,r23,-5874
100025dc:	5580200e 	bge	r10,r22,10002660 <___vfprintf_internal_r+0x26c>
100025e0:	dc813815 	stw	r18,1248(sp)
100025e4:	5039883a 	mov	fp,r10
100025e8:	b825883a 	mov	r18,r23
100025ec:	050001c4 	movi	r20,7
100025f0:	b02f883a 	mov	r23,r22
100025f4:	802d883a 	mov	r22,r16
100025f8:	dc012917 	ldw	r16,1188(sp)
100025fc:	00000306 	br	1000260c <___vfprintf_internal_r+0x218>
10002600:	bdfffc04 	addi	r23,r23,-16
10002604:	4a400204 	addi	r9,r9,8
10002608:	e5c0110e 	bge	fp,r23,10002650 <___vfprintf_internal_r+0x25c>
1000260c:	4c800015 	stw	r18,0(r9)
10002610:	4f000115 	stw	fp,4(r9)
10002614:	42000404 	addi	r8,r8,16
10002618:	18c00044 	addi	r3,r3,1
1000261c:	da011d15 	stw	r8,1140(sp)
10002620:	d8c11c15 	stw	r3,1136(sp)
10002624:	a0fff60e 	bge	r20,r3,10002600 <__alt_data_end+0xf8002600>
10002628:	8809883a 	mov	r4,r17
1000262c:	800b883a 	mov	r5,r16
10002630:	d9811b04 	addi	r6,sp,1132
10002634:	00023c00 	call	100023c0 <__sprint_r>
10002638:	1000b41e 	bne	r2,zero,1000290c <___vfprintf_internal_r+0x518>
1000263c:	bdfffc04 	addi	r23,r23,-16
10002640:	da011d17 	ldw	r8,1140(sp)
10002644:	d8c11c17 	ldw	r3,1136(sp)
10002648:	da400404 	addi	r9,sp,16
1000264c:	e5ffef16 	blt	fp,r23,1000260c <__alt_data_end+0xf800260c>
10002650:	b021883a 	mov	r16,r22
10002654:	b82d883a 	mov	r22,r23
10002658:	902f883a 	mov	r23,r18
1000265c:	dc813817 	ldw	r18,1248(sp)
10002660:	4dc00015 	stw	r23,0(r9)
10002664:	4d800115 	stw	r22,4(r9)
10002668:	4591883a 	add	r8,r8,r22
1000266c:	18c00044 	addi	r3,r3,1
10002670:	da011d15 	stw	r8,1140(sp)
10002674:	d8c11c15 	stw	r3,1136(sp)
10002678:	008001c4 	movi	r2,7
1000267c:	10c3fe16 	blt	r2,r3,10003678 <___vfprintf_internal_r+0x1284>
10002680:	4a400204 	addi	r9,r9,8
10002684:	0001f306 	br	10002e54 <___vfprintf_internal_r+0xa60>
10002688:	1085883a 	add	r2,r2,r2
1000268c:	1085883a 	add	r2,r2,r2
10002690:	01040034 	movhi	r4,4096
10002694:	2109a904 	addi	r4,r4,9892
10002698:	1105883a 	add	r2,r2,r4
1000269c:	10800017 	ldw	r2,0(r2)
100026a0:	1000683a 	jmp	r2
100026a4:	10002d80 	call	110002d8 <_gp+0xfe7ccc>
100026a8:	10002570 	cmpltui	zero,r2,149
100026ac:	10002570 	cmpltui	zero,r2,149
100026b0:	10002d98 	cmpnei	zero,r2,182
100026b4:	10002570 	cmpltui	zero,r2,149
100026b8:	10002570 	cmpltui	zero,r2,149
100026bc:	10002570 	cmpltui	zero,r2,149
100026c0:	10002570 	cmpltui	zero,r2,149
100026c4:	10002570 	cmpltui	zero,r2,149
100026c8:	10002570 	cmpltui	zero,r2,149
100026cc:	10002c50 	cmplti	zero,r2,177
100026d0:	10002de4 	muli	zero,r2,183
100026d4:	10002570 	cmpltui	zero,r2,149
100026d8:	10002818 	cmpnei	zero,r2,160
100026dc:	10002bb8 	rdprs	zero,r2,174
100026e0:	10002570 	cmpltui	zero,r2,149
100026e4:	10002da4 	muli	zero,r2,182
100026e8:	10002db0 	cmpltui	zero,r2,182
100026ec:	10002db0 	cmpltui	zero,r2,182
100026f0:	10002db0 	cmpltui	zero,r2,182
100026f4:	10002db0 	cmpltui	zero,r2,182
100026f8:	10002db0 	cmpltui	zero,r2,182
100026fc:	10002db0 	cmpltui	zero,r2,182
10002700:	10002db0 	cmpltui	zero,r2,182
10002704:	10002db0 	cmpltui	zero,r2,182
10002708:	10002db0 	cmpltui	zero,r2,182
1000270c:	10002570 	cmpltui	zero,r2,149
10002710:	10002570 	cmpltui	zero,r2,149
10002714:	10002570 	cmpltui	zero,r2,149
10002718:	10002570 	cmpltui	zero,r2,149
1000271c:	10002570 	cmpltui	zero,r2,149
10002720:	10002570 	cmpltui	zero,r2,149
10002724:	10002570 	cmpltui	zero,r2,149
10002728:	10002570 	cmpltui	zero,r2,149
1000272c:	10002570 	cmpltui	zero,r2,149
10002730:	10002570 	cmpltui	zero,r2,149
10002734:	10002988 	cmpgei	zero,r2,166
10002738:	10002a48 	cmpgei	zero,r2,169
1000273c:	10002570 	cmpltui	zero,r2,149
10002740:	10002a48 	cmpgei	zero,r2,169
10002744:	10002570 	cmpltui	zero,r2,149
10002748:	10002570 	cmpltui	zero,r2,149
1000274c:	10002570 	cmpltui	zero,r2,149
10002750:	10002570 	cmpltui	zero,r2,149
10002754:	10002adc 	xori	zero,r2,171
10002758:	10002570 	cmpltui	zero,r2,149
1000275c:	10002570 	cmpltui	zero,r2,149
10002760:	10002ae8 	cmpgeui	zero,r2,171
10002764:	10002570 	cmpltui	zero,r2,149
10002768:	10002570 	cmpltui	zero,r2,149
1000276c:	10002570 	cmpltui	zero,r2,149
10002770:	10002570 	cmpltui	zero,r2,149
10002774:	10002570 	cmpltui	zero,r2,149
10002778:	10002b20 	cmpeqi	zero,r2,172
1000277c:	10002570 	cmpltui	zero,r2,149
10002780:	10002570 	cmpltui	zero,r2,149
10002784:	10002b5c 	xori	zero,r2,173
10002788:	10002570 	cmpltui	zero,r2,149
1000278c:	10002570 	cmpltui	zero,r2,149
10002790:	10002570 	cmpltui	zero,r2,149
10002794:	10002570 	cmpltui	zero,r2,149
10002798:	10002570 	cmpltui	zero,r2,149
1000279c:	10002570 	cmpltui	zero,r2,149
100027a0:	10002570 	cmpltui	zero,r2,149
100027a4:	10002570 	cmpltui	zero,r2,149
100027a8:	10002570 	cmpltui	zero,r2,149
100027ac:	10002570 	cmpltui	zero,r2,149
100027b0:	10002df4 	orhi	zero,r2,183
100027b4:	10002e28 	cmpgeui	zero,r2,184
100027b8:	10002a48 	cmpgei	zero,r2,169
100027bc:	10002a48 	cmpgei	zero,r2,169
100027c0:	10002a48 	cmpgei	zero,r2,169
100027c4:	10002d74 	orhi	zero,r2,181
100027c8:	10002e28 	cmpgeui	zero,r2,184
100027cc:	10002570 	cmpltui	zero,r2,149
100027d0:	10002570 	cmpltui	zero,r2,149
100027d4:	10002c00 	call	110002c0 <_gp+0xfe7cb4>
100027d8:	10002570 	cmpltui	zero,r2,149
100027dc:	10002c18 	cmpnei	zero,r2,176
100027e0:	10002e34 	orhi	zero,r2,184
100027e4:	10002c78 	rdprs	zero,r2,177
100027e8:	10002cc8 	cmpgei	zero,r2,179
100027ec:	10002570 	cmpltui	zero,r2,149
100027f0:	10002cd4 	ori	zero,r2,179
100027f4:	10002570 	cmpltui	zero,r2,149
100027f8:	10002e40 	call	110002e4 <_gp+0xfe7cd8>
100027fc:	10002570 	cmpltui	zero,r2,149
10002800:	10002570 	cmpltui	zero,r2,149
10002804:	10002d38 	rdprs	zero,r2,180
10002808:	d9012e17 	ldw	r4,1208(sp)
1000280c:	d8812d15 	stw	r2,1204(sp)
10002810:	0109c83a 	sub	r4,zero,r4
10002814:	d9012e15 	stw	r4,1208(sp)
10002818:	84000114 	ori	r16,r16,4
1000281c:	ac800007 	ldb	r18,0(r21)
10002820:	003f5006 	br	10002564 <__alt_data_end+0xf8002564>
10002824:	d9013017 	ldw	r4,1216(sp)
10002828:	d9412917 	ldw	r5,1188(sp)
1000282c:	00042940 	call	10004294 <__swsetup_r>
10002830:	10003d1e 	bne	r2,zero,10002928 <___vfprintf_internal_r+0x534>
10002834:	d8c12917 	ldw	r3,1188(sp)
10002838:	1880030b 	ldhu	r2,12(r3)
1000283c:	00c00284 	movi	r3,10
10002840:	1100068c 	andi	r4,r2,26
10002844:	20ff101e 	bne	r4,r3,10002488 <__alt_data_end+0xf8002488>
10002848:	d9012917 	ldw	r4,1188(sp)
1000284c:	20c0038b 	ldhu	r3,14(r4)
10002850:	193fffcc 	andi	r4,r3,65535
10002854:	2120001c 	xori	r4,r4,32768
10002858:	21200004 	addi	r4,r4,-32768
1000285c:	203f0a16 	blt	r4,zero,10002488 <__alt_data_end+0xf8002488>
10002860:	d9012917 	ldw	r4,1188(sp)
10002864:	d9c12d17 	ldw	r7,1204(sp)
10002868:	10bfff4c 	andi	r2,r2,65533
1000286c:	22800717 	ldw	r10,28(r4)
10002870:	22400917 	ldw	r9,36(r4)
10002874:	d9013017 	ldw	r4,1216(sp)
10002878:	02010004 	movi	r8,1024
1000287c:	d881070d 	sth	r2,1052(sp)
10002880:	d9410404 	addi	r5,sp,1040
10002884:	d8800404 	addi	r2,sp,16
10002888:	800d883a 	mov	r6,r16
1000288c:	d8c1078d 	sth	r3,1054(sp)
10002890:	da810b15 	stw	r10,1068(sp)
10002894:	da410d15 	stw	r9,1076(sp)
10002898:	d8810415 	stw	r2,1040(sp)
1000289c:	d8810815 	stw	r2,1056(sp)
100028a0:	da010615 	stw	r8,1048(sp)
100028a4:	da010915 	stw	r8,1060(sp)
100028a8:	d8010a15 	stw	zero,1064(sp)
100028ac:	00023f40 	call	100023f4 <___vfprintf_internal_r>
100028b0:	d8812c15 	stw	r2,1200(sp)
100028b4:	10000416 	blt	r2,zero,100028c8 <___vfprintf_internal_r+0x4d4>
100028b8:	d9013017 	ldw	r4,1216(sp)
100028bc:	d9410404 	addi	r5,sp,1040
100028c0:	0005c600 	call	10005c60 <_fflush_r>
100028c4:	1006501e 	bne	r2,zero,10004208 <___vfprintf_internal_r+0x1e14>
100028c8:	d881070b 	ldhu	r2,1052(sp)
100028cc:	1080100c 	andi	r2,r2,64
100028d0:	10bfffcc 	andi	r2,r2,65535
100028d4:	10a0001c 	xori	r2,r2,32768
100028d8:	10a00004 	addi	r2,r2,-32768
100028dc:	10001426 	beq	r2,zero,10002930 <___vfprintf_internal_r+0x53c>
100028e0:	d8c12917 	ldw	r3,1188(sp)
100028e4:	1880030b 	ldhu	r2,12(r3)
100028e8:	10801014 	ori	r2,r2,64
100028ec:	1880030d 	sth	r2,12(r3)
100028f0:	00000f06 	br	10002930 <___vfprintf_internal_r+0x53c>
100028f4:	d8811d17 	ldw	r2,1140(sp)
100028f8:	10000426 	beq	r2,zero,1000290c <___vfprintf_internal_r+0x518>
100028fc:	d9013017 	ldw	r4,1216(sp)
10002900:	d9412917 	ldw	r5,1188(sp)
10002904:	d9811b04 	addi	r6,sp,1132
10002908:	00023c00 	call	100023c0 <__sprint_r>
1000290c:	d8c12917 	ldw	r3,1188(sp)
10002910:	1880030b 	ldhu	r2,12(r3)
10002914:	1080100c 	andi	r2,r2,64
10002918:	10bfffcc 	andi	r2,r2,65535
1000291c:	10a0001c 	xori	r2,r2,32768
10002920:	10a00004 	addi	r2,r2,-32768
10002924:	10000226 	beq	r2,zero,10002930 <___vfprintf_internal_r+0x53c>
10002928:	00bfffc4 	movi	r2,-1
1000292c:	d8812c15 	stw	r2,1200(sp)
10002930:	d8812c17 	ldw	r2,1200(sp)
10002934:	dfc14617 	ldw	ra,1304(sp)
10002938:	df014517 	ldw	fp,1300(sp)
1000293c:	ddc14417 	ldw	r23,1296(sp)
10002940:	dd814317 	ldw	r22,1292(sp)
10002944:	dd414217 	ldw	r21,1288(sp)
10002948:	dd014117 	ldw	r20,1284(sp)
1000294c:	dcc14017 	ldw	r19,1280(sp)
10002950:	dc813f17 	ldw	r18,1276(sp)
10002954:	dc413e17 	ldw	r17,1272(sp)
10002958:	dc013d17 	ldw	r16,1268(sp)
1000295c:	dec14704 	addi	sp,sp,1308
10002960:	f800283a 	ret
10002964:	d9412917 	ldw	r5,1188(sp)
10002968:	8809883a 	mov	r4,r17
1000296c:	d9811b04 	addi	r6,sp,1132
10002970:	00023c00 	call	100023c0 <__sprint_r>
10002974:	103fe51e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10002978:	da400404 	addi	r9,sp,16
1000297c:	003eea06 	br	10002528 <__alt_data_end+0xf8002528>
10002980:	0005f1c0 	call	10005f1c <__sinit>
10002984:	003eb306 	br	10002454 <__alt_data_end+0xf8002454>
10002988:	e013883a 	mov	r9,fp
1000298c:	84000414 	ori	r16,r16,16
10002990:	1839883a 	mov	fp,r3
10002994:	8080080c 	andi	r2,r16,32
10002998:	10034426 	beq	r2,zero,100036ac <___vfprintf_internal_r+0x12b8>
1000299c:	d8c12d17 	ldw	r3,1204(sp)
100029a0:	18800117 	ldw	r2,4(r3)
100029a4:	1dc00017 	ldw	r23,0(r3)
100029a8:	18c00204 	addi	r3,r3,8
100029ac:	d8c12d15 	stw	r3,1204(sp)
100029b0:	102d883a 	mov	r22,r2
100029b4:	1003020e 	bge	r2,zero,100035c0 <___vfprintf_internal_r+0x11cc>
100029b8:	05efc83a 	sub	r23,zero,r23
100029bc:	b804c03a 	cmpne	r2,r23,zero
100029c0:	05adc83a 	sub	r22,zero,r22
100029c4:	b0adc83a 	sub	r22,r22,r2
100029c8:	00800b44 	movi	r2,45
100029cc:	d8812585 	stb	r2,1174(sp)
100029d0:	00c00044 	movi	r3,1
100029d4:	bd84b03a 	or	r2,r23,r22
100029d8:	e0000216 	blt	fp,zero,100029e4 <___vfprintf_internal_r+0x5f0>
100029dc:	013fdfc4 	movi	r4,-129
100029e0:	8120703a 	and	r16,r16,r4
100029e4:	1001cc1e 	bne	r2,zero,10003118 <___vfprintf_internal_r+0xd24>
100029e8:	e001cb1e 	bne	fp,zero,10003118 <___vfprintf_internal_r+0xd24>
100029ec:	18c03fcc 	andi	r3,r3,255
100029f0:	1802ca1e 	bne	r3,zero,1000351c <___vfprintf_internal_r+0x1128>
100029f4:	8080004c 	andi	r2,r16,1
100029f8:	1002c826 	beq	r2,zero,1000351c <___vfprintf_internal_r+0x1128>
100029fc:	d8c13917 	ldw	r3,1252(sp)
10002a00:	00800c04 	movi	r2,48
10002a04:	d8810dc5 	stb	r2,1079(sp)
10002a08:	d8c12b15 	stw	r3,1196(sp)
10002a0c:	dcc10dc4 	addi	r19,sp,1079
10002a10:	d8812b17 	ldw	r2,1196(sp)
10002a14:	d8812815 	stw	r2,1184(sp)
10002a18:	1700010e 	bge	r2,fp,10002a20 <___vfprintf_internal_r+0x62c>
10002a1c:	df012815 	stw	fp,1184(sp)
10002a20:	d8812583 	ldbu	r2,1174(sp)
10002a24:	df013115 	stw	fp,1220(sp)
10002a28:	10803fcc 	andi	r2,r2,255
10002a2c:	1080201c 	xori	r2,r2,128
10002a30:	10bfe004 	addi	r2,r2,-128
10002a34:	103ed726 	beq	r2,zero,10002594 <__alt_data_end+0xf8002594>
10002a38:	d8c12817 	ldw	r3,1184(sp)
10002a3c:	18c00044 	addi	r3,r3,1
10002a40:	d8c12815 	stw	r3,1184(sp)
10002a44:	003ed306 	br	10002594 <__alt_data_end+0xf8002594>
10002a48:	8080020c 	andi	r2,r16,8
10002a4c:	e013883a 	mov	r9,fp
10002a50:	1839883a 	mov	fp,r3
10002a54:	1003a626 	beq	r2,zero,100038f0 <___vfprintf_internal_r+0x14fc>
10002a58:	d9012d17 	ldw	r4,1204(sp)
10002a5c:	25800017 	ldw	r22,0(r4)
10002a60:	25000117 	ldw	r20,4(r4)
10002a64:	21000204 	addi	r4,r4,8
10002a68:	d9012d15 	stw	r4,1204(sp)
10002a6c:	dd813315 	stw	r22,1228(sp)
10002a70:	dd013415 	stw	r20,1232(sp)
10002a74:	b009883a 	mov	r4,r22
10002a78:	a00b883a 	mov	r5,r20
10002a7c:	da413c15 	stw	r9,1264(sp)
10002a80:	00090a80 	call	100090a8 <__isinfd>
10002a84:	da413c17 	ldw	r9,1264(sp)
10002a88:	b009883a 	mov	r4,r22
10002a8c:	a00b883a 	mov	r5,r20
10002a90:	10041d26 	beq	r2,zero,10003b08 <___vfprintf_internal_r+0x1714>
10002a94:	000d883a 	mov	r6,zero
10002a98:	000f883a 	mov	r7,zero
10002a9c:	000ae7c0 	call	1000ae7c <__ltdf2>
10002aa0:	da413c17 	ldw	r9,1264(sp)
10002aa4:	1004da16 	blt	r2,zero,10003e10 <___vfprintf_internal_r+0x1a1c>
10002aa8:	d8812583 	ldbu	r2,1174(sp)
10002aac:	00c011c4 	movi	r3,71
10002ab0:	1c83d116 	blt	r3,r18,100039f8 <___vfprintf_internal_r+0x1604>
10002ab4:	04c40074 	movhi	r19,4097
10002ab8:	9cfa3304 	addi	r19,r19,-5940
10002abc:	00c000c4 	movi	r3,3
10002ac0:	d8c12815 	stw	r3,1184(sp)
10002ac4:	00ffdfc4 	movi	r3,-129
10002ac8:	80e0703a 	and	r16,r16,r3
10002acc:	d8c12817 	ldw	r3,1184(sp)
10002ad0:	d8013115 	stw	zero,1220(sp)
10002ad4:	d8c12b15 	stw	r3,1196(sp)
10002ad8:	003fd306 	br	10002a28 <__alt_data_end+0xf8002a28>
10002adc:	84000214 	ori	r16,r16,8
10002ae0:	ac800007 	ldb	r18,0(r21)
10002ae4:	003e9f06 	br	10002564 <__alt_data_end+0xf8002564>
10002ae8:	e013883a 	mov	r9,fp
10002aec:	84000414 	ori	r16,r16,16
10002af0:	1839883a 	mov	fp,r3
10002af4:	8080080c 	andi	r2,r16,32
10002af8:	10031d26 	beq	r2,zero,10003770 <___vfprintf_internal_r+0x137c>
10002afc:	d8812d17 	ldw	r2,1204(sp)
10002b00:	0007883a 	mov	r3,zero
10002b04:	15c00017 	ldw	r23,0(r2)
10002b08:	15800117 	ldw	r22,4(r2)
10002b0c:	10800204 	addi	r2,r2,8
10002b10:	d8812d15 	stw	r2,1204(sp)
10002b14:	d8012585 	stb	zero,1174(sp)
10002b18:	bd84b03a 	or	r2,r23,r22
10002b1c:	003fae06 	br	100029d8 <__alt_data_end+0xf80029d8>
10002b20:	e013883a 	mov	r9,fp
10002b24:	84000414 	ori	r16,r16,16
10002b28:	1839883a 	mov	fp,r3
10002b2c:	8080080c 	andi	r2,r16,32
10002b30:	1002e726 	beq	r2,zero,100036d0 <___vfprintf_internal_r+0x12dc>
10002b34:	d8c12d17 	ldw	r3,1204(sp)
10002b38:	d9012d17 	ldw	r4,1204(sp)
10002b3c:	1dc00017 	ldw	r23,0(r3)
10002b40:	1d800117 	ldw	r22,4(r3)
10002b44:	21000204 	addi	r4,r4,8
10002b48:	00c00044 	movi	r3,1
10002b4c:	d9012d15 	stw	r4,1204(sp)
10002b50:	bd84b03a 	or	r2,r23,r22
10002b54:	d8012585 	stb	zero,1174(sp)
10002b58:	003f9f06 	br	100029d8 <__alt_data_end+0xf80029d8>
10002b5c:	e013883a 	mov	r9,fp
10002b60:	1839883a 	mov	fp,r3
10002b64:	00c40074 	movhi	r3,4097
10002b68:	18fa3704 	addi	r3,r3,-5924
10002b6c:	d8c13615 	stw	r3,1240(sp)
10002b70:	8080080c 	andi	r2,r16,32
10002b74:	10007726 	beq	r2,zero,10002d54 <___vfprintf_internal_r+0x960>
10002b78:	d9012d17 	ldw	r4,1204(sp)
10002b7c:	25c00017 	ldw	r23,0(r4)
10002b80:	25800117 	ldw	r22,4(r4)
10002b84:	21000204 	addi	r4,r4,8
10002b88:	d9012d15 	stw	r4,1204(sp)
10002b8c:	8080004c 	andi	r2,r16,1
10002b90:	1002c226 	beq	r2,zero,1000369c <___vfprintf_internal_r+0x12a8>
10002b94:	bd84b03a 	or	r2,r23,r22
10002b98:	10035d26 	beq	r2,zero,10003910 <___vfprintf_internal_r+0x151c>
10002b9c:	00c00c04 	movi	r3,48
10002ba0:	d8c12505 	stb	r3,1172(sp)
10002ba4:	dc812545 	stb	r18,1173(sp)
10002ba8:	84000094 	ori	r16,r16,2
10002bac:	00c00084 	movi	r3,2
10002bb0:	d8012585 	stb	zero,1174(sp)
10002bb4:	003f8806 	br	100029d8 <__alt_data_end+0xf80029d8>
10002bb8:	ac800007 	ldb	r18,0(r21)
10002bbc:	00c00a84 	movi	r3,42
10002bc0:	adc00044 	addi	r23,r21,1
10002bc4:	90c57526 	beq	r18,r3,1000419c <___vfprintf_internal_r+0x1da8>
10002bc8:	95bff404 	addi	r22,r18,-48
10002bcc:	0009883a 	mov	r4,zero
10002bd0:	9d84ff36 	bltu	r19,r22,10003fd0 <___vfprintf_internal_r+0x1bdc>
10002bd4:	01400284 	movi	r5,10
10002bd8:	000b2bc0 	call	1000b2bc <__mulsi3>
10002bdc:	bc800007 	ldb	r18,0(r23)
10002be0:	b089883a 	add	r4,r22,r2
10002be4:	bdc00044 	addi	r23,r23,1
10002be8:	95bff404 	addi	r22,r18,-48
10002bec:	9dbff92e 	bgeu	r19,r22,10002bd4 <__alt_data_end+0xf8002bd4>
10002bf0:	2007883a 	mov	r3,r4
10002bf4:	20044316 	blt	r4,zero,10003d04 <___vfprintf_internal_r+0x1910>
10002bf8:	b82b883a 	mov	r21,r23
10002bfc:	003e5a06 	br	10002568 <__alt_data_end+0xf8002568>
10002c00:	ac800007 	ldb	r18,0(r21)
10002c04:	01001b04 	movi	r4,108
10002c08:	a805883a 	mov	r2,r21
10002c0c:	91045526 	beq	r18,r4,10003d64 <___vfprintf_internal_r+0x1970>
10002c10:	84000414 	ori	r16,r16,16
10002c14:	003e5306 	br	10002564 <__alt_data_end+0xf8002564>
10002c18:	8080080c 	andi	r2,r16,32
10002c1c:	e013883a 	mov	r9,fp
10002c20:	10034026 	beq	r2,zero,10003924 <___vfprintf_internal_r+0x1530>
10002c24:	d9012d17 	ldw	r4,1204(sp)
10002c28:	20800017 	ldw	r2,0(r4)
10002c2c:	d9012c17 	ldw	r4,1200(sp)
10002c30:	2007d7fa 	srai	r3,r4,31
10002c34:	d9012d17 	ldw	r4,1204(sp)
10002c38:	10c00115 	stw	r3,4(r2)
10002c3c:	21000104 	addi	r4,r4,4
10002c40:	d9012d15 	stw	r4,1204(sp)
10002c44:	d9012c17 	ldw	r4,1200(sp)
10002c48:	11000015 	stw	r4,0(r2)
10002c4c:	003e1f06 	br	100024cc <__alt_data_end+0xf80024cc>
10002c50:	d9012d17 	ldw	r4,1204(sp)
10002c54:	21000017 	ldw	r4,0(r4)
10002c58:	d9012e15 	stw	r4,1208(sp)
10002c5c:	d9012d17 	ldw	r4,1204(sp)
10002c60:	20800104 	addi	r2,r4,4
10002c64:	d9012e17 	ldw	r4,1208(sp)
10002c68:	203ee716 	blt	r4,zero,10002808 <__alt_data_end+0xf8002808>
10002c6c:	d8812d15 	stw	r2,1204(sp)
10002c70:	ac800007 	ldb	r18,0(r21)
10002c74:	003e3b06 	br	10002564 <__alt_data_end+0xf8002564>
10002c78:	e013883a 	mov	r9,fp
10002c7c:	1839883a 	mov	fp,r3
10002c80:	d8c12d17 	ldw	r3,1204(sp)
10002c84:	00800c04 	movi	r2,48
10002c88:	01040074 	movhi	r4,4097
10002c8c:	213a3c04 	addi	r4,r4,-5904
10002c90:	1dc00017 	ldw	r23,0(r3)
10002c94:	18c00104 	addi	r3,r3,4
10002c98:	d8812505 	stb	r2,1172(sp)
10002c9c:	00801e04 	movi	r2,120
10002ca0:	d8812545 	stb	r2,1173(sp)
10002ca4:	d8c12d15 	stw	r3,1204(sp)
10002ca8:	002d883a 	mov	r22,zero
10002cac:	84000094 	ori	r16,r16,2
10002cb0:	d9013615 	stw	r4,1240(sp)
10002cb4:	00c00084 	movi	r3,2
10002cb8:	04801e04 	movi	r18,120
10002cbc:	b805883a 	mov	r2,r23
10002cc0:	d8012585 	stb	zero,1174(sp)
10002cc4:	003f4406 	br	100029d8 <__alt_data_end+0xf80029d8>
10002cc8:	84000814 	ori	r16,r16,32
10002ccc:	ac800007 	ldb	r18,0(r21)
10002cd0:	003e2406 	br	10002564 <__alt_data_end+0xf8002564>
10002cd4:	d8812d17 	ldw	r2,1204(sp)
10002cd8:	d8012585 	stb	zero,1174(sp)
10002cdc:	e013883a 	mov	r9,fp
10002ce0:	14c00017 	ldw	r19,0(r2)
10002ce4:	1839883a 	mov	fp,r3
10002ce8:	15c00104 	addi	r23,r2,4
10002cec:	98045526 	beq	r19,zero,10003e44 <___vfprintf_internal_r+0x1a50>
10002cf0:	9809883a 	mov	r4,r19
10002cf4:	18043116 	blt	r3,zero,10003dbc <___vfprintf_internal_r+0x19c8>
10002cf8:	000b883a 	mov	r5,zero
10002cfc:	180d883a 	mov	r6,r3
10002d00:	da413c15 	stw	r9,1264(sp)
10002d04:	00075bc0 	call	100075bc <memchr>
10002d08:	da413c17 	ldw	r9,1264(sp)
10002d0c:	10047a26 	beq	r2,zero,10003ef8 <___vfprintf_internal_r+0x1b04>
10002d10:	14c5c83a 	sub	r2,r2,r19
10002d14:	d8812b15 	stw	r2,1196(sp)
10002d18:	e083d40e 	bge	fp,r2,10003c6c <___vfprintf_internal_r+0x1878>
10002d1c:	df012815 	stw	fp,1184(sp)
10002d20:	e004e416 	blt	fp,zero,100040b4 <___vfprintf_internal_r+0x1cc0>
10002d24:	d8812583 	ldbu	r2,1174(sp)
10002d28:	df012b15 	stw	fp,1196(sp)
10002d2c:	ddc12d15 	stw	r23,1204(sp)
10002d30:	d8013115 	stw	zero,1220(sp)
10002d34:	003f3c06 	br	10002a28 <__alt_data_end+0xf8002a28>
10002d38:	00840074 	movhi	r2,4097
10002d3c:	10ba3c04 	addi	r2,r2,-5904
10002d40:	d8813615 	stw	r2,1240(sp)
10002d44:	8080080c 	andi	r2,r16,32
10002d48:	e013883a 	mov	r9,fp
10002d4c:	1839883a 	mov	fp,r3
10002d50:	103f891e 	bne	r2,zero,10002b78 <__alt_data_end+0xf8002b78>
10002d54:	8080040c 	andi	r2,r16,16
10002d58:	1002c326 	beq	r2,zero,10003868 <___vfprintf_internal_r+0x1474>
10002d5c:	d8812d17 	ldw	r2,1204(sp)
10002d60:	002d883a 	mov	r22,zero
10002d64:	15c00017 	ldw	r23,0(r2)
10002d68:	10800104 	addi	r2,r2,4
10002d6c:	d8812d15 	stw	r2,1204(sp)
10002d70:	003f8606 	br	10002b8c <__alt_data_end+0xf8002b8c>
10002d74:	84001014 	ori	r16,r16,64
10002d78:	ac800007 	ldb	r18,0(r21)
10002d7c:	003df906 	br	10002564 <__alt_data_end+0xf8002564>
10002d80:	d8812587 	ldb	r2,1174(sp)
10002d84:	1002e51e 	bne	r2,zero,1000391c <___vfprintf_internal_r+0x1528>
10002d88:	00800804 	movi	r2,32
10002d8c:	d8812585 	stb	r2,1174(sp)
10002d90:	ac800007 	ldb	r18,0(r21)
10002d94:	003df306 	br	10002564 <__alt_data_end+0xf8002564>
10002d98:	84000054 	ori	r16,r16,1
10002d9c:	ac800007 	ldb	r18,0(r21)
10002da0:	003df006 	br	10002564 <__alt_data_end+0xf8002564>
10002da4:	84002014 	ori	r16,r16,128
10002da8:	ac800007 	ldb	r18,0(r21)
10002dac:	003ded06 	br	10002564 <__alt_data_end+0xf8002564>
10002db0:	0009883a 	mov	r4,zero
10002db4:	95bff404 	addi	r22,r18,-48
10002db8:	182f883a 	mov	r23,r3
10002dbc:	01400284 	movi	r5,10
10002dc0:	000b2bc0 	call	1000b2bc <__mulsi3>
10002dc4:	ac800007 	ldb	r18,0(r21)
10002dc8:	1589883a 	add	r4,r2,r22
10002dcc:	ad400044 	addi	r21,r21,1
10002dd0:	95bff404 	addi	r22,r18,-48
10002dd4:	9dbff92e 	bgeu	r19,r22,10002dbc <__alt_data_end+0xf8002dbc>
10002dd8:	b807883a 	mov	r3,r23
10002ddc:	d9012e15 	stw	r4,1208(sp)
10002de0:	003de106 	br	10002568 <__alt_data_end+0xf8002568>
10002de4:	00800ac4 	movi	r2,43
10002de8:	d8812585 	stb	r2,1174(sp)
10002dec:	ac800007 	ldb	r18,0(r21)
10002df0:	003ddc06 	br	10002564 <__alt_data_end+0xf8002564>
10002df4:	d8c12d17 	ldw	r3,1204(sp)
10002df8:	d9012d17 	ldw	r4,1204(sp)
10002dfc:	e013883a 	mov	r9,fp
10002e00:	18800017 	ldw	r2,0(r3)
10002e04:	21000104 	addi	r4,r4,4
10002e08:	00c00044 	movi	r3,1
10002e0c:	d8c12815 	stw	r3,1184(sp)
10002e10:	d8012585 	stb	zero,1174(sp)
10002e14:	d8810405 	stb	r2,1040(sp)
10002e18:	d9012d15 	stw	r4,1204(sp)
10002e1c:	d8c12b15 	stw	r3,1196(sp)
10002e20:	dcc10404 	addi	r19,sp,1040
10002e24:	003dda06 	br	10002590 <__alt_data_end+0xf8002590>
10002e28:	e013883a 	mov	r9,fp
10002e2c:	1839883a 	mov	fp,r3
10002e30:	003ed806 	br	10002994 <__alt_data_end+0xf8002994>
10002e34:	e013883a 	mov	r9,fp
10002e38:	1839883a 	mov	fp,r3
10002e3c:	003f2d06 	br	10002af4 <__alt_data_end+0xf8002af4>
10002e40:	e013883a 	mov	r9,fp
10002e44:	1839883a 	mov	fp,r3
10002e48:	003f3806 	br	10002b2c <__alt_data_end+0xf8002b2c>
10002e4c:	da011d17 	ldw	r8,1140(sp)
10002e50:	d8c11c17 	ldw	r3,1136(sp)
10002e54:	d8812587 	ldb	r2,1174(sp)
10002e58:	10000b26 	beq	r2,zero,10002e88 <___vfprintf_internal_r+0xa94>
10002e5c:	d8812584 	addi	r2,sp,1174
10002e60:	48800015 	stw	r2,0(r9)
10002e64:	00800044 	movi	r2,1
10002e68:	48800115 	stw	r2,4(r9)
10002e6c:	4091883a 	add	r8,r8,r2
10002e70:	1887883a 	add	r3,r3,r2
10002e74:	da011d15 	stw	r8,1140(sp)
10002e78:	d8c11c15 	stw	r3,1136(sp)
10002e7c:	008001c4 	movi	r2,7
10002e80:	10c18e16 	blt	r2,r3,100034bc <___vfprintf_internal_r+0x10c8>
10002e84:	4a400204 	addi	r9,r9,8
10002e88:	d9012a17 	ldw	r4,1192(sp)
10002e8c:	20000b26 	beq	r4,zero,10002ebc <___vfprintf_internal_r+0xac8>
10002e90:	d8812504 	addi	r2,sp,1172
10002e94:	48800015 	stw	r2,0(r9)
10002e98:	00800084 	movi	r2,2
10002e9c:	48800115 	stw	r2,4(r9)
10002ea0:	4091883a 	add	r8,r8,r2
10002ea4:	18c00044 	addi	r3,r3,1
10002ea8:	da011d15 	stw	r8,1140(sp)
10002eac:	d8c11c15 	stw	r3,1136(sp)
10002eb0:	008001c4 	movi	r2,7
10002eb4:	10c17816 	blt	r2,r3,10003498 <___vfprintf_internal_r+0x10a4>
10002eb8:	4a400204 	addi	r9,r9,8
10002ebc:	d9012f17 	ldw	r4,1212(sp)
10002ec0:	00802004 	movi	r2,128
10002ec4:	2080fc26 	beq	r4,r2,100032b8 <___vfprintf_internal_r+0xec4>
10002ec8:	d8813117 	ldw	r2,1220(sp)
10002ecc:	d9012b17 	ldw	r4,1196(sp)
10002ed0:	112fc83a 	sub	r23,r2,r4
10002ed4:	05c02a0e 	bge	zero,r23,10002f80 <___vfprintf_internal_r+0xb8c>
10002ed8:	07000404 	movi	fp,16
10002edc:	05040074 	movhi	r20,4097
10002ee0:	a53a4784 	addi	r20,r20,-5858
10002ee4:	e5c01d0e 	bge	fp,r23,10002f5c <___vfprintf_internal_r+0xb68>
10002ee8:	dc812a15 	stw	r18,1192(sp)
10002eec:	058001c4 	movi	r22,7
10002ef0:	a025883a 	mov	r18,r20
10002ef4:	8029883a 	mov	r20,r16
10002ef8:	dc012917 	ldw	r16,1188(sp)
10002efc:	00000306 	br	10002f0c <___vfprintf_internal_r+0xb18>
10002f00:	bdfffc04 	addi	r23,r23,-16
10002f04:	4a400204 	addi	r9,r9,8
10002f08:	e5c0110e 	bge	fp,r23,10002f50 <___vfprintf_internal_r+0xb5c>
10002f0c:	4c800015 	stw	r18,0(r9)
10002f10:	4f000115 	stw	fp,4(r9)
10002f14:	42000404 	addi	r8,r8,16
10002f18:	18c00044 	addi	r3,r3,1
10002f1c:	da011d15 	stw	r8,1140(sp)
10002f20:	d8c11c15 	stw	r3,1136(sp)
10002f24:	b0fff60e 	bge	r22,r3,10002f00 <__alt_data_end+0xf8002f00>
10002f28:	8809883a 	mov	r4,r17
10002f2c:	800b883a 	mov	r5,r16
10002f30:	d9811b04 	addi	r6,sp,1132
10002f34:	00023c00 	call	100023c0 <__sprint_r>
10002f38:	103e741e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10002f3c:	bdfffc04 	addi	r23,r23,-16
10002f40:	da011d17 	ldw	r8,1140(sp)
10002f44:	d8c11c17 	ldw	r3,1136(sp)
10002f48:	da400404 	addi	r9,sp,16
10002f4c:	e5ffef16 	blt	fp,r23,10002f0c <__alt_data_end+0xf8002f0c>
10002f50:	a021883a 	mov	r16,r20
10002f54:	9029883a 	mov	r20,r18
10002f58:	dc812a17 	ldw	r18,1192(sp)
10002f5c:	4d000015 	stw	r20,0(r9)
10002f60:	4dc00115 	stw	r23,4(r9)
10002f64:	45d1883a 	add	r8,r8,r23
10002f68:	18c00044 	addi	r3,r3,1
10002f6c:	da011d15 	stw	r8,1140(sp)
10002f70:	d8c11c15 	stw	r3,1136(sp)
10002f74:	008001c4 	movi	r2,7
10002f78:	10c13e16 	blt	r2,r3,10003474 <___vfprintf_internal_r+0x1080>
10002f7c:	4a400204 	addi	r9,r9,8
10002f80:	8080400c 	andi	r2,r16,256
10002f84:	1000831e 	bne	r2,zero,10003194 <___vfprintf_internal_r+0xda0>
10002f88:	d8812b17 	ldw	r2,1196(sp)
10002f8c:	4cc00015 	stw	r19,0(r9)
10002f90:	48800115 	stw	r2,4(r9)
10002f94:	4091883a 	add	r8,r8,r2
10002f98:	18c00044 	addi	r3,r3,1
10002f9c:	da011d15 	stw	r8,1140(sp)
10002fa0:	d8c11c15 	stw	r3,1136(sp)
10002fa4:	008001c4 	movi	r2,7
10002fa8:	10c05316 	blt	r2,r3,100030f8 <___vfprintf_internal_r+0xd04>
10002fac:	4a400204 	addi	r9,r9,8
10002fb0:	8400010c 	andi	r16,r16,4
10002fb4:	80002e26 	beq	r16,zero,10003070 <___vfprintf_internal_r+0xc7c>
10002fb8:	d8812e17 	ldw	r2,1208(sp)
10002fbc:	d8c12817 	ldw	r3,1184(sp)
10002fc0:	10e1c83a 	sub	r16,r2,r3
10002fc4:	04002a0e 	bge	zero,r16,10003070 <___vfprintf_internal_r+0xc7c>
10002fc8:	04800404 	movi	r18,16
10002fcc:	d8c11c17 	ldw	r3,1136(sp)
10002fd0:	05c40074 	movhi	r23,4097
10002fd4:	bdfa4384 	addi	r23,r23,-5874
10002fd8:	9400170e 	bge	r18,r16,10003038 <___vfprintf_internal_r+0xc44>
10002fdc:	04c001c4 	movi	r19,7
10002fe0:	dd012917 	ldw	r20,1188(sp)
10002fe4:	00000306 	br	10002ff4 <___vfprintf_internal_r+0xc00>
10002fe8:	843ffc04 	addi	r16,r16,-16
10002fec:	4a400204 	addi	r9,r9,8
10002ff0:	9400110e 	bge	r18,r16,10003038 <___vfprintf_internal_r+0xc44>
10002ff4:	4dc00015 	stw	r23,0(r9)
10002ff8:	4c800115 	stw	r18,4(r9)
10002ffc:	42000404 	addi	r8,r8,16
10003000:	18c00044 	addi	r3,r3,1
10003004:	da011d15 	stw	r8,1140(sp)
10003008:	d8c11c15 	stw	r3,1136(sp)
1000300c:	98fff60e 	bge	r19,r3,10002fe8 <__alt_data_end+0xf8002fe8>
10003010:	8809883a 	mov	r4,r17
10003014:	a00b883a 	mov	r5,r20
10003018:	d9811b04 	addi	r6,sp,1132
1000301c:	00023c00 	call	100023c0 <__sprint_r>
10003020:	103e3a1e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003024:	843ffc04 	addi	r16,r16,-16
10003028:	da011d17 	ldw	r8,1140(sp)
1000302c:	d8c11c17 	ldw	r3,1136(sp)
10003030:	da400404 	addi	r9,sp,16
10003034:	943fef16 	blt	r18,r16,10002ff4 <__alt_data_end+0xf8002ff4>
10003038:	4dc00015 	stw	r23,0(r9)
1000303c:	4c000115 	stw	r16,4(r9)
10003040:	8211883a 	add	r8,r16,r8
10003044:	18c00044 	addi	r3,r3,1
10003048:	da011d15 	stw	r8,1140(sp)
1000304c:	d8c11c15 	stw	r3,1136(sp)
10003050:	008001c4 	movi	r2,7
10003054:	10c0060e 	bge	r2,r3,10003070 <___vfprintf_internal_r+0xc7c>
10003058:	d9412917 	ldw	r5,1188(sp)
1000305c:	8809883a 	mov	r4,r17
10003060:	d9811b04 	addi	r6,sp,1132
10003064:	00023c00 	call	100023c0 <__sprint_r>
10003068:	103e281e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
1000306c:	da011d17 	ldw	r8,1140(sp)
10003070:	dd012817 	ldw	r20,1184(sp)
10003074:	d9012e17 	ldw	r4,1208(sp)
10003078:	a100010e 	bge	r20,r4,10003080 <___vfprintf_internal_r+0xc8c>
1000307c:	2029883a 	mov	r20,r4
10003080:	d8812c17 	ldw	r2,1200(sp)
10003084:	1505883a 	add	r2,r2,r20
10003088:	d8812c15 	stw	r2,1200(sp)
1000308c:	4000b91e 	bne	r8,zero,10003374 <___vfprintf_internal_r+0xf80>
10003090:	d8011c15 	stw	zero,1136(sp)
10003094:	a8800007 	ldb	r2,0(r21)
10003098:	da400404 	addi	r9,sp,16
1000309c:	103d0d1e 	bne	r2,zero,100024d4 <__alt_data_end+0xf80024d4>
100030a0:	a825883a 	mov	r18,r21
100030a4:	003d2306 	br	10002534 <__alt_data_end+0xf8002534>
100030a8:	d9412917 	ldw	r5,1188(sp)
100030ac:	8809883a 	mov	r4,r17
100030b0:	d9811b04 	addi	r6,sp,1132
100030b4:	00023c00 	call	100023c0 <__sprint_r>
100030b8:	103e141e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
100030bc:	da011d17 	ldw	r8,1140(sp)
100030c0:	da400404 	addi	r9,sp,16
100030c4:	8080004c 	andi	r2,r16,1
100030c8:	103fb926 	beq	r2,zero,10002fb0 <__alt_data_end+0xf8002fb0>
100030cc:	d8c11c17 	ldw	r3,1136(sp)
100030d0:	d9013717 	ldw	r4,1244(sp)
100030d4:	00800044 	movi	r2,1
100030d8:	48800115 	stw	r2,4(r9)
100030dc:	49000015 	stw	r4,0(r9)
100030e0:	4091883a 	add	r8,r8,r2
100030e4:	1887883a 	add	r3,r3,r2
100030e8:	da011d15 	stw	r8,1140(sp)
100030ec:	d8c11c15 	stw	r3,1136(sp)
100030f0:	008001c4 	movi	r2,7
100030f4:	10ffad0e 	bge	r2,r3,10002fac <__alt_data_end+0xf8002fac>
100030f8:	d9412917 	ldw	r5,1188(sp)
100030fc:	8809883a 	mov	r4,r17
10003100:	d9811b04 	addi	r6,sp,1132
10003104:	00023c00 	call	100023c0 <__sprint_r>
10003108:	103e001e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
1000310c:	da400404 	addi	r9,sp,16
10003110:	da011d17 	ldw	r8,1140(sp)
10003114:	003fa606 	br	10002fb0 <__alt_data_end+0xf8002fb0>
10003118:	18803fcc 	andi	r2,r3,255
1000311c:	00c00044 	movi	r3,1
10003120:	10c10126 	beq	r2,r3,10003528 <___vfprintf_internal_r+0x1134>
10003124:	00c00084 	movi	r3,2
10003128:	10c0ed26 	beq	r2,r3,100034e0 <___vfprintf_internal_r+0x10ec>
1000312c:	d8c10dc4 	addi	r3,sp,1079
10003130:	b808d0fa 	srli	r4,r23,3
10003134:	b00a977a 	slli	r5,r22,29
10003138:	b02cd0fa 	srli	r22,r22,3
1000313c:	bdc001cc 	andi	r23,r23,7
10003140:	b8800c04 	addi	r2,r23,48
10003144:	292eb03a 	or	r23,r5,r4
10003148:	18800005 	stb	r2,0(r3)
1000314c:	bd88b03a 	or	r4,r23,r22
10003150:	1827883a 	mov	r19,r3
10003154:	18ffffc4 	addi	r3,r3,-1
10003158:	203ff51e 	bne	r4,zero,10003130 <__alt_data_end+0xf8003130>
1000315c:	8100004c 	andi	r4,r16,1
10003160:	980b883a 	mov	r5,r19
10003164:	20000726 	beq	r4,zero,10003184 <___vfprintf_internal_r+0xd90>
10003168:	10803fcc 	andi	r2,r2,255
1000316c:	1080201c 	xori	r2,r2,128
10003170:	10bfe004 	addi	r2,r2,-128
10003174:	01000c04 	movi	r4,48
10003178:	11000226 	beq	r2,r4,10003184 <___vfprintf_internal_r+0xd90>
1000317c:	1827883a 	mov	r19,r3
10003180:	293fffc5 	stb	r4,-1(r5)
10003184:	d8812717 	ldw	r2,1180(sp)
10003188:	14c5c83a 	sub	r2,r2,r19
1000318c:	d8812b15 	stw	r2,1196(sp)
10003190:	003e1f06 	br	10002a10 <__alt_data_end+0xf8002a10>
10003194:	00801944 	movi	r2,101
10003198:	14807c0e 	bge	r2,r18,1000338c <___vfprintf_internal_r+0xf98>
1000319c:	d9013317 	ldw	r4,1228(sp)
100031a0:	d9413417 	ldw	r5,1232(sp)
100031a4:	000d883a 	mov	r6,zero
100031a8:	000f883a 	mov	r7,zero
100031ac:	d8c13b15 	stw	r3,1260(sp)
100031b0:	da013a15 	stw	r8,1256(sp)
100031b4:	da413c15 	stw	r9,1264(sp)
100031b8:	000ad580 	call	1000ad58 <__nedf2>
100031bc:	d8c13b17 	ldw	r3,1260(sp)
100031c0:	da013a17 	ldw	r8,1256(sp)
100031c4:	da413c17 	ldw	r9,1264(sp)
100031c8:	1001001e 	bne	r2,zero,100035cc <___vfprintf_internal_r+0x11d8>
100031cc:	00840074 	movhi	r2,4097
100031d0:	10ba4304 	addi	r2,r2,-5876
100031d4:	48800015 	stw	r2,0(r9)
100031d8:	00800044 	movi	r2,1
100031dc:	48800115 	stw	r2,4(r9)
100031e0:	4091883a 	add	r8,r8,r2
100031e4:	1887883a 	add	r3,r3,r2
100031e8:	da011d15 	stw	r8,1140(sp)
100031ec:	d8c11c15 	stw	r3,1136(sp)
100031f0:	008001c4 	movi	r2,7
100031f4:	10c20316 	blt	r2,r3,10003a04 <___vfprintf_internal_r+0x1610>
100031f8:	4a400204 	addi	r9,r9,8
100031fc:	d8812417 	ldw	r2,1168(sp)
10003200:	d8c13217 	ldw	r3,1224(sp)
10003204:	10c00216 	blt	r2,r3,10003210 <___vfprintf_internal_r+0xe1c>
10003208:	8080004c 	andi	r2,r16,1
1000320c:	103f6826 	beq	r2,zero,10002fb0 <__alt_data_end+0xf8002fb0>
10003210:	d8c11c17 	ldw	r3,1136(sp)
10003214:	d9013717 	ldw	r4,1244(sp)
10003218:	00800044 	movi	r2,1
1000321c:	48800115 	stw	r2,4(r9)
10003220:	49000015 	stw	r4,0(r9)
10003224:	4091883a 	add	r8,r8,r2
10003228:	1887883a 	add	r3,r3,r2
1000322c:	da011d15 	stw	r8,1140(sp)
10003230:	d8c11c15 	stw	r3,1136(sp)
10003234:	008001c4 	movi	r2,7
10003238:	10c2ce16 	blt	r2,r3,10003d74 <___vfprintf_internal_r+0x1980>
1000323c:	4a400204 	addi	r9,r9,8
10003240:	d8813217 	ldw	r2,1224(sp)
10003244:	14bfffc4 	addi	r18,r2,-1
10003248:	04bf590e 	bge	zero,r18,10002fb0 <__alt_data_end+0xf8002fb0>
1000324c:	04c00404 	movi	r19,16
10003250:	d8c11c17 	ldw	r3,1136(sp)
10003254:	05040074 	movhi	r20,4097
10003258:	a53a4784 	addi	r20,r20,-5858
1000325c:	9c818a0e 	bge	r19,r18,10003888 <___vfprintf_internal_r+0x1494>
10003260:	058001c4 	movi	r22,7
10003264:	ddc12917 	ldw	r23,1188(sp)
10003268:	00000306 	br	10003278 <___vfprintf_internal_r+0xe84>
1000326c:	4a400204 	addi	r9,r9,8
10003270:	94bffc04 	addi	r18,r18,-16
10003274:	9c81840e 	bge	r19,r18,10003888 <___vfprintf_internal_r+0x1494>
10003278:	4d000015 	stw	r20,0(r9)
1000327c:	4cc00115 	stw	r19,4(r9)
10003280:	42000404 	addi	r8,r8,16
10003284:	18c00044 	addi	r3,r3,1
10003288:	da011d15 	stw	r8,1140(sp)
1000328c:	d8c11c15 	stw	r3,1136(sp)
10003290:	b0fff60e 	bge	r22,r3,1000326c <__alt_data_end+0xf800326c>
10003294:	8809883a 	mov	r4,r17
10003298:	b80b883a 	mov	r5,r23
1000329c:	d9811b04 	addi	r6,sp,1132
100032a0:	00023c00 	call	100023c0 <__sprint_r>
100032a4:	103d991e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
100032a8:	da011d17 	ldw	r8,1140(sp)
100032ac:	d8c11c17 	ldw	r3,1136(sp)
100032b0:	da400404 	addi	r9,sp,16
100032b4:	003fee06 	br	10003270 <__alt_data_end+0xf8003270>
100032b8:	d8812e17 	ldw	r2,1208(sp)
100032bc:	d9012817 	ldw	r4,1184(sp)
100032c0:	112fc83a 	sub	r23,r2,r4
100032c4:	05ff000e 	bge	zero,r23,10002ec8 <__alt_data_end+0xf8002ec8>
100032c8:	07000404 	movi	fp,16
100032cc:	05040074 	movhi	r20,4097
100032d0:	a53a4784 	addi	r20,r20,-5858
100032d4:	e5c01d0e 	bge	fp,r23,1000334c <___vfprintf_internal_r+0xf58>
100032d8:	dc812a15 	stw	r18,1192(sp)
100032dc:	058001c4 	movi	r22,7
100032e0:	a025883a 	mov	r18,r20
100032e4:	8029883a 	mov	r20,r16
100032e8:	dc012917 	ldw	r16,1188(sp)
100032ec:	00000306 	br	100032fc <___vfprintf_internal_r+0xf08>
100032f0:	bdfffc04 	addi	r23,r23,-16
100032f4:	4a400204 	addi	r9,r9,8
100032f8:	e5c0110e 	bge	fp,r23,10003340 <___vfprintf_internal_r+0xf4c>
100032fc:	4c800015 	stw	r18,0(r9)
10003300:	4f000115 	stw	fp,4(r9)
10003304:	42000404 	addi	r8,r8,16
10003308:	18c00044 	addi	r3,r3,1
1000330c:	da011d15 	stw	r8,1140(sp)
10003310:	d8c11c15 	stw	r3,1136(sp)
10003314:	b0fff60e 	bge	r22,r3,100032f0 <__alt_data_end+0xf80032f0>
10003318:	8809883a 	mov	r4,r17
1000331c:	800b883a 	mov	r5,r16
10003320:	d9811b04 	addi	r6,sp,1132
10003324:	00023c00 	call	100023c0 <__sprint_r>
10003328:	103d781e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
1000332c:	bdfffc04 	addi	r23,r23,-16
10003330:	da011d17 	ldw	r8,1140(sp)
10003334:	d8c11c17 	ldw	r3,1136(sp)
10003338:	da400404 	addi	r9,sp,16
1000333c:	e5ffef16 	blt	fp,r23,100032fc <__alt_data_end+0xf80032fc>
10003340:	a021883a 	mov	r16,r20
10003344:	9029883a 	mov	r20,r18
10003348:	dc812a17 	ldw	r18,1192(sp)
1000334c:	4d000015 	stw	r20,0(r9)
10003350:	4dc00115 	stw	r23,4(r9)
10003354:	45d1883a 	add	r8,r8,r23
10003358:	18c00044 	addi	r3,r3,1
1000335c:	da011d15 	stw	r8,1140(sp)
10003360:	d8c11c15 	stw	r3,1136(sp)
10003364:	008001c4 	movi	r2,7
10003368:	10c13616 	blt	r2,r3,10003844 <___vfprintf_internal_r+0x1450>
1000336c:	4a400204 	addi	r9,r9,8
10003370:	003ed506 	br	10002ec8 <__alt_data_end+0xf8002ec8>
10003374:	d9412917 	ldw	r5,1188(sp)
10003378:	8809883a 	mov	r4,r17
1000337c:	d9811b04 	addi	r6,sp,1132
10003380:	00023c00 	call	100023c0 <__sprint_r>
10003384:	103f4226 	beq	r2,zero,10003090 <__alt_data_end+0xf8003090>
10003388:	003d6006 	br	1000290c <__alt_data_end+0xf800290c>
1000338c:	d9013217 	ldw	r4,1224(sp)
10003390:	00800044 	movi	r2,1
10003394:	4cc00015 	stw	r19,0(r9)
10003398:	1101000e 	bge	r2,r4,1000379c <___vfprintf_internal_r+0x13a8>
1000339c:	00800044 	movi	r2,1
100033a0:	48800115 	stw	r2,4(r9)
100033a4:	4091883a 	add	r8,r8,r2
100033a8:	1887883a 	add	r3,r3,r2
100033ac:	da011d15 	stw	r8,1140(sp)
100033b0:	d8c11c15 	stw	r3,1136(sp)
100033b4:	008001c4 	movi	r2,7
100033b8:	10c10c16 	blt	r2,r3,100037ec <___vfprintf_internal_r+0x13f8>
100033bc:	4a400204 	addi	r9,r9,8
100033c0:	d8813717 	ldw	r2,1244(sp)
100033c4:	48800015 	stw	r2,0(r9)
100033c8:	00800044 	movi	r2,1
100033cc:	48800115 	stw	r2,4(r9)
100033d0:	4091883a 	add	r8,r8,r2
100033d4:	1887883a 	add	r3,r3,r2
100033d8:	da011d15 	stw	r8,1140(sp)
100033dc:	d8c11c15 	stw	r3,1136(sp)
100033e0:	008001c4 	movi	r2,7
100033e4:	10c10a16 	blt	r2,r3,10003810 <___vfprintf_internal_r+0x141c>
100033e8:	4c800204 	addi	r18,r9,8
100033ec:	d9013317 	ldw	r4,1228(sp)
100033f0:	d9413417 	ldw	r5,1232(sp)
100033f4:	000d883a 	mov	r6,zero
100033f8:	000f883a 	mov	r7,zero
100033fc:	d8c13b15 	stw	r3,1260(sp)
10003400:	da013a15 	stw	r8,1256(sp)
10003404:	000acfc0 	call	1000acfc <__eqdf2>
10003408:	d8c13b17 	ldw	r3,1260(sp)
1000340c:	da013a17 	ldw	r8,1256(sp)
10003410:	1000ba26 	beq	r2,zero,100036fc <___vfprintf_internal_r+0x1308>
10003414:	d9013217 	ldw	r4,1224(sp)
10003418:	9cc00044 	addi	r19,r19,1
1000341c:	94c00015 	stw	r19,0(r18)
10003420:	20bfffc4 	addi	r2,r4,-1
10003424:	90800115 	stw	r2,4(r18)
10003428:	4091883a 	add	r8,r8,r2
1000342c:	18c00044 	addi	r3,r3,1
10003430:	da011d15 	stw	r8,1140(sp)
10003434:	d8c11c15 	stw	r3,1136(sp)
10003438:	008001c4 	movi	r2,7
1000343c:	10c0e216 	blt	r2,r3,100037c8 <___vfprintf_internal_r+0x13d4>
10003440:	94800204 	addi	r18,r18,8
10003444:	d9013517 	ldw	r4,1236(sp)
10003448:	d8811fc4 	addi	r2,sp,1151
1000344c:	90800015 	stw	r2,0(r18)
10003450:	91000115 	stw	r4,4(r18)
10003454:	4111883a 	add	r8,r8,r4
10003458:	18c00044 	addi	r3,r3,1
1000345c:	da011d15 	stw	r8,1140(sp)
10003460:	d8c11c15 	stw	r3,1136(sp)
10003464:	008001c4 	movi	r2,7
10003468:	10ff2316 	blt	r2,r3,100030f8 <__alt_data_end+0xf80030f8>
1000346c:	92400204 	addi	r9,r18,8
10003470:	003ecf06 	br	10002fb0 <__alt_data_end+0xf8002fb0>
10003474:	d9412917 	ldw	r5,1188(sp)
10003478:	8809883a 	mov	r4,r17
1000347c:	d9811b04 	addi	r6,sp,1132
10003480:	00023c00 	call	100023c0 <__sprint_r>
10003484:	103d211e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003488:	da011d17 	ldw	r8,1140(sp)
1000348c:	d8c11c17 	ldw	r3,1136(sp)
10003490:	da400404 	addi	r9,sp,16
10003494:	003eba06 	br	10002f80 <__alt_data_end+0xf8002f80>
10003498:	d9412917 	ldw	r5,1188(sp)
1000349c:	8809883a 	mov	r4,r17
100034a0:	d9811b04 	addi	r6,sp,1132
100034a4:	00023c00 	call	100023c0 <__sprint_r>
100034a8:	103d181e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
100034ac:	da011d17 	ldw	r8,1140(sp)
100034b0:	d8c11c17 	ldw	r3,1136(sp)
100034b4:	da400404 	addi	r9,sp,16
100034b8:	003e8006 	br	10002ebc <__alt_data_end+0xf8002ebc>
100034bc:	d9412917 	ldw	r5,1188(sp)
100034c0:	8809883a 	mov	r4,r17
100034c4:	d9811b04 	addi	r6,sp,1132
100034c8:	00023c00 	call	100023c0 <__sprint_r>
100034cc:	103d0f1e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
100034d0:	da011d17 	ldw	r8,1140(sp)
100034d4:	d8c11c17 	ldw	r3,1136(sp)
100034d8:	da400404 	addi	r9,sp,16
100034dc:	003e6a06 	br	10002e88 <__alt_data_end+0xf8002e88>
100034e0:	d9413617 	ldw	r5,1240(sp)
100034e4:	d8810dc4 	addi	r2,sp,1079
100034e8:	b8c003cc 	andi	r3,r23,15
100034ec:	b008973a 	slli	r4,r22,28
100034f0:	28c7883a 	add	r3,r5,r3
100034f4:	b82ed13a 	srli	r23,r23,4
100034f8:	18c00003 	ldbu	r3,0(r3)
100034fc:	b02cd13a 	srli	r22,r22,4
10003500:	25eeb03a 	or	r23,r4,r23
10003504:	10c00005 	stb	r3,0(r2)
10003508:	bd86b03a 	or	r3,r23,r22
1000350c:	1027883a 	mov	r19,r2
10003510:	10bfffc4 	addi	r2,r2,-1
10003514:	183ff41e 	bne	r3,zero,100034e8 <__alt_data_end+0xf80034e8>
10003518:	003f1a06 	br	10003184 <__alt_data_end+0xf8003184>
1000351c:	d8012b15 	stw	zero,1196(sp)
10003520:	dcc10e04 	addi	r19,sp,1080
10003524:	003d3a06 	br	10002a10 <__alt_data_end+0xf8002a10>
10003528:	b0025426 	beq	r22,zero,10003e7c <___vfprintf_internal_r+0x1a88>
1000352c:	b807883a 	mov	r3,r23
10003530:	d8810dc4 	addi	r2,sp,1079
10003534:	882f883a 	mov	r23,r17
10003538:	04c00244 	movi	r19,9
1000353c:	8023883a 	mov	r17,r16
10003540:	da412815 	stw	r9,1184(sp)
10003544:	1821883a 	mov	r16,r3
10003548:	8009883a 	mov	r4,r16
1000354c:	b00b883a 	mov	r5,r22
10003550:	01800284 	movi	r6,10
10003554:	000f883a 	mov	r7,zero
10003558:	1029883a 	mov	r20,r2
1000355c:	0009e340 	call	10009e34 <__umoddi3>
10003560:	10800c04 	addi	r2,r2,48
10003564:	8009883a 	mov	r4,r16
10003568:	b00b883a 	mov	r5,r22
1000356c:	a0800005 	stb	r2,0(r20)
10003570:	01800284 	movi	r6,10
10003574:	000f883a 	mov	r7,zero
10003578:	00097e40 	call	100097e4 <__udivdi3>
1000357c:	1021883a 	mov	r16,r2
10003580:	182d883a 	mov	r22,r3
10003584:	a0bfffc4 	addi	r2,r20,-1
10003588:	183fef1e 	bne	r3,zero,10003548 <__alt_data_end+0xf8003548>
1000358c:	9c3fee36 	bltu	r19,r16,10003548 <__alt_data_end+0xf8003548>
10003590:	da412817 	ldw	r9,1184(sp)
10003594:	8005883a 	mov	r2,r16
10003598:	8821883a 	mov	r16,r17
1000359c:	b823883a 	mov	r17,r23
100035a0:	102f883a 	mov	r23,r2
100035a4:	d8812717 	ldw	r2,1180(sp)
100035a8:	a4ffffc4 	addi	r19,r20,-1
100035ac:	bdc00c04 	addi	r23,r23,48
100035b0:	14c5c83a 	sub	r2,r2,r19
100035b4:	a5ffffc5 	stb	r23,-1(r20)
100035b8:	d8812b15 	stw	r2,1196(sp)
100035bc:	003d1406 	br	10002a10 <__alt_data_end+0xf8002a10>
100035c0:	00c00044 	movi	r3,1
100035c4:	bd84b03a 	or	r2,r23,r22
100035c8:	003d0306 	br	100029d8 <__alt_data_end+0xf80029d8>
100035cc:	dc812417 	ldw	r18,1168(sp)
100035d0:	0481140e 	bge	zero,r18,10003a24 <___vfprintf_internal_r+0x1630>
100035d4:	d9013217 	ldw	r4,1224(sp)
100035d8:	4cc00015 	stw	r19,0(r9)
100035dc:	9100ec16 	blt	r18,r4,10003990 <___vfprintf_internal_r+0x159c>
100035e0:	49000115 	stw	r4,4(r9)
100035e4:	4111883a 	add	r8,r8,r4
100035e8:	18c00044 	addi	r3,r3,1
100035ec:	da011d15 	stw	r8,1140(sp)
100035f0:	d8c11c15 	stw	r3,1136(sp)
100035f4:	008001c4 	movi	r2,7
100035f8:	10c23616 	blt	r2,r3,10003ed4 <___vfprintf_internal_r+0x1ae0>
100035fc:	4a400204 	addi	r9,r9,8
10003600:	d8813217 	ldw	r2,1224(sp)
10003604:	90a5c83a 	sub	r18,r18,r2
10003608:	04beae0e 	bge	zero,r18,100030c4 <__alt_data_end+0xf80030c4>
1000360c:	04c00404 	movi	r19,16
10003610:	d8c11c17 	ldw	r3,1136(sp)
10003614:	05040074 	movhi	r20,4097
10003618:	a53a4784 	addi	r20,r20,-5858
1000361c:	9c81dd0e 	bge	r19,r18,10003d94 <___vfprintf_internal_r+0x19a0>
10003620:	058001c4 	movi	r22,7
10003624:	ddc12917 	ldw	r23,1188(sp)
10003628:	00000306 	br	10003638 <___vfprintf_internal_r+0x1244>
1000362c:	4a400204 	addi	r9,r9,8
10003630:	94bffc04 	addi	r18,r18,-16
10003634:	9c81d70e 	bge	r19,r18,10003d94 <___vfprintf_internal_r+0x19a0>
10003638:	4d000015 	stw	r20,0(r9)
1000363c:	4cc00115 	stw	r19,4(r9)
10003640:	42000404 	addi	r8,r8,16
10003644:	18c00044 	addi	r3,r3,1
10003648:	da011d15 	stw	r8,1140(sp)
1000364c:	d8c11c15 	stw	r3,1136(sp)
10003650:	b0fff60e 	bge	r22,r3,1000362c <__alt_data_end+0xf800362c>
10003654:	8809883a 	mov	r4,r17
10003658:	b80b883a 	mov	r5,r23
1000365c:	d9811b04 	addi	r6,sp,1132
10003660:	00023c00 	call	100023c0 <__sprint_r>
10003664:	103ca91e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003668:	da011d17 	ldw	r8,1140(sp)
1000366c:	d8c11c17 	ldw	r3,1136(sp)
10003670:	da400404 	addi	r9,sp,16
10003674:	003fee06 	br	10003630 <__alt_data_end+0xf8003630>
10003678:	d9412917 	ldw	r5,1188(sp)
1000367c:	8809883a 	mov	r4,r17
10003680:	d9811b04 	addi	r6,sp,1132
10003684:	00023c00 	call	100023c0 <__sprint_r>
10003688:	103ca01e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
1000368c:	da011d17 	ldw	r8,1140(sp)
10003690:	d8c11c17 	ldw	r3,1136(sp)
10003694:	da400404 	addi	r9,sp,16
10003698:	003dee06 	br	10002e54 <__alt_data_end+0xf8002e54>
1000369c:	00c00084 	movi	r3,2
100036a0:	bd84b03a 	or	r2,r23,r22
100036a4:	d8012585 	stb	zero,1174(sp)
100036a8:	003ccb06 	br	100029d8 <__alt_data_end+0xf80029d8>
100036ac:	8080040c 	andi	r2,r16,16
100036b0:	1000ae26 	beq	r2,zero,1000396c <___vfprintf_internal_r+0x1578>
100036b4:	d9012d17 	ldw	r4,1204(sp)
100036b8:	25c00017 	ldw	r23,0(r4)
100036bc:	21000104 	addi	r4,r4,4
100036c0:	d9012d15 	stw	r4,1204(sp)
100036c4:	b82dd7fa 	srai	r22,r23,31
100036c8:	b005883a 	mov	r2,r22
100036cc:	003cb906 	br	100029b4 <__alt_data_end+0xf80029b4>
100036d0:	8080040c 	andi	r2,r16,16
100036d4:	10007026 	beq	r2,zero,10003898 <___vfprintf_internal_r+0x14a4>
100036d8:	d8812d17 	ldw	r2,1204(sp)
100036dc:	002d883a 	mov	r22,zero
100036e0:	00c00044 	movi	r3,1
100036e4:	15c00017 	ldw	r23,0(r2)
100036e8:	10800104 	addi	r2,r2,4
100036ec:	d8812d15 	stw	r2,1204(sp)
100036f0:	d8012585 	stb	zero,1174(sp)
100036f4:	b805883a 	mov	r2,r23
100036f8:	003cb706 	br	100029d8 <__alt_data_end+0xf80029d8>
100036fc:	d8813217 	ldw	r2,1224(sp)
10003700:	14ffffc4 	addi	r19,r2,-1
10003704:	04ff4f0e 	bge	zero,r19,10003444 <__alt_data_end+0xf8003444>
10003708:	05800404 	movi	r22,16
1000370c:	05040074 	movhi	r20,4097
10003710:	a53a4784 	addi	r20,r20,-5858
10003714:	b4c0470e 	bge	r22,r19,10003834 <___vfprintf_internal_r+0x1440>
10003718:	05c001c4 	movi	r23,7
1000371c:	df012917 	ldw	fp,1188(sp)
10003720:	00000306 	br	10003730 <___vfprintf_internal_r+0x133c>
10003724:	94800204 	addi	r18,r18,8
10003728:	9cfffc04 	addi	r19,r19,-16
1000372c:	b4c0410e 	bge	r22,r19,10003834 <___vfprintf_internal_r+0x1440>
10003730:	95000015 	stw	r20,0(r18)
10003734:	95800115 	stw	r22,4(r18)
10003738:	42000404 	addi	r8,r8,16
1000373c:	18c00044 	addi	r3,r3,1
10003740:	da011d15 	stw	r8,1140(sp)
10003744:	d8c11c15 	stw	r3,1136(sp)
10003748:	b8fff60e 	bge	r23,r3,10003724 <__alt_data_end+0xf8003724>
1000374c:	8809883a 	mov	r4,r17
10003750:	e00b883a 	mov	r5,fp
10003754:	d9811b04 	addi	r6,sp,1132
10003758:	00023c00 	call	100023c0 <__sprint_r>
1000375c:	103c6b1e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003760:	da011d17 	ldw	r8,1140(sp)
10003764:	d8c11c17 	ldw	r3,1136(sp)
10003768:	dc800404 	addi	r18,sp,16
1000376c:	003fee06 	br	10003728 <__alt_data_end+0xf8003728>
10003770:	8080040c 	andi	r2,r16,16
10003774:	10005326 	beq	r2,zero,100038c4 <___vfprintf_internal_r+0x14d0>
10003778:	d8c12d17 	ldw	r3,1204(sp)
1000377c:	002d883a 	mov	r22,zero
10003780:	1dc00017 	ldw	r23,0(r3)
10003784:	18c00104 	addi	r3,r3,4
10003788:	d8c12d15 	stw	r3,1204(sp)
1000378c:	b805883a 	mov	r2,r23
10003790:	0007883a 	mov	r3,zero
10003794:	d8012585 	stb	zero,1174(sp)
10003798:	003c8f06 	br	100029d8 <__alt_data_end+0xf80029d8>
1000379c:	8088703a 	and	r4,r16,r2
100037a0:	203efe1e 	bne	r4,zero,1000339c <__alt_data_end+0xf800339c>
100037a4:	48800115 	stw	r2,4(r9)
100037a8:	42000044 	addi	r8,r8,1
100037ac:	18c00044 	addi	r3,r3,1
100037b0:	da011d15 	stw	r8,1140(sp)
100037b4:	d8c11c15 	stw	r3,1136(sp)
100037b8:	008001c4 	movi	r2,7
100037bc:	10c00216 	blt	r2,r3,100037c8 <___vfprintf_internal_r+0x13d4>
100037c0:	4c800204 	addi	r18,r9,8
100037c4:	003f1f06 	br	10003444 <__alt_data_end+0xf8003444>
100037c8:	d9412917 	ldw	r5,1188(sp)
100037cc:	8809883a 	mov	r4,r17
100037d0:	d9811b04 	addi	r6,sp,1132
100037d4:	00023c00 	call	100023c0 <__sprint_r>
100037d8:	103c4c1e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
100037dc:	dc800404 	addi	r18,sp,16
100037e0:	da011d17 	ldw	r8,1140(sp)
100037e4:	d8c11c17 	ldw	r3,1136(sp)
100037e8:	003f1606 	br	10003444 <__alt_data_end+0xf8003444>
100037ec:	d9412917 	ldw	r5,1188(sp)
100037f0:	8809883a 	mov	r4,r17
100037f4:	d9811b04 	addi	r6,sp,1132
100037f8:	00023c00 	call	100023c0 <__sprint_r>
100037fc:	103c431e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003800:	da011d17 	ldw	r8,1140(sp)
10003804:	d8c11c17 	ldw	r3,1136(sp)
10003808:	da400404 	addi	r9,sp,16
1000380c:	003eec06 	br	100033c0 <__alt_data_end+0xf80033c0>
10003810:	d9412917 	ldw	r5,1188(sp)
10003814:	8809883a 	mov	r4,r17
10003818:	d9811b04 	addi	r6,sp,1132
1000381c:	00023c00 	call	100023c0 <__sprint_r>
10003820:	103c3a1e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003824:	da011d17 	ldw	r8,1140(sp)
10003828:	d8c11c17 	ldw	r3,1136(sp)
1000382c:	dc800404 	addi	r18,sp,16
10003830:	003eee06 	br	100033ec <__alt_data_end+0xf80033ec>
10003834:	95000015 	stw	r20,0(r18)
10003838:	94c00115 	stw	r19,4(r18)
1000383c:	44d1883a 	add	r8,r8,r19
10003840:	003efa06 	br	1000342c <__alt_data_end+0xf800342c>
10003844:	d9412917 	ldw	r5,1188(sp)
10003848:	8809883a 	mov	r4,r17
1000384c:	d9811b04 	addi	r6,sp,1132
10003850:	00023c00 	call	100023c0 <__sprint_r>
10003854:	103c2d1e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003858:	da011d17 	ldw	r8,1140(sp)
1000385c:	d8c11c17 	ldw	r3,1136(sp)
10003860:	da400404 	addi	r9,sp,16
10003864:	003d9806 	br	10002ec8 <__alt_data_end+0xf8002ec8>
10003868:	8080100c 	andi	r2,r16,64
1000386c:	10011626 	beq	r2,zero,10003cc8 <___vfprintf_internal_r+0x18d4>
10003870:	d8c12d17 	ldw	r3,1204(sp)
10003874:	002d883a 	mov	r22,zero
10003878:	1dc0000b 	ldhu	r23,0(r3)
1000387c:	18c00104 	addi	r3,r3,4
10003880:	d8c12d15 	stw	r3,1204(sp)
10003884:	003cc106 	br	10002b8c <__alt_data_end+0xf8002b8c>
10003888:	4d000015 	stw	r20,0(r9)
1000388c:	4c800115 	stw	r18,4(r9)
10003890:	4491883a 	add	r8,r8,r18
10003894:	003dc006 	br	10002f98 <__alt_data_end+0xf8002f98>
10003898:	8080100c 	andi	r2,r16,64
1000389c:	10010126 	beq	r2,zero,10003ca4 <___vfprintf_internal_r+0x18b0>
100038a0:	d8c12d17 	ldw	r3,1204(sp)
100038a4:	002d883a 	mov	r22,zero
100038a8:	1dc0000b 	ldhu	r23,0(r3)
100038ac:	18c00104 	addi	r3,r3,4
100038b0:	d8c12d15 	stw	r3,1204(sp)
100038b4:	b805883a 	mov	r2,r23
100038b8:	00c00044 	movi	r3,1
100038bc:	d8012585 	stb	zero,1174(sp)
100038c0:	003c4506 	br	100029d8 <__alt_data_end+0xf80029d8>
100038c4:	8080100c 	andi	r2,r16,64
100038c8:	10010526 	beq	r2,zero,10003ce0 <___vfprintf_internal_r+0x18ec>
100038cc:	d9012d17 	ldw	r4,1204(sp)
100038d0:	002d883a 	mov	r22,zero
100038d4:	0007883a 	mov	r3,zero
100038d8:	25c0000b 	ldhu	r23,0(r4)
100038dc:	21000104 	addi	r4,r4,4
100038e0:	d9012d15 	stw	r4,1204(sp)
100038e4:	b805883a 	mov	r2,r23
100038e8:	d8012585 	stb	zero,1174(sp)
100038ec:	003c3a06 	br	100029d8 <__alt_data_end+0xf80029d8>
100038f0:	d8812d17 	ldw	r2,1204(sp)
100038f4:	15800017 	ldw	r22,0(r2)
100038f8:	15000117 	ldw	r20,4(r2)
100038fc:	10800204 	addi	r2,r2,8
10003900:	d8812d15 	stw	r2,1204(sp)
10003904:	dd813315 	stw	r22,1228(sp)
10003908:	dd013415 	stw	r20,1232(sp)
1000390c:	003c5906 	br	10002a74 <__alt_data_end+0xf8002a74>
10003910:	00c00084 	movi	r3,2
10003914:	d8012585 	stb	zero,1174(sp)
10003918:	003c2f06 	br	100029d8 <__alt_data_end+0xf80029d8>
1000391c:	ac800007 	ldb	r18,0(r21)
10003920:	003b1006 	br	10002564 <__alt_data_end+0xf8002564>
10003924:	8080040c 	andi	r2,r16,16
10003928:	1000091e 	bne	r2,zero,10003950 <___vfprintf_internal_r+0x155c>
1000392c:	8400100c 	andi	r16,r16,64
10003930:	80000726 	beq	r16,zero,10003950 <___vfprintf_internal_r+0x155c>
10003934:	d8c12d17 	ldw	r3,1204(sp)
10003938:	d9012c17 	ldw	r4,1200(sp)
1000393c:	18800017 	ldw	r2,0(r3)
10003940:	18c00104 	addi	r3,r3,4
10003944:	d8c12d15 	stw	r3,1204(sp)
10003948:	1100000d 	sth	r4,0(r2)
1000394c:	003adf06 	br	100024cc <__alt_data_end+0xf80024cc>
10003950:	d8c12d17 	ldw	r3,1204(sp)
10003954:	d9012c17 	ldw	r4,1200(sp)
10003958:	18800017 	ldw	r2,0(r3)
1000395c:	18c00104 	addi	r3,r3,4
10003960:	d8c12d15 	stw	r3,1204(sp)
10003964:	11000015 	stw	r4,0(r2)
10003968:	003ad806 	br	100024cc <__alt_data_end+0xf80024cc>
1000396c:	8080100c 	andi	r2,r16,64
10003970:	1000c526 	beq	r2,zero,10003c88 <___vfprintf_internal_r+0x1894>
10003974:	d8812d17 	ldw	r2,1204(sp)
10003978:	15c0000f 	ldh	r23,0(r2)
1000397c:	10800104 	addi	r2,r2,4
10003980:	d8812d15 	stw	r2,1204(sp)
10003984:	b82dd7fa 	srai	r22,r23,31
10003988:	b005883a 	mov	r2,r22
1000398c:	003c0906 	br	100029b4 <__alt_data_end+0xf80029b4>
10003990:	4c800115 	stw	r18,4(r9)
10003994:	9211883a 	add	r8,r18,r8
10003998:	18c00044 	addi	r3,r3,1
1000399c:	da011d15 	stw	r8,1140(sp)
100039a0:	d8c11c15 	stw	r3,1136(sp)
100039a4:	008001c4 	movi	r2,7
100039a8:	10c14016 	blt	r2,r3,10003eac <___vfprintf_internal_r+0x1ab8>
100039ac:	4a400204 	addi	r9,r9,8
100039b0:	d8813717 	ldw	r2,1244(sp)
100039b4:	9ca7883a 	add	r19,r19,r18
100039b8:	48800015 	stw	r2,0(r9)
100039bc:	00800044 	movi	r2,1
100039c0:	48800115 	stw	r2,4(r9)
100039c4:	4091883a 	add	r8,r8,r2
100039c8:	1887883a 	add	r3,r3,r2
100039cc:	da011d15 	stw	r8,1140(sp)
100039d0:	d8c11c15 	stw	r3,1136(sp)
100039d4:	008001c4 	movi	r2,7
100039d8:	10c12c16 	blt	r2,r3,10003e8c <___vfprintf_internal_r+0x1a98>
100039dc:	4a400204 	addi	r9,r9,8
100039e0:	d9013217 	ldw	r4,1224(sp)
100039e4:	da011d17 	ldw	r8,1140(sp)
100039e8:	d8c11c17 	ldw	r3,1136(sp)
100039ec:	24a5c83a 	sub	r18,r4,r18
100039f0:	4cc00015 	stw	r19,0(r9)
100039f4:	003fa506 	br	1000388c <__alt_data_end+0xf800388c>
100039f8:	04c40074 	movhi	r19,4097
100039fc:	9cfa3404 	addi	r19,r19,-5936
10003a00:	003c2e06 	br	10002abc <__alt_data_end+0xf8002abc>
10003a04:	d9412917 	ldw	r5,1188(sp)
10003a08:	8809883a 	mov	r4,r17
10003a0c:	d9811b04 	addi	r6,sp,1132
10003a10:	00023c00 	call	100023c0 <__sprint_r>
10003a14:	103bbd1e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003a18:	da011d17 	ldw	r8,1140(sp)
10003a1c:	da400404 	addi	r9,sp,16
10003a20:	003df606 	br	100031fc <__alt_data_end+0xf80031fc>
10003a24:	00840074 	movhi	r2,4097
10003a28:	10ba4304 	addi	r2,r2,-5876
10003a2c:	48800015 	stw	r2,0(r9)
10003a30:	00800044 	movi	r2,1
10003a34:	48800115 	stw	r2,4(r9)
10003a38:	4091883a 	add	r8,r8,r2
10003a3c:	1887883a 	add	r3,r3,r2
10003a40:	da011d15 	stw	r8,1140(sp)
10003a44:	d8c11c15 	stw	r3,1136(sp)
10003a48:	008001c4 	movi	r2,7
10003a4c:	10c0bc16 	blt	r2,r3,10003d40 <___vfprintf_internal_r+0x194c>
10003a50:	4a400204 	addi	r9,r9,8
10003a54:	9000041e 	bne	r18,zero,10003a68 <___vfprintf_internal_r+0x1674>
10003a58:	d8c13217 	ldw	r3,1224(sp)
10003a5c:	1800021e 	bne	r3,zero,10003a68 <___vfprintf_internal_r+0x1674>
10003a60:	8080004c 	andi	r2,r16,1
10003a64:	103d5226 	beq	r2,zero,10002fb0 <__alt_data_end+0xf8002fb0>
10003a68:	d8c11c17 	ldw	r3,1136(sp)
10003a6c:	d9013717 	ldw	r4,1244(sp)
10003a70:	00800044 	movi	r2,1
10003a74:	48800115 	stw	r2,4(r9)
10003a78:	49000015 	stw	r4,0(r9)
10003a7c:	4091883a 	add	r8,r8,r2
10003a80:	1887883a 	add	r3,r3,r2
10003a84:	da011d15 	stw	r8,1140(sp)
10003a88:	d8c11c15 	stw	r3,1136(sp)
10003a8c:	008001c4 	movi	r2,7
10003a90:	10c14516 	blt	r2,r3,10003fa8 <___vfprintf_internal_r+0x1bb4>
10003a94:	4a400204 	addi	r9,r9,8
10003a98:	04a5c83a 	sub	r18,zero,r18
10003a9c:	0480d70e 	bge	zero,r18,10003dfc <___vfprintf_internal_r+0x1a08>
10003aa0:	05800404 	movi	r22,16
10003aa4:	05040074 	movhi	r20,4097
10003aa8:	a53a4784 	addi	r20,r20,-5858
10003aac:	b480db0e 	bge	r22,r18,10003e1c <___vfprintf_internal_r+0x1a28>
10003ab0:	05c001c4 	movi	r23,7
10003ab4:	df012917 	ldw	fp,1188(sp)
10003ab8:	00000306 	br	10003ac8 <___vfprintf_internal_r+0x16d4>
10003abc:	4a400204 	addi	r9,r9,8
10003ac0:	94bffc04 	addi	r18,r18,-16
10003ac4:	b480d50e 	bge	r22,r18,10003e1c <___vfprintf_internal_r+0x1a28>
10003ac8:	4d000015 	stw	r20,0(r9)
10003acc:	4d800115 	stw	r22,4(r9)
10003ad0:	42000404 	addi	r8,r8,16
10003ad4:	18c00044 	addi	r3,r3,1
10003ad8:	da011d15 	stw	r8,1140(sp)
10003adc:	d8c11c15 	stw	r3,1136(sp)
10003ae0:	b8fff60e 	bge	r23,r3,10003abc <__alt_data_end+0xf8003abc>
10003ae4:	8809883a 	mov	r4,r17
10003ae8:	e00b883a 	mov	r5,fp
10003aec:	d9811b04 	addi	r6,sp,1132
10003af0:	00023c00 	call	100023c0 <__sprint_r>
10003af4:	103b851e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003af8:	da011d17 	ldw	r8,1140(sp)
10003afc:	d8c11c17 	ldw	r3,1136(sp)
10003b00:	da400404 	addi	r9,sp,16
10003b04:	003fee06 	br	10003ac0 <__alt_data_end+0xf8003ac0>
10003b08:	da413c15 	stw	r9,1264(sp)
10003b0c:	00090e00 	call	100090e0 <__isnand>
10003b10:	da413c17 	ldw	r9,1264(sp)
10003b14:	10007e1e 	bne	r2,zero,10003d10 <___vfprintf_internal_r+0x191c>
10003b18:	00bfffc4 	movi	r2,-1
10003b1c:	e0816a26 	beq	fp,r2,100040c8 <___vfprintf_internal_r+0x1cd4>
10003b20:	008019c4 	movi	r2,103
10003b24:	90816526 	beq	r18,r2,100040bc <___vfprintf_internal_r+0x1cc8>
10003b28:	008011c4 	movi	r2,71
10003b2c:	90816326 	beq	r18,r2,100040bc <___vfprintf_internal_r+0x1cc8>
10003b30:	80c04014 	ori	r3,r16,256
10003b34:	d8c12a15 	stw	r3,1192(sp)
10003b38:	a0016516 	blt	r20,zero,100040d0 <___vfprintf_internal_r+0x1cdc>
10003b3c:	d8012f05 	stb	zero,1212(sp)
10003b40:	00801984 	movi	r2,102
10003b44:	9080f226 	beq	r18,r2,10003f10 <___vfprintf_internal_r+0x1b1c>
10003b48:	00801184 	movi	r2,70
10003b4c:	9080f026 	beq	r18,r2,10003f10 <___vfprintf_internal_r+0x1b1c>
10003b50:	00801944 	movi	r2,101
10003b54:	90818d26 	beq	r18,r2,1000418c <___vfprintf_internal_r+0x1d98>
10003b58:	00801144 	movi	r2,69
10003b5c:	90818b26 	beq	r18,r2,1000418c <___vfprintf_internal_r+0x1d98>
10003b60:	e02f883a 	mov	r23,fp
10003b64:	d8812404 	addi	r2,sp,1168
10003b68:	d8800115 	stw	r2,4(sp)
10003b6c:	d8812304 	addi	r2,sp,1164
10003b70:	d8800215 	stw	r2,8(sp)
10003b74:	d8812204 	addi	r2,sp,1160
10003b78:	ddc00015 	stw	r23,0(sp)
10003b7c:	d8800315 	stw	r2,12(sp)
10003b80:	8809883a 	mov	r4,r17
10003b84:	b00b883a 	mov	r5,r22
10003b88:	a00d883a 	mov	r6,r20
10003b8c:	01c00084 	movi	r7,2
10003b90:	da413c15 	stw	r9,1264(sp)
10003b94:	00046440 	call	10004644 <_dtoa_r>
10003b98:	1027883a 	mov	r19,r2
10003b9c:	008019c4 	movi	r2,103
10003ba0:	da413c17 	ldw	r9,1264(sp)
10003ba4:	9081951e 	bne	r18,r2,100041fc <___vfprintf_internal_r+0x1e08>
10003ba8:	8080004c 	andi	r2,r16,1
10003bac:	10017926 	beq	r2,zero,10004194 <___vfprintf_internal_r+0x1da0>
10003bb0:	00801184 	movi	r2,70
10003bb4:	9dc7883a 	add	r3,r19,r23
10003bb8:	9080e626 	beq	r18,r2,10003f54 <___vfprintf_internal_r+0x1b60>
10003bbc:	b009883a 	mov	r4,r22
10003bc0:	a00b883a 	mov	r5,r20
10003bc4:	000d883a 	mov	r6,zero
10003bc8:	000f883a 	mov	r7,zero
10003bcc:	d8c13b15 	stw	r3,1260(sp)
10003bd0:	da413c15 	stw	r9,1264(sp)
10003bd4:	000acfc0 	call	1000acfc <__eqdf2>
10003bd8:	d8c13b17 	ldw	r3,1260(sp)
10003bdc:	da413c17 	ldw	r9,1264(sp)
10003be0:	10000726 	beq	r2,zero,10003c00 <___vfprintf_internal_r+0x180c>
10003be4:	d8812217 	ldw	r2,1160(sp)
10003be8:	10c18a2e 	bgeu	r2,r3,10004214 <___vfprintf_internal_r+0x1e20>
10003bec:	01000c04 	movi	r4,48
10003bf0:	11000005 	stb	r4,0(r2)
10003bf4:	10800044 	addi	r2,r2,1
10003bf8:	d8812215 	stw	r2,1160(sp)
10003bfc:	10fffc1e 	bne	r2,r3,10003bf0 <__alt_data_end+0xf8003bf0>
10003c00:	1cc7c83a 	sub	r3,r3,r19
10003c04:	d8c13215 	stw	r3,1224(sp)
10003c08:	008019c4 	movi	r2,103
10003c0c:	9080fa26 	beq	r18,r2,10003ff8 <___vfprintf_internal_r+0x1c04>
10003c10:	008011c4 	movi	r2,71
10003c14:	9080f826 	beq	r18,r2,10003ff8 <___vfprintf_internal_r+0x1c04>
10003c18:	00801984 	movi	r2,102
10003c1c:	90818e1e 	bne	r18,r2,10004258 <___vfprintf_internal_r+0x1e64>
10003c20:	d8812417 	ldw	r2,1168(sp)
10003c24:	d8812b15 	stw	r2,1196(sp)
10003c28:	00817c0e 	bge	zero,r2,1000421c <___vfprintf_internal_r+0x1e28>
10003c2c:	e000021e 	bne	fp,zero,10003c38 <___vfprintf_internal_r+0x1844>
10003c30:	8400004c 	andi	r16,r16,1
10003c34:	80000426 	beq	r16,zero,10003c48 <___vfprintf_internal_r+0x1854>
10003c38:	d8812b17 	ldw	r2,1196(sp)
10003c3c:	e2000044 	addi	r8,fp,1
10003c40:	1205883a 	add	r2,r2,r8
10003c44:	d8812b15 	stw	r2,1196(sp)
10003c48:	d8812815 	stw	r2,1184(sp)
10003c4c:	10010b16 	blt	r2,zero,1000407c <___vfprintf_internal_r+0x1c88>
10003c50:	ddc12f07 	ldb	r23,1212(sp)
10003c54:	b800e426 	beq	r23,zero,10003fe8 <___vfprintf_internal_r+0x1bf4>
10003c58:	00800b44 	movi	r2,45
10003c5c:	d8812585 	stb	r2,1174(sp)
10003c60:	dc012a17 	ldw	r16,1192(sp)
10003c64:	d8013115 	stw	zero,1220(sp)
10003c68:	003b7306 	br	10002a38 <__alt_data_end+0xf8002a38>
10003c6c:	d8812b17 	ldw	r2,1196(sp)
10003c70:	d8812815 	stw	r2,1184(sp)
10003c74:	10005716 	blt	r2,zero,10003dd4 <___vfprintf_internal_r+0x19e0>
10003c78:	d8812583 	ldbu	r2,1174(sp)
10003c7c:	ddc12d15 	stw	r23,1204(sp)
10003c80:	d8013115 	stw	zero,1220(sp)
10003c84:	003b6806 	br	10002a28 <__alt_data_end+0xf8002a28>
10003c88:	d8c12d17 	ldw	r3,1204(sp)
10003c8c:	1dc00017 	ldw	r23,0(r3)
10003c90:	18c00104 	addi	r3,r3,4
10003c94:	d8c12d15 	stw	r3,1204(sp)
10003c98:	b82dd7fa 	srai	r22,r23,31
10003c9c:	b005883a 	mov	r2,r22
10003ca0:	003b4406 	br	100029b4 <__alt_data_end+0xf80029b4>
10003ca4:	d9012d17 	ldw	r4,1204(sp)
10003ca8:	002d883a 	mov	r22,zero
10003cac:	00c00044 	movi	r3,1
10003cb0:	25c00017 	ldw	r23,0(r4)
10003cb4:	21000104 	addi	r4,r4,4
10003cb8:	d9012d15 	stw	r4,1204(sp)
10003cbc:	b805883a 	mov	r2,r23
10003cc0:	d8012585 	stb	zero,1174(sp)
10003cc4:	003b4406 	br	100029d8 <__alt_data_end+0xf80029d8>
10003cc8:	d9012d17 	ldw	r4,1204(sp)
10003ccc:	002d883a 	mov	r22,zero
10003cd0:	25c00017 	ldw	r23,0(r4)
10003cd4:	21000104 	addi	r4,r4,4
10003cd8:	d9012d15 	stw	r4,1204(sp)
10003cdc:	003bab06 	br	10002b8c <__alt_data_end+0xf8002b8c>
10003ce0:	d8812d17 	ldw	r2,1204(sp)
10003ce4:	002d883a 	mov	r22,zero
10003ce8:	0007883a 	mov	r3,zero
10003cec:	15c00017 	ldw	r23,0(r2)
10003cf0:	10800104 	addi	r2,r2,4
10003cf4:	d8812d15 	stw	r2,1204(sp)
10003cf8:	d8012585 	stb	zero,1174(sp)
10003cfc:	b805883a 	mov	r2,r23
10003d00:	003b3506 	br	100029d8 <__alt_data_end+0xf80029d8>
10003d04:	00ffffc4 	movi	r3,-1
10003d08:	b82b883a 	mov	r21,r23
10003d0c:	003a1606 	br	10002568 <__alt_data_end+0xf8002568>
10003d10:	008011c4 	movi	r2,71
10003d14:	1480b116 	blt	r2,r18,10003fdc <___vfprintf_internal_r+0x1be8>
10003d18:	04c40074 	movhi	r19,4097
10003d1c:	9cfa3504 	addi	r19,r19,-5932
10003d20:	00c000c4 	movi	r3,3
10003d24:	00bfdfc4 	movi	r2,-129
10003d28:	80a0703a 	and	r16,r16,r2
10003d2c:	d8c12815 	stw	r3,1184(sp)
10003d30:	d8812583 	ldbu	r2,1174(sp)
10003d34:	d8c12b15 	stw	r3,1196(sp)
10003d38:	d8013115 	stw	zero,1220(sp)
10003d3c:	003b3a06 	br	10002a28 <__alt_data_end+0xf8002a28>
10003d40:	d9412917 	ldw	r5,1188(sp)
10003d44:	8809883a 	mov	r4,r17
10003d48:	d9811b04 	addi	r6,sp,1132
10003d4c:	00023c00 	call	100023c0 <__sprint_r>
10003d50:	103aee1e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003d54:	dc812417 	ldw	r18,1168(sp)
10003d58:	da011d17 	ldw	r8,1140(sp)
10003d5c:	da400404 	addi	r9,sp,16
10003d60:	003f3c06 	br	10003a54 <__alt_data_end+0xf8003a54>
10003d64:	ad400044 	addi	r21,r21,1
10003d68:	84000814 	ori	r16,r16,32
10003d6c:	14800047 	ldb	r18,1(r2)
10003d70:	0039fc06 	br	10002564 <__alt_data_end+0xf8002564>
10003d74:	d9412917 	ldw	r5,1188(sp)
10003d78:	8809883a 	mov	r4,r17
10003d7c:	d9811b04 	addi	r6,sp,1132
10003d80:	00023c00 	call	100023c0 <__sprint_r>
10003d84:	103ae11e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003d88:	da011d17 	ldw	r8,1140(sp)
10003d8c:	da400404 	addi	r9,sp,16
10003d90:	003d2b06 	br	10003240 <__alt_data_end+0xf8003240>
10003d94:	4d000015 	stw	r20,0(r9)
10003d98:	4c800115 	stw	r18,4(r9)
10003d9c:	4491883a 	add	r8,r8,r18
10003da0:	18c00044 	addi	r3,r3,1
10003da4:	da011d15 	stw	r8,1140(sp)
10003da8:	d8c11c15 	stw	r3,1136(sp)
10003dac:	008001c4 	movi	r2,7
10003db0:	10fcbd16 	blt	r2,r3,100030a8 <__alt_data_end+0xf80030a8>
10003db4:	4a400204 	addi	r9,r9,8
10003db8:	003cc206 	br	100030c4 <__alt_data_end+0xf80030c4>
10003dbc:	da413c15 	stw	r9,1264(sp)
10003dc0:	00023340 	call	10002334 <strlen>
10003dc4:	d8812b15 	stw	r2,1196(sp)
10003dc8:	d8812815 	stw	r2,1184(sp)
10003dcc:	da413c17 	ldw	r9,1264(sp)
10003dd0:	103fa90e 	bge	r2,zero,10003c78 <__alt_data_end+0xf8003c78>
10003dd4:	d8012815 	stw	zero,1184(sp)
10003dd8:	003fa706 	br	10003c78 <__alt_data_end+0xf8003c78>
10003ddc:	d9412917 	ldw	r5,1188(sp)
10003de0:	8809883a 	mov	r4,r17
10003de4:	d9811b04 	addi	r6,sp,1132
10003de8:	00023c00 	call	100023c0 <__sprint_r>
10003dec:	103ac71e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003df0:	da011d17 	ldw	r8,1140(sp)
10003df4:	d8c11c17 	ldw	r3,1136(sp)
10003df8:	da400404 	addi	r9,sp,16
10003dfc:	d8813217 	ldw	r2,1224(sp)
10003e00:	4cc00015 	stw	r19,0(r9)
10003e04:	48800115 	stw	r2,4(r9)
10003e08:	4091883a 	add	r8,r8,r2
10003e0c:	003c6206 	br	10002f98 <__alt_data_end+0xf8002f98>
10003e10:	00800b44 	movi	r2,45
10003e14:	d8812585 	stb	r2,1174(sp)
10003e18:	003b2406 	br	10002aac <__alt_data_end+0xf8002aac>
10003e1c:	4d000015 	stw	r20,0(r9)
10003e20:	4c800115 	stw	r18,4(r9)
10003e24:	4491883a 	add	r8,r8,r18
10003e28:	18c00044 	addi	r3,r3,1
10003e2c:	da011d15 	stw	r8,1140(sp)
10003e30:	d8c11c15 	stw	r3,1136(sp)
10003e34:	008001c4 	movi	r2,7
10003e38:	10ffe816 	blt	r2,r3,10003ddc <__alt_data_end+0xf8003ddc>
10003e3c:	4a400204 	addi	r9,r9,8
10003e40:	003fee06 	br	10003dfc <__alt_data_end+0xf8003dfc>
10003e44:	d8c12b15 	stw	r3,1196(sp)
10003e48:	00800184 	movi	r2,6
10003e4c:	10c0062e 	bgeu	r2,r3,10003e68 <___vfprintf_internal_r+0x1a74>
10003e50:	d8812b15 	stw	r2,1196(sp)
10003e54:	d8812815 	stw	r2,1184(sp)
10003e58:	ddc12d15 	stw	r23,1204(sp)
10003e5c:	04c40074 	movhi	r19,4097
10003e60:	9cfa4104 	addi	r19,r19,-5884
10003e64:	0039ca06 	br	10002590 <__alt_data_end+0xf8002590>
10003e68:	d8812b17 	ldw	r2,1196(sp)
10003e6c:	d8812815 	stw	r2,1184(sp)
10003e70:	103ff90e 	bge	r2,zero,10003e58 <__alt_data_end+0xf8003e58>
10003e74:	d8012815 	stw	zero,1184(sp)
10003e78:	003ff706 	br	10003e58 <__alt_data_end+0xf8003e58>
10003e7c:	00800244 	movi	r2,9
10003e80:	15fdaa36 	bltu	r2,r23,1000352c <__alt_data_end+0xf800352c>
10003e84:	dd010e04 	addi	r20,sp,1080
10003e88:	003dc606 	br	100035a4 <__alt_data_end+0xf80035a4>
10003e8c:	d9412917 	ldw	r5,1188(sp)
10003e90:	8809883a 	mov	r4,r17
10003e94:	d9811b04 	addi	r6,sp,1132
10003e98:	00023c00 	call	100023c0 <__sprint_r>
10003e9c:	103a9b1e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003ea0:	dc812417 	ldw	r18,1168(sp)
10003ea4:	da400404 	addi	r9,sp,16
10003ea8:	003ecd06 	br	100039e0 <__alt_data_end+0xf80039e0>
10003eac:	d9412917 	ldw	r5,1188(sp)
10003eb0:	8809883a 	mov	r4,r17
10003eb4:	d9811b04 	addi	r6,sp,1132
10003eb8:	00023c00 	call	100023c0 <__sprint_r>
10003ebc:	103a931e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003ec0:	dc812417 	ldw	r18,1168(sp)
10003ec4:	da011d17 	ldw	r8,1140(sp)
10003ec8:	d8c11c17 	ldw	r3,1136(sp)
10003ecc:	da400404 	addi	r9,sp,16
10003ed0:	003eb706 	br	100039b0 <__alt_data_end+0xf80039b0>
10003ed4:	d9412917 	ldw	r5,1188(sp)
10003ed8:	8809883a 	mov	r4,r17
10003edc:	d9811b04 	addi	r6,sp,1132
10003ee0:	00023c00 	call	100023c0 <__sprint_r>
10003ee4:	103a891e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003ee8:	dc812417 	ldw	r18,1168(sp)
10003eec:	da011d17 	ldw	r8,1140(sp)
10003ef0:	da400404 	addi	r9,sp,16
10003ef4:	003dc206 	br	10003600 <__alt_data_end+0xf8003600>
10003ef8:	df012815 	stw	fp,1184(sp)
10003efc:	d8812583 	ldbu	r2,1174(sp)
10003f00:	df012b15 	stw	fp,1196(sp)
10003f04:	ddc12d15 	stw	r23,1204(sp)
10003f08:	d8013115 	stw	zero,1220(sp)
10003f0c:	003ac606 	br	10002a28 <__alt_data_end+0xf8002a28>
10003f10:	d8812404 	addi	r2,sp,1168
10003f14:	d8800115 	stw	r2,4(sp)
10003f18:	d8812304 	addi	r2,sp,1164
10003f1c:	d8800215 	stw	r2,8(sp)
10003f20:	d8812204 	addi	r2,sp,1160
10003f24:	df000015 	stw	fp,0(sp)
10003f28:	d8800315 	stw	r2,12(sp)
10003f2c:	8809883a 	mov	r4,r17
10003f30:	b00b883a 	mov	r5,r22
10003f34:	a00d883a 	mov	r6,r20
10003f38:	01c000c4 	movi	r7,3
10003f3c:	da413c15 	stw	r9,1264(sp)
10003f40:	00046440 	call	10004644 <_dtoa_r>
10003f44:	da413c17 	ldw	r9,1264(sp)
10003f48:	1027883a 	mov	r19,r2
10003f4c:	1707883a 	add	r3,r2,fp
10003f50:	e02f883a 	mov	r23,fp
10003f54:	99000007 	ldb	r4,0(r19)
10003f58:	00800c04 	movi	r2,48
10003f5c:	20800326 	beq	r4,r2,10003f6c <___vfprintf_internal_r+0x1b78>
10003f60:	da812417 	ldw	r10,1168(sp)
10003f64:	1a87883a 	add	r3,r3,r10
10003f68:	003f1406 	br	10003bbc <__alt_data_end+0xf8003bbc>
10003f6c:	b009883a 	mov	r4,r22
10003f70:	a00b883a 	mov	r5,r20
10003f74:	000d883a 	mov	r6,zero
10003f78:	000f883a 	mov	r7,zero
10003f7c:	d8c13b15 	stw	r3,1260(sp)
10003f80:	da413c15 	stw	r9,1264(sp)
10003f84:	000ad580 	call	1000ad58 <__nedf2>
10003f88:	d8c13b17 	ldw	r3,1260(sp)
10003f8c:	da413c17 	ldw	r9,1264(sp)
10003f90:	103ff326 	beq	r2,zero,10003f60 <__alt_data_end+0xf8003f60>
10003f94:	00800044 	movi	r2,1
10003f98:	15d5c83a 	sub	r10,r2,r23
10003f9c:	da812415 	stw	r10,1168(sp)
10003fa0:	1a87883a 	add	r3,r3,r10
10003fa4:	003f0506 	br	10003bbc <__alt_data_end+0xf8003bbc>
10003fa8:	d9412917 	ldw	r5,1188(sp)
10003fac:	8809883a 	mov	r4,r17
10003fb0:	d9811b04 	addi	r6,sp,1132
10003fb4:	00023c00 	call	100023c0 <__sprint_r>
10003fb8:	103a541e 	bne	r2,zero,1000290c <__alt_data_end+0xf800290c>
10003fbc:	dc812417 	ldw	r18,1168(sp)
10003fc0:	da011d17 	ldw	r8,1140(sp)
10003fc4:	d8c11c17 	ldw	r3,1136(sp)
10003fc8:	da400404 	addi	r9,sp,16
10003fcc:	003eb206 	br	10003a98 <__alt_data_end+0xf8003a98>
10003fd0:	b82b883a 	mov	r21,r23
10003fd4:	0007883a 	mov	r3,zero
10003fd8:	00396306 	br	10002568 <__alt_data_end+0xf8002568>
10003fdc:	04c40074 	movhi	r19,4097
10003fe0:	9cfa3604 	addi	r19,r19,-5928
10003fe4:	003f4e06 	br	10003d20 <__alt_data_end+0xf8003d20>
10003fe8:	d8812583 	ldbu	r2,1174(sp)
10003fec:	dc012a17 	ldw	r16,1192(sp)
10003ff0:	d8013115 	stw	zero,1220(sp)
10003ff4:	003a8c06 	br	10002a28 <__alt_data_end+0xf8002a28>
10003ff8:	d8812417 	ldw	r2,1168(sp)
10003ffc:	d8812b15 	stw	r2,1196(sp)
10004000:	1029883a 	mov	r20,r2
10004004:	00bfff44 	movi	r2,-3
10004008:	a0800116 	blt	r20,r2,10004010 <___vfprintf_internal_r+0x1c1c>
1000400c:	e5001d0e 	bge	fp,r20,10004084 <___vfprintf_internal_r+0x1c90>
10004010:	94bfff84 	addi	r18,r18,-2
10004014:	a53fffc4 	addi	r20,r20,-1
10004018:	dd012415 	stw	r20,1168(sp)
1000401c:	dc811fc5 	stb	r18,1151(sp)
10004020:	a0007216 	blt	r20,zero,100041ec <___vfprintf_internal_r+0x1df8>
10004024:	00800ac4 	movi	r2,43
10004028:	d8812005 	stb	r2,1152(sp)
1000402c:	00800244 	movi	r2,9
10004030:	15003516 	blt	r2,r20,10004108 <___vfprintf_internal_r+0x1d14>
10004034:	00800c04 	movi	r2,48
10004038:	a5000c04 	addi	r20,r20,48
1000403c:	d8812045 	stb	r2,1153(sp)
10004040:	dd012085 	stb	r20,1154(sp)
10004044:	d8c120c4 	addi	r3,sp,1155
10004048:	d8811fc4 	addi	r2,sp,1151
1000404c:	1885c83a 	sub	r2,r3,r2
10004050:	d8c13217 	ldw	r3,1224(sp)
10004054:	d8813515 	stw	r2,1236(sp)
10004058:	1885883a 	add	r2,r3,r2
1000405c:	d8812b15 	stw	r2,1196(sp)
10004060:	00800044 	movi	r2,1
10004064:	10c0580e 	bge	r2,r3,100041c8 <___vfprintf_internal_r+0x1dd4>
10004068:	d8812b17 	ldw	r2,1196(sp)
1000406c:	10800044 	addi	r2,r2,1
10004070:	d8812b15 	stw	r2,1196(sp)
10004074:	d8812815 	stw	r2,1184(sp)
10004078:	103ef50e 	bge	r2,zero,10003c50 <__alt_data_end+0xf8003c50>
1000407c:	d8012815 	stw	zero,1184(sp)
10004080:	003ef306 	br	10003c50 <__alt_data_end+0xf8003c50>
10004084:	d8812b17 	ldw	r2,1196(sp)
10004088:	d8c13217 	ldw	r3,1224(sp)
1000408c:	10c01416 	blt	r2,r3,100040e0 <___vfprintf_internal_r+0x1cec>
10004090:	8400004c 	andi	r16,r16,1
10004094:	80000326 	beq	r16,zero,100040a4 <___vfprintf_internal_r+0x1cb0>
10004098:	d8812b17 	ldw	r2,1196(sp)
1000409c:	10800044 	addi	r2,r2,1
100040a0:	d8812b15 	stw	r2,1196(sp)
100040a4:	d8812815 	stw	r2,1184(sp)
100040a8:	10001416 	blt	r2,zero,100040fc <___vfprintf_internal_r+0x1d08>
100040ac:	048019c4 	movi	r18,103
100040b0:	003ee706 	br	10003c50 <__alt_data_end+0xf8003c50>
100040b4:	d8012815 	stw	zero,1184(sp)
100040b8:	003b1a06 	br	10002d24 <__alt_data_end+0xf8002d24>
100040bc:	e03e9c1e 	bne	fp,zero,10003b30 <__alt_data_end+0xf8003b30>
100040c0:	07000044 	movi	fp,1
100040c4:	003e9a06 	br	10003b30 <__alt_data_end+0xf8003b30>
100040c8:	07000184 	movi	fp,6
100040cc:	003e9806 	br	10003b30 <__alt_data_end+0xf8003b30>
100040d0:	00c00b44 	movi	r3,45
100040d4:	a520003c 	xorhi	r20,r20,32768
100040d8:	d8c12f05 	stb	r3,1212(sp)
100040dc:	003e9806 	br	10003b40 <__alt_data_end+0xf8003b40>
100040e0:	05003f0e 	bge	zero,r20,100041e0 <___vfprintf_internal_r+0x1dec>
100040e4:	05000044 	movi	r20,1
100040e8:	d8c13217 	ldw	r3,1224(sp)
100040ec:	a0e9883a 	add	r20,r20,r3
100040f0:	dd012b15 	stw	r20,1196(sp)
100040f4:	dd012815 	stw	r20,1184(sp)
100040f8:	a03fec0e 	bge	r20,zero,100040ac <__alt_data_end+0xf80040ac>
100040fc:	d8012815 	stw	zero,1184(sp)
10004100:	048019c4 	movi	r18,103
10004104:	003ed206 	br	10003c50 <__alt_data_end+0xf8003c50>
10004108:	d8c11f84 	addi	r3,sp,1150
1000410c:	102f883a 	mov	r23,r2
10004110:	4839883a 	mov	fp,r9
10004114:	a009883a 	mov	r4,r20
10004118:	01400284 	movi	r5,10
1000411c:	182d883a 	mov	r22,r3
10004120:	000b2500 	call	1000b250 <__modsi3>
10004124:	10800c04 	addi	r2,r2,48
10004128:	a009883a 	mov	r4,r20
1000412c:	b0800005 	stb	r2,0(r22)
10004130:	01400284 	movi	r5,10
10004134:	000b2000 	call	1000b200 <__divsi3>
10004138:	1029883a 	mov	r20,r2
1000413c:	b0ffffc4 	addi	r3,r22,-1
10004140:	b8bff416 	blt	r23,r2,10004114 <__alt_data_end+0xf8004114>
10004144:	11400c04 	addi	r5,r2,48
10004148:	b17fffc5 	stb	r5,-1(r22)
1000414c:	d8811fc4 	addi	r2,sp,1151
10004150:	e013883a 	mov	r9,fp
10004154:	18803e2e 	bgeu	r3,r2,10004250 <___vfprintf_internal_r+0x1e5c>
10004158:	b007883a 	mov	r3,r22
1000415c:	d9012044 	addi	r4,sp,1153
10004160:	00000206 	br	1000416c <___vfprintf_internal_r+0x1d78>
10004164:	19400003 	ldbu	r5,0(r3)
10004168:	18c00044 	addi	r3,r3,1
1000416c:	21400005 	stb	r5,0(r4)
10004170:	21000044 	addi	r4,r4,1
10004174:	10fffb1e 	bne	r2,r3,10004164 <__alt_data_end+0xf8004164>
10004178:	d8c12004 	addi	r3,sp,1152
1000417c:	1d87c83a 	sub	r3,r3,r22
10004180:	d9012044 	addi	r4,sp,1153
10004184:	20c7883a 	add	r3,r4,r3
10004188:	003fb006 	br	1000404c <__alt_data_end+0xf800404c>
1000418c:	e5c00044 	addi	r23,fp,1
10004190:	003e7406 	br	10003b64 <__alt_data_end+0xf8003b64>
10004194:	d8c12217 	ldw	r3,1160(sp)
10004198:	003e9906 	br	10003c00 <__alt_data_end+0xf8003c00>
1000419c:	d9012d17 	ldw	r4,1204(sp)
100041a0:	ac800043 	ldbu	r18,1(r21)
100041a4:	b82b883a 	mov	r21,r23
100041a8:	20c00017 	ldw	r3,0(r4)
100041ac:	20800104 	addi	r2,r4,4
100041b0:	d8812d15 	stw	r2,1204(sp)
100041b4:	18002116 	blt	r3,zero,1000423c <___vfprintf_internal_r+0x1e48>
100041b8:	94803fcc 	andi	r18,r18,255
100041bc:	9480201c 	xori	r18,r18,128
100041c0:	94bfe004 	addi	r18,r18,-128
100041c4:	0038e706 	br	10002564 <__alt_data_end+0xf8002564>
100041c8:	80a0703a 	and	r16,r16,r2
100041cc:	803fa61e 	bne	r16,zero,10004068 <__alt_data_end+0xf8004068>
100041d0:	d8812b17 	ldw	r2,1196(sp)
100041d4:	d8812815 	stw	r2,1184(sp)
100041d8:	103e9d0e 	bge	r2,zero,10003c50 <__alt_data_end+0xf8003c50>
100041dc:	003fa706 	br	1000407c <__alt_data_end+0xf800407c>
100041e0:	00800084 	movi	r2,2
100041e4:	1529c83a 	sub	r20,r2,r20
100041e8:	003fbf06 	br	100040e8 <__alt_data_end+0xf80040e8>
100041ec:	00800b44 	movi	r2,45
100041f0:	0529c83a 	sub	r20,zero,r20
100041f4:	d8812005 	stb	r2,1152(sp)
100041f8:	003f8c06 	br	1000402c <__alt_data_end+0xf800402c>
100041fc:	008011c4 	movi	r2,71
10004200:	90be6926 	beq	r18,r2,10003ba8 <__alt_data_end+0xf8003ba8>
10004204:	003e6a06 	br	10003bb0 <__alt_data_end+0xf8003bb0>
10004208:	00bfffc4 	movi	r2,-1
1000420c:	d8812c15 	stw	r2,1200(sp)
10004210:	0039ad06 	br	100028c8 <__alt_data_end+0xf80028c8>
10004214:	1007883a 	mov	r3,r2
10004218:	003e7906 	br	10003c00 <__alt_data_end+0xf8003c00>
1000421c:	e000021e 	bne	fp,zero,10004228 <___vfprintf_internal_r+0x1e34>
10004220:	8400004c 	andi	r16,r16,1
10004224:	80000e26 	beq	r16,zero,10004260 <___vfprintf_internal_r+0x1e6c>
10004228:	e7000084 	addi	fp,fp,2
1000422c:	df012b15 	stw	fp,1196(sp)
10004230:	df012815 	stw	fp,1184(sp)
10004234:	e03e860e 	bge	fp,zero,10003c50 <__alt_data_end+0xf8003c50>
10004238:	003f9006 	br	1000407c <__alt_data_end+0xf800407c>
1000423c:	94803fcc 	andi	r18,r18,255
10004240:	9480201c 	xori	r18,r18,128
10004244:	00ffffc4 	movi	r3,-1
10004248:	94bfe004 	addi	r18,r18,-128
1000424c:	0038c506 	br	10002564 <__alt_data_end+0xf8002564>
10004250:	d8c12044 	addi	r3,sp,1153
10004254:	003f7d06 	br	1000404c <__alt_data_end+0xf800404c>
10004258:	dd012417 	ldw	r20,1168(sp)
1000425c:	003f6d06 	br	10004014 <__alt_data_end+0xf8004014>
10004260:	00c00044 	movi	r3,1
10004264:	d8c12815 	stw	r3,1184(sp)
10004268:	d8c12b15 	stw	r3,1196(sp)
1000426c:	003e7806 	br	10003c50 <__alt_data_end+0xf8003c50>

10004270 <__vfprintf_internal>:
10004270:	00840074 	movhi	r2,4097
10004274:	10818404 	addi	r2,r2,1552
10004278:	2007883a 	mov	r3,r4
1000427c:	11000017 	ldw	r4,0(r2)
10004280:	2805883a 	mov	r2,r5
10004284:	300f883a 	mov	r7,r6
10004288:	180b883a 	mov	r5,r3
1000428c:	100d883a 	mov	r6,r2
10004290:	00023f41 	jmpi	100023f4 <___vfprintf_internal_r>

10004294 <__swsetup_r>:
10004294:	00840074 	movhi	r2,4097
10004298:	10818404 	addi	r2,r2,1552
1000429c:	10800017 	ldw	r2,0(r2)
100042a0:	defffd04 	addi	sp,sp,-12
100042a4:	dc400115 	stw	r17,4(sp)
100042a8:	dc000015 	stw	r16,0(sp)
100042ac:	dfc00215 	stw	ra,8(sp)
100042b0:	2023883a 	mov	r17,r4
100042b4:	2821883a 	mov	r16,r5
100042b8:	10000226 	beq	r2,zero,100042c4 <__swsetup_r+0x30>
100042bc:	10c00e17 	ldw	r3,56(r2)
100042c0:	18003d26 	beq	r3,zero,100043b8 <__swsetup_r+0x124>
100042c4:	8080030b 	ldhu	r2,12(r16)
100042c8:	10c0020c 	andi	r3,r2,8
100042cc:	18ffffcc 	andi	r3,r3,65535
100042d0:	18e0001c 	xori	r3,r3,32768
100042d4:	18e00004 	addi	r3,r3,-32768
100042d8:	18001226 	beq	r3,zero,10004324 <__swsetup_r+0x90>
100042dc:	80c00417 	ldw	r3,16(r16)
100042e0:	18001f26 	beq	r3,zero,10004360 <__swsetup_r+0xcc>
100042e4:	1100004c 	andi	r4,r2,1
100042e8:	2000261e 	bne	r4,zero,10004384 <__swsetup_r+0xf0>
100042ec:	1080008c 	andi	r2,r2,2
100042f0:	10bfffcc 	andi	r2,r2,65535
100042f4:	10a0001c 	xori	r2,r2,32768
100042f8:	10a00004 	addi	r2,r2,-32768
100042fc:	1000311e 	bne	r2,zero,100043c4 <__swsetup_r+0x130>
10004300:	80800517 	ldw	r2,20(r16)
10004304:	80800215 	stw	r2,8(r16)
10004308:	18002326 	beq	r3,zero,10004398 <__swsetup_r+0x104>
1000430c:	0005883a 	mov	r2,zero
10004310:	dfc00217 	ldw	ra,8(sp)
10004314:	dc400117 	ldw	r17,4(sp)
10004318:	dc000017 	ldw	r16,0(sp)
1000431c:	dec00304 	addi	sp,sp,12
10004320:	f800283a 	ret
10004324:	10c0040c 	andi	r3,r2,16
10004328:	18ffffcc 	andi	r3,r3,65535
1000432c:	18e0001c 	xori	r3,r3,32768
10004330:	18e00004 	addi	r3,r3,-32768
10004334:	18001e26 	beq	r3,zero,100043b0 <__swsetup_r+0x11c>
10004338:	10c0010c 	andi	r3,r2,4
1000433c:	18ffffcc 	andi	r3,r3,65535
10004340:	18e0001c 	xori	r3,r3,32768
10004344:	18e00004 	addi	r3,r3,-32768
10004348:	1800211e 	bne	r3,zero,100043d0 <__swsetup_r+0x13c>
1000434c:	80c00417 	ldw	r3,16(r16)
10004350:	11400214 	ori	r5,r2,8
10004354:	8140030d 	sth	r5,12(r16)
10004358:	2805883a 	mov	r2,r5
1000435c:	183fe11e 	bne	r3,zero,100042e4 <__alt_data_end+0xf80042e4>
10004360:	1140a00c 	andi	r5,r2,640
10004364:	01008004 	movi	r4,512
10004368:	293fde26 	beq	r5,r4,100042e4 <__alt_data_end+0xf80042e4>
1000436c:	8809883a 	mov	r4,r17
10004370:	800b883a 	mov	r5,r16
10004374:	0006c900 	call	10006c90 <__smakebuf_r>
10004378:	8080030b 	ldhu	r2,12(r16)
1000437c:	80c00417 	ldw	r3,16(r16)
10004380:	003fd806 	br	100042e4 <__alt_data_end+0xf80042e4>
10004384:	80800517 	ldw	r2,20(r16)
10004388:	80000215 	stw	zero,8(r16)
1000438c:	0085c83a 	sub	r2,zero,r2
10004390:	80800615 	stw	r2,24(r16)
10004394:	183fdd1e 	bne	r3,zero,1000430c <__alt_data_end+0xf800430c>
10004398:	8080030b 	ldhu	r2,12(r16)
1000439c:	1080200c 	andi	r2,r2,128
100043a0:	10bfffcc 	andi	r2,r2,65535
100043a4:	10a0001c 	xori	r2,r2,32768
100043a8:	10a00004 	addi	r2,r2,-32768
100043ac:	103fd826 	beq	r2,zero,10004310 <__alt_data_end+0xf8004310>
100043b0:	00bfffc4 	movi	r2,-1
100043b4:	003fd606 	br	10004310 <__alt_data_end+0xf8004310>
100043b8:	1009883a 	mov	r4,r2
100043bc:	0005f1c0 	call	10005f1c <__sinit>
100043c0:	003fc006 	br	100042c4 <__alt_data_end+0xf80042c4>
100043c4:	0005883a 	mov	r2,zero
100043c8:	80800215 	stw	r2,8(r16)
100043cc:	003fce06 	br	10004308 <__alt_data_end+0xf8004308>
100043d0:	81400c17 	ldw	r5,48(r16)
100043d4:	28000626 	beq	r5,zero,100043f0 <__swsetup_r+0x15c>
100043d8:	80c01004 	addi	r3,r16,64
100043dc:	28c00326 	beq	r5,r3,100043ec <__swsetup_r+0x158>
100043e0:	8809883a 	mov	r4,r17
100043e4:	00062a00 	call	100062a0 <_free_r>
100043e8:	8080030b 	ldhu	r2,12(r16)
100043ec:	80000c15 	stw	zero,48(r16)
100043f0:	80c00417 	ldw	r3,16(r16)
100043f4:	013ff6c4 	movi	r4,-37
100043f8:	2084703a 	and	r2,r4,r2
100043fc:	80000115 	stw	zero,4(r16)
10004400:	80c00015 	stw	r3,0(r16)
10004404:	003fd206 	br	10004350 <__alt_data_end+0xf8004350>

10004408 <quorem>:
10004408:	defff204 	addi	sp,sp,-56
1000440c:	dd000815 	stw	r20,32(sp)
10004410:	20800417 	ldw	r2,16(r4)
10004414:	2d000417 	ldw	r20,16(r5)
10004418:	dcc00715 	stw	r19,28(sp)
1000441c:	dfc00d15 	stw	ra,52(sp)
10004420:	df000c15 	stw	fp,48(sp)
10004424:	ddc00b15 	stw	r23,44(sp)
10004428:	dd800a15 	stw	r22,40(sp)
1000442c:	dd400915 	stw	r21,36(sp)
10004430:	dc800615 	stw	r18,24(sp)
10004434:	dc400515 	stw	r17,20(sp)
10004438:	dc000415 	stw	r16,16(sp)
1000443c:	d9400015 	stw	r5,0(sp)
10004440:	2027883a 	mov	r19,r4
10004444:	15007d16 	blt	r2,r20,1000463c <quorem+0x234>
10004448:	a0800104 	addi	r2,r20,4
1000444c:	1085883a 	add	r2,r2,r2
10004450:	1085883a 	add	r2,r2,r2
10004454:	28ad883a 	add	r22,r5,r2
10004458:	2085883a 	add	r2,r4,r2
1000445c:	10800017 	ldw	r2,0(r2)
10004460:	b1400017 	ldw	r5,0(r22)
10004464:	a53fffc4 	addi	r20,r20,-1
10004468:	1009883a 	mov	r4,r2
1000446c:	29400044 	addi	r5,r5,1
10004470:	d8800115 	stw	r2,4(sp)
10004474:	000b2ac0 	call	1000b2ac <__udivsi3>
10004478:	1025883a 	mov	r18,r2
1000447c:	d8800017 	ldw	r2,0(sp)
10004480:	9f000504 	addi	fp,r19,20
10004484:	14000504 	addi	r16,r2,20
10004488:	90003626 	beq	r18,zero,10004564 <quorem+0x15c>
1000448c:	802b883a 	mov	r21,r16
10004490:	e023883a 	mov	r17,fp
10004494:	0007883a 	mov	r3,zero
10004498:	002f883a 	mov	r23,zero
1000449c:	a9800017 	ldw	r6,0(r21)
100044a0:	900b883a 	mov	r5,r18
100044a4:	d8c00315 	stw	r3,12(sp)
100044a8:	313fffcc 	andi	r4,r6,65535
100044ac:	d9800215 	stw	r6,8(sp)
100044b0:	000b2bc0 	call	1000b2bc <__mulsi3>
100044b4:	d9800217 	ldw	r6,8(sp)
100044b8:	d8c00317 	ldw	r3,12(sp)
100044bc:	900b883a 	mov	r5,r18
100044c0:	3008d43a 	srli	r4,r6,16
100044c4:	1887883a 	add	r3,r3,r2
100044c8:	d8c00315 	stw	r3,12(sp)
100044cc:	000b2bc0 	call	1000b2bc <__mulsi3>
100044d0:	89400017 	ldw	r5,0(r17)
100044d4:	d8c00317 	ldw	r3,12(sp)
100044d8:	ad400104 	addi	r21,r21,4
100044dc:	293fffcc 	andi	r4,r5,65535
100044e0:	1810d43a 	srli	r8,r3,16
100044e4:	25c9883a 	add	r4,r4,r23
100044e8:	18ffffcc 	andi	r3,r3,65535
100044ec:	20c9c83a 	sub	r4,r4,r3
100044f0:	280cd43a 	srli	r6,r5,16
100044f4:	4085883a 	add	r2,r8,r2
100044f8:	2007d43a 	srai	r3,r4,16
100044fc:	117fffcc 	andi	r5,r2,65535
10004500:	314bc83a 	sub	r5,r6,r5
10004504:	28cb883a 	add	r5,r5,r3
10004508:	8940008d 	sth	r5,2(r17)
1000450c:	8900000d 	sth	r4,0(r17)
10004510:	1006d43a 	srli	r3,r2,16
10004514:	282fd43a 	srai	r23,r5,16
10004518:	8c400104 	addi	r17,r17,4
1000451c:	b57fdf2e 	bgeu	r22,r21,1000449c <__alt_data_end+0xf800449c>
10004520:	d8c00117 	ldw	r3,4(sp)
10004524:	18000f1e 	bne	r3,zero,10004564 <quorem+0x15c>
10004528:	a0800144 	addi	r2,r20,5
1000452c:	1085883a 	add	r2,r2,r2
10004530:	1085883a 	add	r2,r2,r2
10004534:	9887883a 	add	r3,r19,r2
10004538:	18bfff04 	addi	r2,r3,-4
1000453c:	e080082e 	bgeu	fp,r2,10004560 <quorem+0x158>
10004540:	18ffff17 	ldw	r3,-4(r3)
10004544:	18000326 	beq	r3,zero,10004554 <quorem+0x14c>
10004548:	00000506 	br	10004560 <quorem+0x158>
1000454c:	10c00017 	ldw	r3,0(r2)
10004550:	1800031e 	bne	r3,zero,10004560 <quorem+0x158>
10004554:	10bfff04 	addi	r2,r2,-4
10004558:	a53fffc4 	addi	r20,r20,-1
1000455c:	e0bffb36 	bltu	fp,r2,1000454c <__alt_data_end+0xf800454c>
10004560:	9d000415 	stw	r20,16(r19)
10004564:	d9400017 	ldw	r5,0(sp)
10004568:	9809883a 	mov	r4,r19
1000456c:	00083a80 	call	100083a8 <__mcmp>
10004570:	10002516 	blt	r2,zero,10004608 <quorem+0x200>
10004574:	94800044 	addi	r18,r18,1
10004578:	e007883a 	mov	r3,fp
1000457c:	000d883a 	mov	r6,zero
10004580:	18800017 	ldw	r2,0(r3)
10004584:	82000017 	ldw	r8,0(r16)
10004588:	84000104 	addi	r16,r16,4
1000458c:	11ffffcc 	andi	r7,r2,65535
10004590:	413fffcc 	andi	r4,r8,65535
10004594:	398d883a 	add	r6,r7,r6
10004598:	310fc83a 	sub	r7,r6,r4
1000459c:	4010d43a 	srli	r8,r8,16
100045a0:	100cd43a 	srli	r6,r2,16
100045a4:	3809d43a 	srai	r4,r7,16
100045a8:	19c0000d 	sth	r7,0(r3)
100045ac:	320dc83a 	sub	r6,r6,r8
100045b0:	310d883a 	add	r6,r6,r4
100045b4:	1980008d 	sth	r6,2(r3)
100045b8:	300dd43a 	srai	r6,r6,16
100045bc:	18c00104 	addi	r3,r3,4
100045c0:	b43fef2e 	bgeu	r22,r16,10004580 <__alt_data_end+0xf8004580>
100045c4:	a0800144 	addi	r2,r20,5
100045c8:	1085883a 	add	r2,r2,r2
100045cc:	1085883a 	add	r2,r2,r2
100045d0:	9885883a 	add	r2,r19,r2
100045d4:	10c00017 	ldw	r3,0(r2)
100045d8:	18000b1e 	bne	r3,zero,10004608 <quorem+0x200>
100045dc:	10ffff04 	addi	r3,r2,-4
100045e0:	e0c0082e 	bgeu	fp,r3,10004604 <quorem+0x1fc>
100045e4:	10bfff17 	ldw	r2,-4(r2)
100045e8:	10000326 	beq	r2,zero,100045f8 <quorem+0x1f0>
100045ec:	00000506 	br	10004604 <quorem+0x1fc>
100045f0:	18800017 	ldw	r2,0(r3)
100045f4:	1000031e 	bne	r2,zero,10004604 <quorem+0x1fc>
100045f8:	18ffff04 	addi	r3,r3,-4
100045fc:	a53fffc4 	addi	r20,r20,-1
10004600:	e0fffb36 	bltu	fp,r3,100045f0 <__alt_data_end+0xf80045f0>
10004604:	9d000415 	stw	r20,16(r19)
10004608:	9005883a 	mov	r2,r18
1000460c:	dfc00d17 	ldw	ra,52(sp)
10004610:	df000c17 	ldw	fp,48(sp)
10004614:	ddc00b17 	ldw	r23,44(sp)
10004618:	dd800a17 	ldw	r22,40(sp)
1000461c:	dd400917 	ldw	r21,36(sp)
10004620:	dd000817 	ldw	r20,32(sp)
10004624:	dcc00717 	ldw	r19,28(sp)
10004628:	dc800617 	ldw	r18,24(sp)
1000462c:	dc400517 	ldw	r17,20(sp)
10004630:	dc000417 	ldw	r16,16(sp)
10004634:	dec00e04 	addi	sp,sp,56
10004638:	f800283a 	ret
1000463c:	0005883a 	mov	r2,zero
10004640:	003ff206 	br	1000460c <__alt_data_end+0xf800460c>

10004644 <_dtoa_r>:
10004644:	20801017 	ldw	r2,64(r4)
10004648:	deffdf04 	addi	sp,sp,-132
1000464c:	dcc01a15 	stw	r19,104(sp)
10004650:	dc801915 	stw	r18,100(sp)
10004654:	dc401815 	stw	r17,96(sp)
10004658:	dc001715 	stw	r16,92(sp)
1000465c:	dfc02015 	stw	ra,128(sp)
10004660:	df001f15 	stw	fp,124(sp)
10004664:	ddc01e15 	stw	r23,120(sp)
10004668:	dd801d15 	stw	r22,116(sp)
1000466c:	dd401c15 	stw	r21,112(sp)
10004670:	dd001b15 	stw	r20,108(sp)
10004674:	d9400315 	stw	r5,12(sp)
10004678:	d9c00415 	stw	r7,16(sp)
1000467c:	2021883a 	mov	r16,r4
10004680:	3025883a 	mov	r18,r6
10004684:	dcc02317 	ldw	r19,140(sp)
10004688:	3023883a 	mov	r17,r6
1000468c:	10000826 	beq	r2,zero,100046b0 <_dtoa_r+0x6c>
10004690:	20c01117 	ldw	r3,68(r4)
10004694:	01800044 	movi	r6,1
10004698:	100b883a 	mov	r5,r2
1000469c:	30cc983a 	sll	r6,r6,r3
100046a0:	10c00115 	stw	r3,4(r2)
100046a4:	11800215 	stw	r6,8(r2)
100046a8:	0007b040 	call	10007b04 <_Bfree>
100046ac:	80001015 	stw	zero,64(r16)
100046b0:	90002f16 	blt	r18,zero,10004770 <_dtoa_r+0x12c>
100046b4:	98000015 	stw	zero,0(r19)
100046b8:	90dffc2c 	andhi	r3,r18,32752
100046bc:	009ffc34 	movhi	r2,32752
100046c0:	18801c26 	beq	r3,r2,10004734 <_dtoa_r+0xf0>
100046c4:	d9000317 	ldw	r4,12(sp)
100046c8:	880b883a 	mov	r5,r17
100046cc:	000d883a 	mov	r6,zero
100046d0:	000f883a 	mov	r7,zero
100046d4:	000ad580 	call	1000ad58 <__nedf2>
100046d8:	10002c1e 	bne	r2,zero,1000478c <_dtoa_r+0x148>
100046dc:	d9002217 	ldw	r4,136(sp)
100046e0:	d9c02417 	ldw	r7,144(sp)
100046e4:	00800044 	movi	r2,1
100046e8:	20800015 	stw	r2,0(r4)
100046ec:	38019426 	beq	r7,zero,10004d40 <_dtoa_r+0x6fc>
100046f0:	00840074 	movhi	r2,4097
100046f4:	10ba4344 	addi	r2,r2,-5875
100046f8:	38800015 	stw	r2,0(r7)
100046fc:	15ffffc4 	addi	r23,r2,-1
10004700:	b805883a 	mov	r2,r23
10004704:	dfc02017 	ldw	ra,128(sp)
10004708:	df001f17 	ldw	fp,124(sp)
1000470c:	ddc01e17 	ldw	r23,120(sp)
10004710:	dd801d17 	ldw	r22,116(sp)
10004714:	dd401c17 	ldw	r21,112(sp)
10004718:	dd001b17 	ldw	r20,108(sp)
1000471c:	dcc01a17 	ldw	r19,104(sp)
10004720:	dc801917 	ldw	r18,100(sp)
10004724:	dc401817 	ldw	r17,96(sp)
10004728:	dc001717 	ldw	r16,92(sp)
1000472c:	dec02104 	addi	sp,sp,132
10004730:	f800283a 	ret
10004734:	d8c02217 	ldw	r3,136(sp)
10004738:	d9000317 	ldw	r4,12(sp)
1000473c:	0089c3c4 	movi	r2,9999
10004740:	18800015 	stw	r2,0(r3)
10004744:	20016c26 	beq	r4,zero,10004cf8 <_dtoa_r+0x6b4>
10004748:	05c40074 	movhi	r23,4097
1000474c:	bdfa4f04 	addi	r23,r23,-5828
10004750:	d9c02417 	ldw	r7,144(sp)
10004754:	383fea26 	beq	r7,zero,10004700 <__alt_data_end+0xf8004700>
10004758:	b88000c7 	ldb	r2,3(r23)
1000475c:	10016d1e 	bne	r2,zero,10004d14 <_dtoa_r+0x6d0>
10004760:	b88000c4 	addi	r2,r23,3
10004764:	d8c02417 	ldw	r3,144(sp)
10004768:	18800015 	stw	r2,0(r3)
1000476c:	003fe406 	br	10004700 <__alt_data_end+0xf8004700>
10004770:	04600034 	movhi	r17,32768
10004774:	8c7fffc4 	addi	r17,r17,-1
10004778:	9462703a 	and	r17,r18,r17
1000477c:	00800044 	movi	r2,1
10004780:	98800015 	stw	r2,0(r19)
10004784:	8825883a 	mov	r18,r17
10004788:	003fcb06 	br	100046b8 <__alt_data_end+0xf80046b8>
1000478c:	d9400317 	ldw	r5,12(sp)
10004790:	9028d53a 	srli	r20,r18,20
10004794:	d8800204 	addi	r2,sp,8
10004798:	d8800015 	stw	r2,0(sp)
1000479c:	8009883a 	mov	r4,r16
100047a0:	880d883a 	mov	r6,r17
100047a4:	d9c00104 	addi	r7,sp,4
100047a8:	00087500 	call	10008750 <__d2b>
100047ac:	a501ffcc 	andi	r20,r20,2047
100047b0:	1039883a 	mov	fp,r2
100047b4:	a001591e 	bne	r20,zero,10004d1c <_dtoa_r+0x6d8>
100047b8:	dd400217 	ldw	r21,8(sp)
100047bc:	dd000117 	ldw	r20,4(sp)
100047c0:	00befbc4 	movi	r2,-1041
100047c4:	ad29883a 	add	r20,r21,r20
100047c8:	a082d216 	blt	r20,r2,10005314 <_dtoa_r+0xcd0>
100047cc:	d8c00317 	ldw	r3,12(sp)
100047d0:	013f0384 	movi	r4,-1010
100047d4:	2509c83a 	sub	r4,r4,r20
100047d8:	a0810484 	addi	r2,r20,1042
100047dc:	9124983a 	sll	r18,r18,r4
100047e0:	1884d83a 	srl	r2,r3,r2
100047e4:	9088b03a 	or	r4,r18,r2
100047e8:	000b0700 	call	1000b070 <__floatunsidf>
100047ec:	1009883a 	mov	r4,r2
100047f0:	017f8434 	movhi	r5,65040
100047f4:	00800044 	movi	r2,1
100047f8:	194b883a 	add	r5,r3,r5
100047fc:	a53fffc4 	addi	r20,r20,-1
10004800:	d8800f15 	stw	r2,60(sp)
10004804:	000d883a 	mov	r6,zero
10004808:	01cffe34 	movhi	r7,16376
1000480c:	000a8040 	call	1000a804 <__subdf3>
10004810:	1009883a 	mov	r4,r2
10004814:	180b883a 	mov	r5,r3
10004818:	0198dbf4 	movhi	r6,25455
1000481c:	3190d844 	addi	r6,r6,17249
10004820:	01cff4f4 	movhi	r7,16339
10004824:	39e1e9c4 	addi	r7,r7,-30809
10004828:	000a8640 	call	1000a864 <__muldf3>
1000482c:	180b883a 	mov	r5,r3
10004830:	01a2d874 	movhi	r6,35681
10004834:	31b22cc4 	addi	r6,r6,-14157
10004838:	01cff1f4 	movhi	r7,16327
1000483c:	39e28a04 	addi	r7,r7,-30168
10004840:	1009883a 	mov	r4,r2
10004844:	000a7b00 	call	1000a7b0 <__adddf3>
10004848:	a009883a 	mov	r4,r20
1000484c:	1027883a 	mov	r19,r2
10004850:	1825883a 	mov	r18,r3
10004854:	000aed80 	call	1000aed8 <__floatsidf>
10004858:	1009883a 	mov	r4,r2
1000485c:	180b883a 	mov	r5,r3
10004860:	019427f4 	movhi	r6,20639
10004864:	319e7ec4 	addi	r6,r6,31227
10004868:	01cff4f4 	movhi	r7,16339
1000486c:	39d104c4 	addi	r7,r7,17427
10004870:	000a8640 	call	1000a864 <__muldf3>
10004874:	9809883a 	mov	r4,r19
10004878:	900b883a 	mov	r5,r18
1000487c:	100d883a 	mov	r6,r2
10004880:	180f883a 	mov	r7,r3
10004884:	000a7b00 	call	1000a7b0 <__adddf3>
10004888:	1009883a 	mov	r4,r2
1000488c:	180b883a 	mov	r5,r3
10004890:	1027883a 	mov	r19,r2
10004894:	1825883a 	mov	r18,r3
10004898:	000afac0 	call	1000afac <__fixdfsi>
1000489c:	9809883a 	mov	r4,r19
100048a0:	900b883a 	mov	r5,r18
100048a4:	000d883a 	mov	r6,zero
100048a8:	000f883a 	mov	r7,zero
100048ac:	d8800615 	stw	r2,24(sp)
100048b0:	000ae7c0 	call	1000ae7c <__ltdf2>
100048b4:	10027e16 	blt	r2,zero,100052b0 <_dtoa_r+0xc6c>
100048b8:	d8c00617 	ldw	r3,24(sp)
100048bc:	00800584 	movi	r2,22
100048c0:	10c26c36 	bltu	r2,r3,10005274 <_dtoa_r+0xc30>
100048c4:	180490fa 	slli	r2,r3,3
100048c8:	00c40074 	movhi	r3,4097
100048cc:	18fa7504 	addi	r3,r3,-5676
100048d0:	d9800317 	ldw	r6,12(sp)
100048d4:	1885883a 	add	r2,r3,r2
100048d8:	11000017 	ldw	r4,0(r2)
100048dc:	11400117 	ldw	r5,4(r2)
100048e0:	880f883a 	mov	r7,r17
100048e4:	000adb40 	call	1000adb4 <__gtdf2>
100048e8:	00828f0e 	bge	zero,r2,10005328 <_dtoa_r+0xce4>
100048ec:	d8800617 	ldw	r2,24(sp)
100048f0:	d8000d15 	stw	zero,52(sp)
100048f4:	10bfffc4 	addi	r2,r2,-1
100048f8:	d8800615 	stw	r2,24(sp)
100048fc:	ad29c83a 	sub	r20,r21,r20
10004900:	a53fffc4 	addi	r20,r20,-1
10004904:	a0026616 	blt	r20,zero,100052a0 <_dtoa_r+0xc5c>
10004908:	dd000715 	stw	r20,28(sp)
1000490c:	d8000815 	stw	zero,32(sp)
10004910:	d8800617 	ldw	r2,24(sp)
10004914:	10025a16 	blt	r2,zero,10005280 <_dtoa_r+0xc3c>
10004918:	d8c00717 	ldw	r3,28(sp)
1000491c:	d8800b15 	stw	r2,44(sp)
10004920:	d8000a15 	stw	zero,40(sp)
10004924:	1887883a 	add	r3,r3,r2
10004928:	d8c00715 	stw	r3,28(sp)
1000492c:	d9c00417 	ldw	r7,16(sp)
10004930:	00800244 	movi	r2,9
10004934:	11c10536 	bltu	r2,r7,10004d4c <_dtoa_r+0x708>
10004938:	00800144 	movi	r2,5
1000493c:	11c4c60e 	bge	r2,r7,10005c58 <_dtoa_r+0x1614>
10004940:	39ffff04 	addi	r7,r7,-4
10004944:	d9c00415 	stw	r7,16(sp)
10004948:	0027883a 	mov	r19,zero
1000494c:	d9c00417 	ldw	r7,16(sp)
10004950:	008000c4 	movi	r2,3
10004954:	3883a226 	beq	r7,r2,100057e0 <_dtoa_r+0x119c>
10004958:	11c2bc16 	blt	r2,r7,1000544c <_dtoa_r+0xe08>
1000495c:	00800084 	movi	r2,2
10004960:	3880fb1e 	bne	r7,r2,10004d50 <_dtoa_r+0x70c>
10004964:	d8000c15 	stw	zero,48(sp)
10004968:	d9002117 	ldw	r4,132(sp)
1000496c:	0103ae0e 	bge	zero,r4,10005828 <_dtoa_r+0x11e4>
10004970:	2025883a 	mov	r18,r4
10004974:	d9000e15 	stw	r4,56(sp)
10004978:	d9000915 	stw	r4,36(sp)
1000497c:	80001115 	stw	zero,68(r16)
10004980:	008005c4 	movi	r2,23
10004984:	1484b22e 	bgeu	r2,r18,10005c50 <_dtoa_r+0x160c>
10004988:	00c00044 	movi	r3,1
1000498c:	00800104 	movi	r2,4
10004990:	1085883a 	add	r2,r2,r2
10004994:	11000504 	addi	r4,r2,20
10004998:	180b883a 	mov	r5,r3
1000499c:	18c00044 	addi	r3,r3,1
100049a0:	913ffb2e 	bgeu	r18,r4,10004990 <__alt_data_end+0xf8004990>
100049a4:	81401115 	stw	r5,68(r16)
100049a8:	8009883a 	mov	r4,r16
100049ac:	0007a5c0 	call	10007a5c <_Balloc>
100049b0:	102f883a 	mov	r23,r2
100049b4:	80801015 	stw	r2,64(r16)
100049b8:	00800384 	movi	r2,14
100049bc:	1480f036 	bltu	r2,r18,10004d80 <_dtoa_r+0x73c>
100049c0:	9800ef26 	beq	r19,zero,10004d80 <_dtoa_r+0x73c>
100049c4:	d8800617 	ldw	r2,24(sp)
100049c8:	00839c0e 	bge	zero,r2,1000583c <_dtoa_r+0x11f8>
100049cc:	d8c00617 	ldw	r3,24(sp)
100049d0:	108003cc 	andi	r2,r2,15
100049d4:	100490fa 	slli	r2,r2,3
100049d8:	182bd13a 	srai	r21,r3,4
100049dc:	00c40074 	movhi	r3,4097
100049e0:	18fa7504 	addi	r3,r3,-5676
100049e4:	1885883a 	add	r2,r3,r2
100049e8:	a8c0040c 	andi	r3,r21,16
100049ec:	12800017 	ldw	r10,0(r2)
100049f0:	15800117 	ldw	r22,4(r2)
100049f4:	18038726 	beq	r3,zero,10005814 <_dtoa_r+0x11d0>
100049f8:	00840074 	movhi	r2,4097
100049fc:	10ba6b04 	addi	r2,r2,-5716
10004a00:	11800817 	ldw	r6,32(r2)
10004a04:	11c00917 	ldw	r7,36(r2)
10004a08:	d9000317 	ldw	r4,12(sp)
10004a0c:	880b883a 	mov	r5,r17
10004a10:	da801515 	stw	r10,84(sp)
10004a14:	000ab480 	call	1000ab48 <__divdf3>
10004a18:	da801517 	ldw	r10,84(sp)
10004a1c:	d8801015 	stw	r2,64(sp)
10004a20:	1829883a 	mov	r20,r3
10004a24:	ad4003cc 	andi	r21,r21,15
10004a28:	048000c4 	movi	r18,3
10004a2c:	a8001126 	beq	r21,zero,10004a74 <_dtoa_r+0x430>
10004a30:	04c40074 	movhi	r19,4097
10004a34:	9cfa6b04 	addi	r19,r19,-5716
10004a38:	5005883a 	mov	r2,r10
10004a3c:	b007883a 	mov	r3,r22
10004a40:	a980004c 	andi	r6,r21,1
10004a44:	1009883a 	mov	r4,r2
10004a48:	a82bd07a 	srai	r21,r21,1
10004a4c:	180b883a 	mov	r5,r3
10004a50:	30000426 	beq	r6,zero,10004a64 <_dtoa_r+0x420>
10004a54:	99800017 	ldw	r6,0(r19)
10004a58:	99c00117 	ldw	r7,4(r19)
10004a5c:	94800044 	addi	r18,r18,1
10004a60:	000a8640 	call	1000a864 <__muldf3>
10004a64:	9cc00204 	addi	r19,r19,8
10004a68:	a83ff51e 	bne	r21,zero,10004a40 <__alt_data_end+0xf8004a40>
10004a6c:	1015883a 	mov	r10,r2
10004a70:	182d883a 	mov	r22,r3
10004a74:	d9001017 	ldw	r4,64(sp)
10004a78:	a00b883a 	mov	r5,r20
10004a7c:	500d883a 	mov	r6,r10
10004a80:	b00f883a 	mov	r7,r22
10004a84:	000ab480 	call	1000ab48 <__divdf3>
10004a88:	1027883a 	mov	r19,r2
10004a8c:	1829883a 	mov	r20,r3
10004a90:	d8c00d17 	ldw	r3,52(sp)
10004a94:	18000626 	beq	r3,zero,10004ab0 <_dtoa_r+0x46c>
10004a98:	9809883a 	mov	r4,r19
10004a9c:	a00b883a 	mov	r5,r20
10004aa0:	000d883a 	mov	r6,zero
10004aa4:	01cffc34 	movhi	r7,16368
10004aa8:	000ae7c0 	call	1000ae7c <__ltdf2>
10004aac:	10040e16 	blt	r2,zero,10005ae8 <_dtoa_r+0x14a4>
10004ab0:	9009883a 	mov	r4,r18
10004ab4:	000aed80 	call	1000aed8 <__floatsidf>
10004ab8:	1009883a 	mov	r4,r2
10004abc:	180b883a 	mov	r5,r3
10004ac0:	980d883a 	mov	r6,r19
10004ac4:	a00f883a 	mov	r7,r20
10004ac8:	000a8640 	call	1000a864 <__muldf3>
10004acc:	1009883a 	mov	r4,r2
10004ad0:	180b883a 	mov	r5,r3
10004ad4:	000d883a 	mov	r6,zero
10004ad8:	01d00734 	movhi	r7,16412
10004adc:	000a7b00 	call	1000a7b0 <__adddf3>
10004ae0:	057f3034 	movhi	r21,64704
10004ae4:	1d6b883a 	add	r21,r3,r21
10004ae8:	d8c00917 	ldw	r3,36(sp)
10004aec:	1025883a 	mov	r18,r2
10004af0:	18031f26 	beq	r3,zero,10005770 <_dtoa_r+0x112c>
10004af4:	d8800617 	ldw	r2,24(sp)
10004af8:	dac00917 	ldw	r11,36(sp)
10004afc:	d8801315 	stw	r2,76(sp)
10004b00:	d8c00c17 	ldw	r3,48(sp)
10004b04:	18039026 	beq	r3,zero,10005948 <_dtoa_r+0x1304>
10004b08:	58bfffc4 	addi	r2,r11,-1
10004b0c:	100490fa 	slli	r2,r2,3
10004b10:	00c40074 	movhi	r3,4097
10004b14:	18fa7504 	addi	r3,r3,-5676
10004b18:	0009883a 	mov	r4,zero
10004b1c:	1885883a 	add	r2,r3,r2
10004b20:	11800017 	ldw	r6,0(r2)
10004b24:	11c00117 	ldw	r7,4(r2)
10004b28:	014ff834 	movhi	r5,16352
10004b2c:	dac01615 	stw	r11,88(sp)
10004b30:	000ab480 	call	1000ab48 <__divdf3>
10004b34:	900d883a 	mov	r6,r18
10004b38:	a80f883a 	mov	r7,r21
10004b3c:	1009883a 	mov	r4,r2
10004b40:	180b883a 	mov	r5,r3
10004b44:	000a8040 	call	1000a804 <__subdf3>
10004b48:	a00b883a 	mov	r5,r20
10004b4c:	9809883a 	mov	r4,r19
10004b50:	182b883a 	mov	r21,r3
10004b54:	d8801015 	stw	r2,64(sp)
10004b58:	000afac0 	call	1000afac <__fixdfsi>
10004b5c:	1009883a 	mov	r4,r2
10004b60:	d8801515 	stw	r2,84(sp)
10004b64:	000aed80 	call	1000aed8 <__floatsidf>
10004b68:	9809883a 	mov	r4,r19
10004b6c:	a00b883a 	mov	r5,r20
10004b70:	100d883a 	mov	r6,r2
10004b74:	180f883a 	mov	r7,r3
10004b78:	000a8040 	call	1000a804 <__subdf3>
10004b7c:	da401517 	ldw	r9,84(sp)
10004b80:	d9001017 	ldw	r4,64(sp)
10004b84:	a80b883a 	mov	r5,r21
10004b88:	4d000c04 	addi	r20,r9,48
10004b8c:	bd000005 	stb	r20,0(r23)
10004b90:	100d883a 	mov	r6,r2
10004b94:	180f883a 	mov	r7,r3
10004b98:	bd800044 	addi	r22,r23,1
10004b9c:	1025883a 	mov	r18,r2
10004ba0:	1827883a 	mov	r19,r3
10004ba4:	000adb40 	call	1000adb4 <__gtdf2>
10004ba8:	00842216 	blt	zero,r2,10005c34 <_dtoa_r+0x15f0>
10004bac:	0009883a 	mov	r4,zero
10004bb0:	014ffc34 	movhi	r5,16368
10004bb4:	900d883a 	mov	r6,r18
10004bb8:	980f883a 	mov	r7,r19
10004bbc:	000a8040 	call	1000a804 <__subdf3>
10004bc0:	d9001017 	ldw	r4,64(sp)
10004bc4:	a80b883a 	mov	r5,r21
10004bc8:	100d883a 	mov	r6,r2
10004bcc:	180f883a 	mov	r7,r3
10004bd0:	000adb40 	call	1000adb4 <__gtdf2>
10004bd4:	dac01617 	ldw	r11,88(sp)
10004bd8:	00841316 	blt	zero,r2,10005c28 <_dtoa_r+0x15e4>
10004bdc:	00800044 	movi	r2,1
10004be0:	12c0670e 	bge	r2,r11,10004d80 <_dtoa_r+0x73c>
10004be4:	bad7883a 	add	r11,r23,r11
10004be8:	df001115 	stw	fp,68(sp)
10004bec:	dc401215 	stw	r17,72(sp)
10004bf0:	5839883a 	mov	fp,r11
10004bf4:	dc401017 	ldw	r17,64(sp)
10004bf8:	00000806 	br	10004c1c <_dtoa_r+0x5d8>
10004bfc:	000a8040 	call	1000a804 <__subdf3>
10004c00:	1009883a 	mov	r4,r2
10004c04:	180b883a 	mov	r5,r3
10004c08:	880d883a 	mov	r6,r17
10004c0c:	a80f883a 	mov	r7,r21
10004c10:	000ae7c0 	call	1000ae7c <__ltdf2>
10004c14:	1003ee16 	blt	r2,zero,10005bd0 <_dtoa_r+0x158c>
10004c18:	b703f126 	beq	r22,fp,10005be0 <_dtoa_r+0x159c>
10004c1c:	8809883a 	mov	r4,r17
10004c20:	a80b883a 	mov	r5,r21
10004c24:	000d883a 	mov	r6,zero
10004c28:	01d00934 	movhi	r7,16420
10004c2c:	000a8640 	call	1000a864 <__muldf3>
10004c30:	000d883a 	mov	r6,zero
10004c34:	01d00934 	movhi	r7,16420
10004c38:	9009883a 	mov	r4,r18
10004c3c:	980b883a 	mov	r5,r19
10004c40:	1023883a 	mov	r17,r2
10004c44:	182b883a 	mov	r21,r3
10004c48:	000a8640 	call	1000a864 <__muldf3>
10004c4c:	180b883a 	mov	r5,r3
10004c50:	1009883a 	mov	r4,r2
10004c54:	1825883a 	mov	r18,r3
10004c58:	1027883a 	mov	r19,r2
10004c5c:	000afac0 	call	1000afac <__fixdfsi>
10004c60:	1009883a 	mov	r4,r2
10004c64:	1029883a 	mov	r20,r2
10004c68:	000aed80 	call	1000aed8 <__floatsidf>
10004c6c:	9809883a 	mov	r4,r19
10004c70:	900b883a 	mov	r5,r18
10004c74:	100d883a 	mov	r6,r2
10004c78:	180f883a 	mov	r7,r3
10004c7c:	000a8040 	call	1000a804 <__subdf3>
10004c80:	a5000c04 	addi	r20,r20,48
10004c84:	b5000005 	stb	r20,0(r22)
10004c88:	1009883a 	mov	r4,r2
10004c8c:	180b883a 	mov	r5,r3
10004c90:	880d883a 	mov	r6,r17
10004c94:	a80f883a 	mov	r7,r21
10004c98:	1025883a 	mov	r18,r2
10004c9c:	1827883a 	mov	r19,r3
10004ca0:	000ae7c0 	call	1000ae7c <__ltdf2>
10004ca4:	b5800044 	addi	r22,r22,1
10004ca8:	0009883a 	mov	r4,zero
10004cac:	014ffc34 	movhi	r5,16368
10004cb0:	900d883a 	mov	r6,r18
10004cb4:	980f883a 	mov	r7,r19
10004cb8:	103fd00e 	bge	r2,zero,10004bfc <__alt_data_end+0xf8004bfc>
10004cbc:	d9001317 	ldw	r4,76(sp)
10004cc0:	df001117 	ldw	fp,68(sp)
10004cc4:	d9000615 	stw	r4,24(sp)
10004cc8:	8009883a 	mov	r4,r16
10004ccc:	e00b883a 	mov	r5,fp
10004cd0:	0007b040 	call	10007b04 <_Bfree>
10004cd4:	d9c00617 	ldw	r7,24(sp)
10004cd8:	d8c02217 	ldw	r3,136(sp)
10004cdc:	d9002417 	ldw	r4,144(sp)
10004ce0:	b0000005 	stb	zero,0(r22)
10004ce4:	38800044 	addi	r2,r7,1
10004ce8:	18800015 	stw	r2,0(r3)
10004cec:	203e8426 	beq	r4,zero,10004700 <__alt_data_end+0xf8004700>
10004cf0:	25800015 	stw	r22,0(r4)
10004cf4:	003e8206 	br	10004700 <__alt_data_end+0xf8004700>
10004cf8:	00800434 	movhi	r2,16
10004cfc:	10bfffc4 	addi	r2,r2,-1
10004d00:	90a4703a 	and	r18,r18,r2
10004d04:	903e901e 	bne	r18,zero,10004748 <__alt_data_end+0xf8004748>
10004d08:	05c40074 	movhi	r23,4097
10004d0c:	bdfa4c04 	addi	r23,r23,-5840
10004d10:	003e8f06 	br	10004750 <__alt_data_end+0xf8004750>
10004d14:	b8800204 	addi	r2,r23,8
10004d18:	003e9206 	br	10004764 <__alt_data_end+0xf8004764>
10004d1c:	01400434 	movhi	r5,16
10004d20:	297fffc4 	addi	r5,r5,-1
10004d24:	894a703a 	and	r5,r17,r5
10004d28:	d9000317 	ldw	r4,12(sp)
10004d2c:	294ffc34 	orhi	r5,r5,16368
10004d30:	a53f0044 	addi	r20,r20,-1023
10004d34:	dd400217 	ldw	r21,8(sp)
10004d38:	d8000f15 	stw	zero,60(sp)
10004d3c:	003eb106 	br	10004804 <__alt_data_end+0xf8004804>
10004d40:	05c40074 	movhi	r23,4097
10004d44:	bdfa4304 	addi	r23,r23,-5876
10004d48:	003e6d06 	br	10004700 <__alt_data_end+0xf8004700>
10004d4c:	d8000415 	stw	zero,16(sp)
10004d50:	80001115 	stw	zero,68(r16)
10004d54:	8009883a 	mov	r4,r16
10004d58:	000b883a 	mov	r5,zero
10004d5c:	0007a5c0 	call	10007a5c <_Balloc>
10004d60:	01ffffc4 	movi	r7,-1
10004d64:	102f883a 	mov	r23,r2
10004d68:	80801015 	stw	r2,64(r16)
10004d6c:	00800044 	movi	r2,1
10004d70:	d9c00915 	stw	r7,36(sp)
10004d74:	d8002115 	stw	zero,132(sp)
10004d78:	d9c00e15 	stw	r7,56(sp)
10004d7c:	d8800c15 	stw	r2,48(sp)
10004d80:	d8800117 	ldw	r2,4(sp)
10004d84:	10008b16 	blt	r2,zero,10004fb4 <_dtoa_r+0x970>
10004d88:	d9000617 	ldw	r4,24(sp)
10004d8c:	00c00384 	movi	r3,14
10004d90:	19008816 	blt	r3,r4,10004fb4 <_dtoa_r+0x970>
10004d94:	200490fa 	slli	r2,r4,3
10004d98:	d9c02117 	ldw	r7,132(sp)
10004d9c:	00c40074 	movhi	r3,4097
10004da0:	18fa7504 	addi	r3,r3,-5676
10004da4:	1885883a 	add	r2,r3,r2
10004da8:	14800017 	ldw	r18,0(r2)
10004dac:	14c00117 	ldw	r19,4(r2)
10004db0:	3801c916 	blt	r7,zero,100054d8 <_dtoa_r+0xe94>
10004db4:	d9000317 	ldw	r4,12(sp)
10004db8:	900d883a 	mov	r6,r18
10004dbc:	980f883a 	mov	r7,r19
10004dc0:	880b883a 	mov	r5,r17
10004dc4:	000ab480 	call	1000ab48 <__divdf3>
10004dc8:	180b883a 	mov	r5,r3
10004dcc:	1009883a 	mov	r4,r2
10004dd0:	000afac0 	call	1000afac <__fixdfsi>
10004dd4:	1009883a 	mov	r4,r2
10004dd8:	102b883a 	mov	r21,r2
10004ddc:	000aed80 	call	1000aed8 <__floatsidf>
10004de0:	1009883a 	mov	r4,r2
10004de4:	180b883a 	mov	r5,r3
10004de8:	900d883a 	mov	r6,r18
10004dec:	980f883a 	mov	r7,r19
10004df0:	000a8640 	call	1000a864 <__muldf3>
10004df4:	d9000317 	ldw	r4,12(sp)
10004df8:	880b883a 	mov	r5,r17
10004dfc:	100d883a 	mov	r6,r2
10004e00:	180f883a 	mov	r7,r3
10004e04:	000a8040 	call	1000a804 <__subdf3>
10004e08:	d9c00917 	ldw	r7,36(sp)
10004e0c:	1009883a 	mov	r4,r2
10004e10:	a8800c04 	addi	r2,r21,48
10004e14:	b8800005 	stb	r2,0(r23)
10004e18:	01800044 	movi	r6,1
10004e1c:	180b883a 	mov	r5,r3
10004e20:	2005883a 	mov	r2,r4
10004e24:	bd800044 	addi	r22,r23,1
10004e28:	39803726 	beq	r7,r6,10004f08 <_dtoa_r+0x8c4>
10004e2c:	000d883a 	mov	r6,zero
10004e30:	01d00934 	movhi	r7,16420
10004e34:	000a8640 	call	1000a864 <__muldf3>
10004e38:	1009883a 	mov	r4,r2
10004e3c:	180b883a 	mov	r5,r3
10004e40:	000d883a 	mov	r6,zero
10004e44:	000f883a 	mov	r7,zero
10004e48:	1029883a 	mov	r20,r2
10004e4c:	1823883a 	mov	r17,r3
10004e50:	000acfc0 	call	1000acfc <__eqdf2>
10004e54:	103f9c26 	beq	r2,zero,10004cc8 <__alt_data_end+0xf8004cc8>
10004e58:	dd400917 	ldw	r21,36(sp)
10004e5c:	dc000415 	stw	r16,16(sp)
10004e60:	00000906 	br	10004e88 <_dtoa_r+0x844>
10004e64:	000a8640 	call	1000a864 <__muldf3>
10004e68:	1009883a 	mov	r4,r2
10004e6c:	180b883a 	mov	r5,r3
10004e70:	000d883a 	mov	r6,zero
10004e74:	000f883a 	mov	r7,zero
10004e78:	1029883a 	mov	r20,r2
10004e7c:	1823883a 	mov	r17,r3
10004e80:	000acfc0 	call	1000acfc <__eqdf2>
10004e84:	10022926 	beq	r2,zero,1000572c <_dtoa_r+0x10e8>
10004e88:	900d883a 	mov	r6,r18
10004e8c:	980f883a 	mov	r7,r19
10004e90:	a009883a 	mov	r4,r20
10004e94:	880b883a 	mov	r5,r17
10004e98:	000ab480 	call	1000ab48 <__divdf3>
10004e9c:	180b883a 	mov	r5,r3
10004ea0:	1009883a 	mov	r4,r2
10004ea4:	000afac0 	call	1000afac <__fixdfsi>
10004ea8:	1009883a 	mov	r4,r2
10004eac:	1021883a 	mov	r16,r2
10004eb0:	000aed80 	call	1000aed8 <__floatsidf>
10004eb4:	1009883a 	mov	r4,r2
10004eb8:	180b883a 	mov	r5,r3
10004ebc:	900d883a 	mov	r6,r18
10004ec0:	980f883a 	mov	r7,r19
10004ec4:	000a8640 	call	1000a864 <__muldf3>
10004ec8:	a009883a 	mov	r4,r20
10004ecc:	880b883a 	mov	r5,r17
10004ed0:	100d883a 	mov	r6,r2
10004ed4:	180f883a 	mov	r7,r3
10004ed8:	000a8040 	call	1000a804 <__subdf3>
10004edc:	82400c04 	addi	r9,r16,48
10004ee0:	b2400005 	stb	r9,0(r22)
10004ee4:	b5800044 	addi	r22,r22,1
10004ee8:	b5d3c83a 	sub	r9,r22,r23
10004eec:	000d883a 	mov	r6,zero
10004ef0:	01d00934 	movhi	r7,16420
10004ef4:	1009883a 	mov	r4,r2
10004ef8:	180b883a 	mov	r5,r3
10004efc:	aa7fd91e 	bne	r21,r9,10004e64 <__alt_data_end+0xf8004e64>
10004f00:	802b883a 	mov	r21,r16
10004f04:	dc000417 	ldw	r16,16(sp)
10004f08:	1009883a 	mov	r4,r2
10004f0c:	180b883a 	mov	r5,r3
10004f10:	100d883a 	mov	r6,r2
10004f14:	180f883a 	mov	r7,r3
10004f18:	000a7b00 	call	1000a7b0 <__adddf3>
10004f1c:	9009883a 	mov	r4,r18
10004f20:	980b883a 	mov	r5,r19
10004f24:	100d883a 	mov	r6,r2
10004f28:	180f883a 	mov	r7,r3
10004f2c:	1023883a 	mov	r17,r2
10004f30:	1829883a 	mov	r20,r3
10004f34:	000ae7c0 	call	1000ae7c <__ltdf2>
10004f38:	10000816 	blt	r2,zero,10004f5c <_dtoa_r+0x918>
10004f3c:	9009883a 	mov	r4,r18
10004f40:	980b883a 	mov	r5,r19
10004f44:	880d883a 	mov	r6,r17
10004f48:	a00f883a 	mov	r7,r20
10004f4c:	000ad580 	call	1000ad58 <__nedf2>
10004f50:	103f5d1e 	bne	r2,zero,10004cc8 <__alt_data_end+0xf8004cc8>
10004f54:	ad40004c 	andi	r21,r21,1
10004f58:	a83f5b26 	beq	r21,zero,10004cc8 <__alt_data_end+0xf8004cc8>
10004f5c:	b53fffc3 	ldbu	r20,-1(r22)
10004f60:	b0ffff84 	addi	r3,r22,-2
10004f64:	01400e44 	movi	r5,57
10004f68:	00000306 	br	10004f78 <_dtoa_r+0x934>
10004f6c:	1d000003 	ldbu	r20,0(r3)
10004f70:	102d883a 	mov	r22,r2
10004f74:	18ffffc4 	addi	r3,r3,-1
10004f78:	a1003fcc 	andi	r4,r20,255
10004f7c:	2100201c 	xori	r4,r4,128
10004f80:	213fe004 	addi	r4,r4,-128
10004f84:	b0bfffc4 	addi	r2,r22,-1
10004f88:	2142ca1e 	bne	r4,r5,10005ab4 <_dtoa_r+0x1470>
10004f8c:	b8bff71e 	bne	r23,r2,10004f6c <__alt_data_end+0xf8004f6c>
10004f90:	d8800617 	ldw	r2,24(sp)
10004f94:	05000c44 	movi	r20,49
10004f98:	10800044 	addi	r2,r2,1
10004f9c:	d8800615 	stw	r2,24(sp)
10004fa0:	00800c04 	movi	r2,48
10004fa4:	b8800005 	stb	r2,0(r23)
10004fa8:	b805883a 	mov	r2,r23
10004fac:	15000005 	stb	r20,0(r2)
10004fb0:	003f4506 	br	10004cc8 <__alt_data_end+0xf8004cc8>
10004fb4:	d9c00c17 	ldw	r7,48(sp)
10004fb8:	3800c926 	beq	r7,zero,100052e0 <_dtoa_r+0xc9c>
10004fbc:	d9c00417 	ldw	r7,16(sp)
10004fc0:	00c00044 	movi	r3,1
10004fc4:	19c16c0e 	bge	r3,r7,10005578 <_dtoa_r+0xf34>
10004fc8:	d9000917 	ldw	r4,36(sp)
10004fcc:	d9c00a17 	ldw	r7,40(sp)
10004fd0:	24ffffc4 	addi	r19,r4,-1
10004fd4:	3cc20716 	blt	r7,r19,100057f4 <_dtoa_r+0x11b0>
10004fd8:	3ce7c83a 	sub	r19,r7,r19
10004fdc:	d9c00917 	ldw	r7,36(sp)
10004fe0:	3802ae16 	blt	r7,zero,10005a9c <_dtoa_r+0x1458>
10004fe4:	dc800817 	ldw	r18,32(sp)
10004fe8:	d8800917 	ldw	r2,36(sp)
10004fec:	d8c00817 	ldw	r3,32(sp)
10004ff0:	d9c00717 	ldw	r7,28(sp)
10004ff4:	8009883a 	mov	r4,r16
10004ff8:	1887883a 	add	r3,r3,r2
10004ffc:	388f883a 	add	r7,r7,r2
10005000:	01400044 	movi	r5,1
10005004:	d8c00815 	stw	r3,32(sp)
10005008:	d9c00715 	stw	r7,28(sp)
1000500c:	0007e8c0 	call	10007e8c <__i2b>
10005010:	102b883a 	mov	r21,r2
10005014:	90000a26 	beq	r18,zero,10005040 <_dtoa_r+0x9fc>
10005018:	d8800717 	ldw	r2,28(sp)
1000501c:	0080080e 	bge	zero,r2,10005040 <_dtoa_r+0x9fc>
10005020:	90812b16 	blt	r18,r2,100054d0 <_dtoa_r+0xe8c>
10005024:	d8c00817 	ldw	r3,32(sp)
10005028:	d9000717 	ldw	r4,28(sp)
1000502c:	90a5c83a 	sub	r18,r18,r2
10005030:	1887c83a 	sub	r3,r3,r2
10005034:	2089c83a 	sub	r4,r4,r2
10005038:	d8c00815 	stw	r3,32(sp)
1000503c:	d9000715 	stw	r4,28(sp)
10005040:	d9c00a17 	ldw	r7,40(sp)
10005044:	01c0140e 	bge	zero,r7,10005098 <_dtoa_r+0xa54>
10005048:	d8800c17 	ldw	r2,48(sp)
1000504c:	1001de26 	beq	r2,zero,100057c8 <_dtoa_r+0x1184>
10005050:	04c00e0e 	bge	zero,r19,1000508c <_dtoa_r+0xa48>
10005054:	a80b883a 	mov	r5,r21
10005058:	8009883a 	mov	r4,r16
1000505c:	980d883a 	mov	r6,r19
10005060:	00081200 	call	10008120 <__pow5mult>
10005064:	e00d883a 	mov	r6,fp
10005068:	8009883a 	mov	r4,r16
1000506c:	100b883a 	mov	r5,r2
10005070:	102b883a 	mov	r21,r2
10005074:	0007ec80 	call	10007ec8 <__multiply>
10005078:	1029883a 	mov	r20,r2
1000507c:	e00b883a 	mov	r5,fp
10005080:	8009883a 	mov	r4,r16
10005084:	0007b040 	call	10007b04 <_Bfree>
10005088:	a039883a 	mov	fp,r20
1000508c:	d8c00a17 	ldw	r3,40(sp)
10005090:	1ccdc83a 	sub	r6,r3,r19
10005094:	3001291e 	bne	r6,zero,1000553c <_dtoa_r+0xef8>
10005098:	8009883a 	mov	r4,r16
1000509c:	01400044 	movi	r5,1
100050a0:	0007e8c0 	call	10007e8c <__i2b>
100050a4:	d9000b17 	ldw	r4,44(sp)
100050a8:	1029883a 	mov	r20,r2
100050ac:	0100050e 	bge	zero,r4,100050c4 <_dtoa_r+0xa80>
100050b0:	d9800b17 	ldw	r6,44(sp)
100050b4:	8009883a 	mov	r4,r16
100050b8:	100b883a 	mov	r5,r2
100050bc:	00081200 	call	10008120 <__pow5mult>
100050c0:	1029883a 	mov	r20,r2
100050c4:	d9c00417 	ldw	r7,16(sp)
100050c8:	00800044 	movi	r2,1
100050cc:	11c0f00e 	bge	r2,r7,10005490 <_dtoa_r+0xe4c>
100050d0:	0023883a 	mov	r17,zero
100050d4:	d8800b17 	ldw	r2,44(sp)
100050d8:	1001741e 	bne	r2,zero,100056ac <_dtoa_r+0x1068>
100050dc:	00800044 	movi	r2,1
100050e0:	d8c00717 	ldw	r3,28(sp)
100050e4:	10c5883a 	add	r2,r2,r3
100050e8:	108007cc 	andi	r2,r2,31
100050ec:	10008026 	beq	r2,zero,100052f0 <_dtoa_r+0xcac>
100050f0:	01000804 	movi	r4,32
100050f4:	2089c83a 	sub	r4,r4,r2
100050f8:	00c00104 	movi	r3,4
100050fc:	1902d00e 	bge	r3,r4,10005c40 <_dtoa_r+0x15fc>
10005100:	d9000817 	ldw	r4,32(sp)
10005104:	d9c00717 	ldw	r7,28(sp)
10005108:	00c00704 	movi	r3,28
1000510c:	1885c83a 	sub	r2,r3,r2
10005110:	2089883a 	add	r4,r4,r2
10005114:	388f883a 	add	r7,r7,r2
10005118:	d9000815 	stw	r4,32(sp)
1000511c:	90a5883a 	add	r18,r18,r2
10005120:	d9c00715 	stw	r7,28(sp)
10005124:	d9c00817 	ldw	r7,32(sp)
10005128:	01c0050e 	bge	zero,r7,10005140 <_dtoa_r+0xafc>
1000512c:	e00b883a 	mov	r5,fp
10005130:	8009883a 	mov	r4,r16
10005134:	380d883a 	mov	r6,r7
10005138:	000824c0 	call	1000824c <__lshift>
1000513c:	1039883a 	mov	fp,r2
10005140:	d8800717 	ldw	r2,28(sp)
10005144:	0080050e 	bge	zero,r2,1000515c <_dtoa_r+0xb18>
10005148:	a00b883a 	mov	r5,r20
1000514c:	8009883a 	mov	r4,r16
10005150:	100d883a 	mov	r6,r2
10005154:	000824c0 	call	1000824c <__lshift>
10005158:	1029883a 	mov	r20,r2
1000515c:	d8c00d17 	ldw	r3,52(sp)
10005160:	1801401e 	bne	r3,zero,10005664 <_dtoa_r+0x1020>
10005164:	d8800917 	ldw	r2,36(sp)
10005168:	00815a0e 	bge	zero,r2,100056d4 <_dtoa_r+0x1090>
1000516c:	d8c00c17 	ldw	r3,48(sp)
10005170:	18006f1e 	bne	r3,zero,10005330 <_dtoa_r+0xcec>
10005174:	b823883a 	mov	r17,r23
10005178:	dc800917 	ldw	r18,36(sp)
1000517c:	00000206 	br	10005188 <_dtoa_r+0xb44>
10005180:	0007b2c0 	call	10007b2c <__multadd>
10005184:	1039883a 	mov	fp,r2
10005188:	e009883a 	mov	r4,fp
1000518c:	a00b883a 	mov	r5,r20
10005190:	00044080 	call	10004408 <quorem>
10005194:	10800c04 	addi	r2,r2,48
10005198:	88800005 	stb	r2,0(r17)
1000519c:	8c400044 	addi	r17,r17,1
100051a0:	8dc7c83a 	sub	r3,r17,r23
100051a4:	8009883a 	mov	r4,r16
100051a8:	e00b883a 	mov	r5,fp
100051ac:	01800284 	movi	r6,10
100051b0:	000f883a 	mov	r7,zero
100051b4:	1cbff216 	blt	r3,r18,10005180 <__alt_data_end+0xf8005180>
100051b8:	dd800917 	ldw	r22,36(sp)
100051bc:	1007883a 	mov	r3,r2
100051c0:	05823a0e 	bge	zero,r22,10005aac <_dtoa_r+0x1468>
100051c4:	bdad883a 	add	r22,r23,r22
100051c8:	0023883a 	mov	r17,zero
100051cc:	e00b883a 	mov	r5,fp
100051d0:	01800044 	movi	r6,1
100051d4:	8009883a 	mov	r4,r16
100051d8:	d8c01515 	stw	r3,84(sp)
100051dc:	000824c0 	call	1000824c <__lshift>
100051e0:	1009883a 	mov	r4,r2
100051e4:	a00b883a 	mov	r5,r20
100051e8:	1039883a 	mov	fp,r2
100051ec:	00083a80 	call	100083a8 <__mcmp>
100051f0:	d8c01517 	ldw	r3,84(sp)
100051f4:	0080d60e 	bge	zero,r2,10005550 <_dtoa_r+0xf0c>
100051f8:	b13fffc3 	ldbu	r4,-1(r22)
100051fc:	b0ffff84 	addi	r3,r22,-2
10005200:	01800e44 	movi	r6,57
10005204:	00000306 	br	10005214 <_dtoa_r+0xbd0>
10005208:	19000003 	ldbu	r4,0(r3)
1000520c:	102d883a 	mov	r22,r2
10005210:	18ffffc4 	addi	r3,r3,-1
10005214:	21403fcc 	andi	r5,r4,255
10005218:	2940201c 	xori	r5,r5,128
1000521c:	297fe004 	addi	r5,r5,-128
10005220:	b0bfffc4 	addi	r2,r22,-1
10005224:	2981a71e 	bne	r5,r6,100058c4 <_dtoa_r+0x1280>
10005228:	b8bff71e 	bne	r23,r2,10005208 <__alt_data_end+0xf8005208>
1000522c:	d8800617 	ldw	r2,24(sp)
10005230:	10800044 	addi	r2,r2,1
10005234:	d8800615 	stw	r2,24(sp)
10005238:	00800c44 	movi	r2,49
1000523c:	b8800005 	stb	r2,0(r23)
10005240:	8009883a 	mov	r4,r16
10005244:	a00b883a 	mov	r5,r20
10005248:	0007b040 	call	10007b04 <_Bfree>
1000524c:	a83e9e26 	beq	r21,zero,10004cc8 <__alt_data_end+0xf8004cc8>
10005250:	88000426 	beq	r17,zero,10005264 <_dtoa_r+0xc20>
10005254:	8d400326 	beq	r17,r21,10005264 <_dtoa_r+0xc20>
10005258:	8009883a 	mov	r4,r16
1000525c:	880b883a 	mov	r5,r17
10005260:	0007b040 	call	10007b04 <_Bfree>
10005264:	8009883a 	mov	r4,r16
10005268:	a80b883a 	mov	r5,r21
1000526c:	0007b040 	call	10007b04 <_Bfree>
10005270:	003e9506 	br	10004cc8 <__alt_data_end+0xf8004cc8>
10005274:	00c00044 	movi	r3,1
10005278:	d8c00d15 	stw	r3,52(sp)
1000527c:	003d9f06 	br	100048fc <__alt_data_end+0xf80048fc>
10005280:	d9000817 	ldw	r4,32(sp)
10005284:	d8800617 	ldw	r2,24(sp)
10005288:	d8000b15 	stw	zero,44(sp)
1000528c:	2089c83a 	sub	r4,r4,r2
10005290:	0087c83a 	sub	r3,zero,r2
10005294:	d9000815 	stw	r4,32(sp)
10005298:	d8c00a15 	stw	r3,40(sp)
1000529c:	003da306 	br	1000492c <__alt_data_end+0xf800492c>
100052a0:	0529c83a 	sub	r20,zero,r20
100052a4:	dd000815 	stw	r20,32(sp)
100052a8:	d8000715 	stw	zero,28(sp)
100052ac:	003d9806 	br	10004910 <__alt_data_end+0xf8004910>
100052b0:	d9000617 	ldw	r4,24(sp)
100052b4:	000aed80 	call	1000aed8 <__floatsidf>
100052b8:	1009883a 	mov	r4,r2
100052bc:	180b883a 	mov	r5,r3
100052c0:	980d883a 	mov	r6,r19
100052c4:	900f883a 	mov	r7,r18
100052c8:	000acfc0 	call	1000acfc <__eqdf2>
100052cc:	103d7a26 	beq	r2,zero,100048b8 <__alt_data_end+0xf80048b8>
100052d0:	d8800617 	ldw	r2,24(sp)
100052d4:	10bfffc4 	addi	r2,r2,-1
100052d8:	d8800615 	stw	r2,24(sp)
100052dc:	003d7606 	br	100048b8 <__alt_data_end+0xf80048b8>
100052e0:	dcc00a17 	ldw	r19,40(sp)
100052e4:	dc800817 	ldw	r18,32(sp)
100052e8:	002b883a 	mov	r21,zero
100052ec:	003f4906 	br	10005014 <__alt_data_end+0xf8005014>
100052f0:	00800704 	movi	r2,28
100052f4:	d8c00817 	ldw	r3,32(sp)
100052f8:	d9000717 	ldw	r4,28(sp)
100052fc:	90a5883a 	add	r18,r18,r2
10005300:	1887883a 	add	r3,r3,r2
10005304:	2089883a 	add	r4,r4,r2
10005308:	d8c00815 	stw	r3,32(sp)
1000530c:	d9000715 	stw	r4,28(sp)
10005310:	003f8406 	br	10005124 <__alt_data_end+0xf8005124>
10005314:	d9c00317 	ldw	r7,12(sp)
10005318:	013efb84 	movi	r4,-1042
1000531c:	2509c83a 	sub	r4,r4,r20
10005320:	3908983a 	sll	r4,r7,r4
10005324:	003d3006 	br	100047e8 <__alt_data_end+0xf80047e8>
10005328:	d8000d15 	stw	zero,52(sp)
1000532c:	003d7306 	br	100048fc <__alt_data_end+0xf80048fc>
10005330:	0480050e 	bge	zero,r18,10005348 <_dtoa_r+0xd04>
10005334:	a80b883a 	mov	r5,r21
10005338:	8009883a 	mov	r4,r16
1000533c:	900d883a 	mov	r6,r18
10005340:	000824c0 	call	1000824c <__lshift>
10005344:	102b883a 	mov	r21,r2
10005348:	8801611e 	bne	r17,zero,100058d0 <_dtoa_r+0x128c>
1000534c:	a827883a 	mov	r19,r21
10005350:	d8c00317 	ldw	r3,12(sp)
10005354:	d9000917 	ldw	r4,36(sp)
10005358:	b8bfffc4 	addi	r2,r23,-1
1000535c:	18c0004c 	andi	r3,r3,1
10005360:	1105883a 	add	r2,r2,r4
10005364:	b825883a 	mov	r18,r23
10005368:	d8800515 	stw	r2,20(sp)
1000536c:	a823883a 	mov	r17,r21
10005370:	d8c00315 	stw	r3,12(sp)
10005374:	ddc00715 	stw	r23,28(sp)
10005378:	e009883a 	mov	r4,fp
1000537c:	a00b883a 	mov	r5,r20
10005380:	00044080 	call	10004408 <quorem>
10005384:	e009883a 	mov	r4,fp
10005388:	880b883a 	mov	r5,r17
1000538c:	102d883a 	mov	r22,r2
10005390:	00083a80 	call	100083a8 <__mcmp>
10005394:	980d883a 	mov	r6,r19
10005398:	8009883a 	mov	r4,r16
1000539c:	a00b883a 	mov	r5,r20
100053a0:	102b883a 	mov	r21,r2
100053a4:	00084000 	call	10008400 <__mdiff>
100053a8:	100d883a 	mov	r6,r2
100053ac:	10800317 	ldw	r2,12(r2)
100053b0:	b5c00c04 	addi	r23,r22,48
100053b4:	10008c26 	beq	r2,zero,100055e8 <_dtoa_r+0xfa4>
100053b8:	8009883a 	mov	r4,r16
100053bc:	300b883a 	mov	r5,r6
100053c0:	0007b040 	call	10007b04 <_Bfree>
100053c4:	00800044 	movi	r2,1
100053c8:	a8007116 	blt	r21,zero,10005590 <_dtoa_r+0xf4c>
100053cc:	a800041e 	bne	r21,zero,100053e0 <_dtoa_r+0xd9c>
100053d0:	d9c00417 	ldw	r7,16(sp)
100053d4:	3800021e 	bne	r7,zero,100053e0 <_dtoa_r+0xd9c>
100053d8:	d8c00317 	ldw	r3,12(sp)
100053dc:	18006c26 	beq	r3,zero,10005590 <_dtoa_r+0xf4c>
100053e0:	00814c16 	blt	zero,r2,10005914 <_dtoa_r+0x12d0>
100053e4:	d8c00517 	ldw	r3,20(sp)
100053e8:	95400044 	addi	r21,r18,1
100053ec:	95c00005 	stb	r23,0(r18)
100053f0:	a82d883a 	mov	r22,r21
100053f4:	90c14d26 	beq	r18,r3,1000592c <_dtoa_r+0x12e8>
100053f8:	e00b883a 	mov	r5,fp
100053fc:	8009883a 	mov	r4,r16
10005400:	01800284 	movi	r6,10
10005404:	000f883a 	mov	r7,zero
10005408:	0007b2c0 	call	10007b2c <__multadd>
1000540c:	1039883a 	mov	fp,r2
10005410:	8cc08b26 	beq	r17,r19,10005640 <_dtoa_r+0xffc>
10005414:	880b883a 	mov	r5,r17
10005418:	01800284 	movi	r6,10
1000541c:	000f883a 	mov	r7,zero
10005420:	8009883a 	mov	r4,r16
10005424:	0007b2c0 	call	10007b2c <__multadd>
10005428:	980b883a 	mov	r5,r19
1000542c:	8009883a 	mov	r4,r16
10005430:	01800284 	movi	r6,10
10005434:	000f883a 	mov	r7,zero
10005438:	1023883a 	mov	r17,r2
1000543c:	0007b2c0 	call	10007b2c <__multadd>
10005440:	1027883a 	mov	r19,r2
10005444:	a825883a 	mov	r18,r21
10005448:	003fcb06 	br	10005378 <__alt_data_end+0xf8005378>
1000544c:	d9c00417 	ldw	r7,16(sp)
10005450:	00800104 	movi	r2,4
10005454:	3880e426 	beq	r7,r2,100057e8 <_dtoa_r+0x11a4>
10005458:	00800144 	movi	r2,5
1000545c:	38be3c1e 	bne	r7,r2,10004d50 <__alt_data_end+0xf8004d50>
10005460:	00c00044 	movi	r3,1
10005464:	d8c00c15 	stw	r3,48(sp)
10005468:	d9c02117 	ldw	r7,132(sp)
1000546c:	d8800617 	ldw	r2,24(sp)
10005470:	388f883a 	add	r7,r7,r2
10005474:	3c800044 	addi	r18,r7,1
10005478:	d9c00e15 	stw	r7,56(sp)
1000547c:	dc800915 	stw	r18,36(sp)
10005480:	04bd3e16 	blt	zero,r18,1000497c <__alt_data_end+0xf800497c>
10005484:	80001115 	stw	zero,68(r16)
10005488:	000b883a 	mov	r5,zero
1000548c:	003d4606 	br	100049a8 <__alt_data_end+0xf80049a8>
10005490:	d8c00317 	ldw	r3,12(sp)
10005494:	183f0e1e 	bne	r3,zero,100050d0 <__alt_data_end+0xf80050d0>
10005498:	00c00434 	movhi	r3,16
1000549c:	18ffffc4 	addi	r3,r3,-1
100054a0:	88c6703a 	and	r3,r17,r3
100054a4:	183f0a1e 	bne	r3,zero,100050d0 <__alt_data_end+0xf80050d0>
100054a8:	8c5ffc2c 	andhi	r17,r17,32752
100054ac:	883f0826 	beq	r17,zero,100050d0 <__alt_data_end+0xf80050d0>
100054b0:	d9000817 	ldw	r4,32(sp)
100054b4:	d9c00717 	ldw	r7,28(sp)
100054b8:	1023883a 	mov	r17,r2
100054bc:	2089883a 	add	r4,r4,r2
100054c0:	388f883a 	add	r7,r7,r2
100054c4:	d9000815 	stw	r4,32(sp)
100054c8:	d9c00715 	stw	r7,28(sp)
100054cc:	003f0106 	br	100050d4 <__alt_data_end+0xf80050d4>
100054d0:	9005883a 	mov	r2,r18
100054d4:	003ed306 	br	10005024 <__alt_data_end+0xf8005024>
100054d8:	d8800917 	ldw	r2,36(sp)
100054dc:	00be3516 	blt	zero,r2,10004db4 <__alt_data_end+0xf8004db4>
100054e0:	1000b61e 	bne	r2,zero,100057bc <_dtoa_r+0x1178>
100054e4:	9009883a 	mov	r4,r18
100054e8:	980b883a 	mov	r5,r19
100054ec:	000d883a 	mov	r6,zero
100054f0:	01d00534 	movhi	r7,16404
100054f4:	000a8640 	call	1000a864 <__muldf3>
100054f8:	d9800317 	ldw	r6,12(sp)
100054fc:	1009883a 	mov	r4,r2
10005500:	180b883a 	mov	r5,r3
10005504:	880f883a 	mov	r7,r17
10005508:	000ae180 	call	1000ae18 <__gedf2>
1000550c:	0029883a 	mov	r20,zero
10005510:	002b883a 	mov	r21,zero
10005514:	10007e16 	blt	r2,zero,10005710 <_dtoa_r+0x10cc>
10005518:	d8802117 	ldw	r2,132(sp)
1000551c:	b82d883a 	mov	r22,r23
10005520:	0084303a 	nor	r2,zero,r2
10005524:	d8800615 	stw	r2,24(sp)
10005528:	8009883a 	mov	r4,r16
1000552c:	a00b883a 	mov	r5,r20
10005530:	0007b040 	call	10007b04 <_Bfree>
10005534:	a83f4b1e 	bne	r21,zero,10005264 <__alt_data_end+0xf8005264>
10005538:	003de306 	br	10004cc8 <__alt_data_end+0xf8004cc8>
1000553c:	e00b883a 	mov	r5,fp
10005540:	8009883a 	mov	r4,r16
10005544:	00081200 	call	10008120 <__pow5mult>
10005548:	1039883a 	mov	fp,r2
1000554c:	003ed206 	br	10005098 <__alt_data_end+0xf8005098>
10005550:	1000021e 	bne	r2,zero,1000555c <_dtoa_r+0xf18>
10005554:	18c0004c 	andi	r3,r3,1
10005558:	183f271e 	bne	r3,zero,100051f8 <__alt_data_end+0xf80051f8>
1000555c:	01000c04 	movi	r4,48
10005560:	00000106 	br	10005568 <_dtoa_r+0xf24>
10005564:	102d883a 	mov	r22,r2
10005568:	b0bfffc4 	addi	r2,r22,-1
1000556c:	10c00007 	ldb	r3,0(r2)
10005570:	193ffc26 	beq	r3,r4,10005564 <__alt_data_end+0xf8005564>
10005574:	003f3206 	br	10005240 <__alt_data_end+0xf8005240>
10005578:	d8c00f17 	ldw	r3,60(sp)
1000557c:	18015026 	beq	r3,zero,10005ac0 <_dtoa_r+0x147c>
10005580:	10810cc4 	addi	r2,r2,1075
10005584:	dcc00a17 	ldw	r19,40(sp)
10005588:	dc800817 	ldw	r18,32(sp)
1000558c:	003e9706 	br	10004fec <__alt_data_end+0xf8004fec>
10005590:	b807883a 	mov	r3,r23
10005594:	182b883a 	mov	r21,r3
10005598:	ddc00717 	ldw	r23,28(sp)
1000559c:	00800e0e 	bge	zero,r2,100055d8 <_dtoa_r+0xf94>
100055a0:	e00b883a 	mov	r5,fp
100055a4:	01800044 	movi	r6,1
100055a8:	8009883a 	mov	r4,r16
100055ac:	d8c01515 	stw	r3,84(sp)
100055b0:	000824c0 	call	1000824c <__lshift>
100055b4:	1009883a 	mov	r4,r2
100055b8:	a00b883a 	mov	r5,r20
100055bc:	1039883a 	mov	fp,r2
100055c0:	00083a80 	call	100083a8 <__mcmp>
100055c4:	d8c01517 	ldw	r3,84(sp)
100055c8:	0081880e 	bge	zero,r2,10005bec <_dtoa_r+0x15a8>
100055cc:	00800e44 	movi	r2,57
100055d0:	b0c00c44 	addi	r3,r22,49
100055d4:	a8816326 	beq	r21,r2,10005b64 <_dtoa_r+0x1520>
100055d8:	90c00005 	stb	r3,0(r18)
100055dc:	95800044 	addi	r22,r18,1
100055e0:	982b883a 	mov	r21,r19
100055e4:	003f1606 	br	10005240 <__alt_data_end+0xf8005240>
100055e8:	300b883a 	mov	r5,r6
100055ec:	e009883a 	mov	r4,fp
100055f0:	d9801515 	stw	r6,84(sp)
100055f4:	00083a80 	call	100083a8 <__mcmp>
100055f8:	d9801517 	ldw	r6,84(sp)
100055fc:	8009883a 	mov	r4,r16
10005600:	d8801515 	stw	r2,84(sp)
10005604:	300b883a 	mov	r5,r6
10005608:	0007b040 	call	10007b04 <_Bfree>
1000560c:	d8801517 	ldw	r2,84(sp)
10005610:	103f6d1e 	bne	r2,zero,100053c8 <__alt_data_end+0xf80053c8>
10005614:	d9c00417 	ldw	r7,16(sp)
10005618:	383f6b1e 	bne	r7,zero,100053c8 <__alt_data_end+0xf80053c8>
1000561c:	d8c00317 	ldw	r3,12(sp)
10005620:	183f691e 	bne	r3,zero,100053c8 <__alt_data_end+0xf80053c8>
10005624:	b807883a 	mov	r3,r23
10005628:	00800e44 	movi	r2,57
1000562c:	ddc00717 	ldw	r23,28(sp)
10005630:	18814c26 	beq	r3,r2,10005b64 <_dtoa_r+0x1520>
10005634:	057fe80e 	bge	zero,r21,100055d8 <__alt_data_end+0xf80055d8>
10005638:	b0c00c44 	addi	r3,r22,49
1000563c:	003fe606 	br	100055d8 <__alt_data_end+0xf80055d8>
10005640:	880b883a 	mov	r5,r17
10005644:	8009883a 	mov	r4,r16
10005648:	01800284 	movi	r6,10
1000564c:	000f883a 	mov	r7,zero
10005650:	0007b2c0 	call	10007b2c <__multadd>
10005654:	1023883a 	mov	r17,r2
10005658:	1027883a 	mov	r19,r2
1000565c:	a825883a 	mov	r18,r21
10005660:	003f4506 	br	10005378 <__alt_data_end+0xf8005378>
10005664:	e009883a 	mov	r4,fp
10005668:	a00b883a 	mov	r5,r20
1000566c:	00083a80 	call	100083a8 <__mcmp>
10005670:	103ebc0e 	bge	r2,zero,10005164 <__alt_data_end+0xf8005164>
10005674:	e00b883a 	mov	r5,fp
10005678:	8009883a 	mov	r4,r16
1000567c:	01800284 	movi	r6,10
10005680:	000f883a 	mov	r7,zero
10005684:	0007b2c0 	call	10007b2c <__multadd>
10005688:	1039883a 	mov	fp,r2
1000568c:	d8800617 	ldw	r2,24(sp)
10005690:	d8c00c17 	ldw	r3,48(sp)
10005694:	10bfffc4 	addi	r2,r2,-1
10005698:	d8800615 	stw	r2,24(sp)
1000569c:	1801571e 	bne	r3,zero,10005bfc <_dtoa_r+0x15b8>
100056a0:	d9c00e17 	ldw	r7,56(sp)
100056a4:	d9c00915 	stw	r7,36(sp)
100056a8:	003eae06 	br	10005164 <__alt_data_end+0xf8005164>
100056ac:	a0800417 	ldw	r2,16(r20)
100056b0:	10800104 	addi	r2,r2,4
100056b4:	1085883a 	add	r2,r2,r2
100056b8:	1085883a 	add	r2,r2,r2
100056bc:	a085883a 	add	r2,r20,r2
100056c0:	11000017 	ldw	r4,0(r2)
100056c4:	0007d740 	call	10007d74 <__hi0bits>
100056c8:	00c00804 	movi	r3,32
100056cc:	1885c83a 	sub	r2,r3,r2
100056d0:	003e8306 	br	100050e0 <__alt_data_end+0xf80050e0>
100056d4:	d9c00417 	ldw	r7,16(sp)
100056d8:	00800084 	movi	r2,2
100056dc:	11fea30e 	bge	r2,r7,1000516c <__alt_data_end+0xf800516c>
100056e0:	d8800917 	ldw	r2,36(sp)
100056e4:	103f8c1e 	bne	r2,zero,10005518 <__alt_data_end+0xf8005518>
100056e8:	a00b883a 	mov	r5,r20
100056ec:	8009883a 	mov	r4,r16
100056f0:	01800144 	movi	r6,5
100056f4:	000f883a 	mov	r7,zero
100056f8:	0007b2c0 	call	10007b2c <__multadd>
100056fc:	e009883a 	mov	r4,fp
10005700:	100b883a 	mov	r5,r2
10005704:	1029883a 	mov	r20,r2
10005708:	00083a80 	call	100083a8 <__mcmp>
1000570c:	00bf820e 	bge	zero,r2,10005518 <__alt_data_end+0xf8005518>
10005710:	00800c44 	movi	r2,49
10005714:	b8800005 	stb	r2,0(r23)
10005718:	d8800617 	ldw	r2,24(sp)
1000571c:	bd800044 	addi	r22,r23,1
10005720:	10800044 	addi	r2,r2,1
10005724:	d8800615 	stw	r2,24(sp)
10005728:	003f7f06 	br	10005528 <__alt_data_end+0xf8005528>
1000572c:	dc000417 	ldw	r16,16(sp)
10005730:	003d6506 	br	10004cc8 <__alt_data_end+0xf8004cc8>
10005734:	9009883a 	mov	r4,r18
10005738:	000aed80 	call	1000aed8 <__floatsidf>
1000573c:	1009883a 	mov	r4,r2
10005740:	180b883a 	mov	r5,r3
10005744:	980d883a 	mov	r6,r19
10005748:	a00f883a 	mov	r7,r20
1000574c:	000a8640 	call	1000a864 <__muldf3>
10005750:	1009883a 	mov	r4,r2
10005754:	180b883a 	mov	r5,r3
10005758:	000d883a 	mov	r6,zero
1000575c:	01d00734 	movhi	r7,16412
10005760:	000a7b00 	call	1000a7b0 <__adddf3>
10005764:	057f3034 	movhi	r21,64704
10005768:	1025883a 	mov	r18,r2
1000576c:	1d6b883a 	add	r21,r3,r21
10005770:	9809883a 	mov	r4,r19
10005774:	a00b883a 	mov	r5,r20
10005778:	000d883a 	mov	r6,zero
1000577c:	01d00534 	movhi	r7,16404
10005780:	000a8040 	call	1000a804 <__subdf3>
10005784:	1009883a 	mov	r4,r2
10005788:	180b883a 	mov	r5,r3
1000578c:	900d883a 	mov	r6,r18
10005790:	a80f883a 	mov	r7,r21
10005794:	1027883a 	mov	r19,r2
10005798:	1829883a 	mov	r20,r3
1000579c:	000adb40 	call	1000adb4 <__gtdf2>
100057a0:	00806616 	blt	zero,r2,1000593c <_dtoa_r+0x12f8>
100057a4:	a9e0003c 	xorhi	r7,r21,32768
100057a8:	9809883a 	mov	r4,r19
100057ac:	a00b883a 	mov	r5,r20
100057b0:	900d883a 	mov	r6,r18
100057b4:	000ae7c0 	call	1000ae7c <__ltdf2>
100057b8:	103d710e 	bge	r2,zero,10004d80 <__alt_data_end+0xf8004d80>
100057bc:	0029883a 	mov	r20,zero
100057c0:	002b883a 	mov	r21,zero
100057c4:	003f5406 	br	10005518 <__alt_data_end+0xf8005518>
100057c8:	d9800a17 	ldw	r6,40(sp)
100057cc:	e00b883a 	mov	r5,fp
100057d0:	8009883a 	mov	r4,r16
100057d4:	00081200 	call	10008120 <__pow5mult>
100057d8:	1039883a 	mov	fp,r2
100057dc:	003e2e06 	br	10005098 <__alt_data_end+0xf8005098>
100057e0:	d8000c15 	stw	zero,48(sp)
100057e4:	003f2006 	br	10005468 <__alt_data_end+0xf8005468>
100057e8:	00800044 	movi	r2,1
100057ec:	d8800c15 	stw	r2,48(sp)
100057f0:	003c5d06 	br	10004968 <__alt_data_end+0xf8004968>
100057f4:	d8c00a17 	ldw	r3,40(sp)
100057f8:	d9000b17 	ldw	r4,44(sp)
100057fc:	dcc00a15 	stw	r19,40(sp)
10005800:	98c5c83a 	sub	r2,r19,r3
10005804:	2089883a 	add	r4,r4,r2
10005808:	d9000b15 	stw	r4,44(sp)
1000580c:	0027883a 	mov	r19,zero
10005810:	003df206 	br	10004fdc <__alt_data_end+0xf8004fdc>
10005814:	d9000317 	ldw	r4,12(sp)
10005818:	8829883a 	mov	r20,r17
1000581c:	04800084 	movi	r18,2
10005820:	d9001015 	stw	r4,64(sp)
10005824:	003c8106 	br	10004a2c <__alt_data_end+0xf8004a2c>
10005828:	04800044 	movi	r18,1
1000582c:	dc800e15 	stw	r18,56(sp)
10005830:	dc800915 	stw	r18,36(sp)
10005834:	dc802115 	stw	r18,132(sp)
10005838:	003f1206 	br	10005484 <__alt_data_end+0xf8005484>
1000583c:	d8800617 	ldw	r2,24(sp)
10005840:	00abc83a 	sub	r21,zero,r2
10005844:	a800a426 	beq	r21,zero,10005ad8 <_dtoa_r+0x1494>
10005848:	a88003cc 	andi	r2,r21,15
1000584c:	100490fa 	slli	r2,r2,3
10005850:	00c40074 	movhi	r3,4097
10005854:	18fa7504 	addi	r3,r3,-5676
10005858:	d9000317 	ldw	r4,12(sp)
1000585c:	1885883a 	add	r2,r3,r2
10005860:	11800017 	ldw	r6,0(r2)
10005864:	11c00117 	ldw	r7,4(r2)
10005868:	a82bd13a 	srai	r21,r21,4
1000586c:	880b883a 	mov	r5,r17
10005870:	000a8640 	call	1000a864 <__muldf3>
10005874:	1027883a 	mov	r19,r2
10005878:	1829883a 	mov	r20,r3
1000587c:	a800e826 	beq	r21,zero,10005c20 <_dtoa_r+0x15dc>
10005880:	05840074 	movhi	r22,4097
10005884:	b5ba6b04 	addi	r22,r22,-5716
10005888:	04800084 	movi	r18,2
1000588c:	a980004c 	andi	r6,r21,1
10005890:	1009883a 	mov	r4,r2
10005894:	a82bd07a 	srai	r21,r21,1
10005898:	180b883a 	mov	r5,r3
1000589c:	30000426 	beq	r6,zero,100058b0 <_dtoa_r+0x126c>
100058a0:	b1800017 	ldw	r6,0(r22)
100058a4:	b1c00117 	ldw	r7,4(r22)
100058a8:	94800044 	addi	r18,r18,1
100058ac:	000a8640 	call	1000a864 <__muldf3>
100058b0:	b5800204 	addi	r22,r22,8
100058b4:	a83ff51e 	bne	r21,zero,1000588c <__alt_data_end+0xf800588c>
100058b8:	1027883a 	mov	r19,r2
100058bc:	1829883a 	mov	r20,r3
100058c0:	003c7306 	br	10004a90 <__alt_data_end+0xf8004a90>
100058c4:	21000044 	addi	r4,r4,1
100058c8:	11000005 	stb	r4,0(r2)
100058cc:	003e5c06 	br	10005240 <__alt_data_end+0xf8005240>
100058d0:	a9400117 	ldw	r5,4(r21)
100058d4:	8009883a 	mov	r4,r16
100058d8:	0007a5c0 	call	10007a5c <_Balloc>
100058dc:	a9800417 	ldw	r6,16(r21)
100058e0:	11000304 	addi	r4,r2,12
100058e4:	a9400304 	addi	r5,r21,12
100058e8:	31800084 	addi	r6,r6,2
100058ec:	318d883a 	add	r6,r6,r6
100058f0:	318d883a 	add	r6,r6,r6
100058f4:	1023883a 	mov	r17,r2
100058f8:	00076b40 	call	100076b4 <memcpy>
100058fc:	8009883a 	mov	r4,r16
10005900:	880b883a 	mov	r5,r17
10005904:	01800044 	movi	r6,1
10005908:	000824c0 	call	1000824c <__lshift>
1000590c:	1027883a 	mov	r19,r2
10005910:	003e8f06 	br	10005350 <__alt_data_end+0xf8005350>
10005914:	b807883a 	mov	r3,r23
10005918:	00800e44 	movi	r2,57
1000591c:	ddc00717 	ldw	r23,28(sp)
10005920:	18809026 	beq	r3,r2,10005b64 <_dtoa_r+0x1520>
10005924:	18c00044 	addi	r3,r3,1
10005928:	003f2b06 	br	100055d8 <__alt_data_end+0xf80055d8>
1000592c:	b807883a 	mov	r3,r23
10005930:	982b883a 	mov	r21,r19
10005934:	ddc00717 	ldw	r23,28(sp)
10005938:	003e2406 	br	100051cc <__alt_data_end+0xf80051cc>
1000593c:	0029883a 	mov	r20,zero
10005940:	002b883a 	mov	r21,zero
10005944:	003f7206 	br	10005710 <__alt_data_end+0xf8005710>
10005948:	593fffc4 	addi	r4,r11,-1
1000594c:	200490fa 	slli	r2,r4,3
10005950:	00c40074 	movhi	r3,4097
10005954:	18fa7504 	addi	r3,r3,-5676
10005958:	d9001015 	stw	r4,64(sp)
1000595c:	1885883a 	add	r2,r3,r2
10005960:	11000017 	ldw	r4,0(r2)
10005964:	11400117 	ldw	r5,4(r2)
10005968:	900d883a 	mov	r6,r18
1000596c:	a80f883a 	mov	r7,r21
10005970:	dac01615 	stw	r11,88(sp)
10005974:	000a8640 	call	1000a864 <__muldf3>
10005978:	a00b883a 	mov	r5,r20
1000597c:	9809883a 	mov	r4,r19
10005980:	d8c01215 	stw	r3,72(sp)
10005984:	d8801115 	stw	r2,68(sp)
10005988:	000afac0 	call	1000afac <__fixdfsi>
1000598c:	1009883a 	mov	r4,r2
10005990:	1025883a 	mov	r18,r2
10005994:	000aed80 	call	1000aed8 <__floatsidf>
10005998:	9809883a 	mov	r4,r19
1000599c:	a00b883a 	mov	r5,r20
100059a0:	100d883a 	mov	r6,r2
100059a4:	180f883a 	mov	r7,r3
100059a8:	94800c04 	addi	r18,r18,48
100059ac:	000a8040 	call	1000a804 <__subdf3>
100059b0:	bc800005 	stb	r18,0(r23)
100059b4:	dac01617 	ldw	r11,88(sp)
100059b8:	102b883a 	mov	r21,r2
100059bc:	00800044 	movi	r2,1
100059c0:	bd800044 	addi	r22,r23,1
100059c4:	1815883a 	mov	r10,r3
100059c8:	58802226 	beq	r11,r2,10005a54 <_dtoa_r+0x1410>
100059cc:	bad7883a 	add	r11,r23,r11
100059d0:	dc001415 	stw	r16,80(sp)
100059d4:	a805883a 	mov	r2,r21
100059d8:	b027883a 	mov	r19,r22
100059dc:	5821883a 	mov	r16,r11
100059e0:	882b883a 	mov	r21,r17
100059e4:	000d883a 	mov	r6,zero
100059e8:	01d00934 	movhi	r7,16420
100059ec:	1009883a 	mov	r4,r2
100059f0:	180b883a 	mov	r5,r3
100059f4:	000a8640 	call	1000a864 <__muldf3>
100059f8:	180b883a 	mov	r5,r3
100059fc:	1009883a 	mov	r4,r2
10005a00:	1829883a 	mov	r20,r3
10005a04:	1023883a 	mov	r17,r2
10005a08:	000afac0 	call	1000afac <__fixdfsi>
10005a0c:	1009883a 	mov	r4,r2
10005a10:	1025883a 	mov	r18,r2
10005a14:	000aed80 	call	1000aed8 <__floatsidf>
10005a18:	8809883a 	mov	r4,r17
10005a1c:	a00b883a 	mov	r5,r20
10005a20:	100d883a 	mov	r6,r2
10005a24:	180f883a 	mov	r7,r3
10005a28:	94800c04 	addi	r18,r18,48
10005a2c:	000a8040 	call	1000a804 <__subdf3>
10005a30:	9cc00044 	addi	r19,r19,1
10005a34:	9cbfffc5 	stb	r18,-1(r19)
10005a38:	9c3fea1e 	bne	r19,r16,100059e4 <__alt_data_end+0xf80059e4>
10005a3c:	1815883a 	mov	r10,r3
10005a40:	d8c01017 	ldw	r3,64(sp)
10005a44:	dc001417 	ldw	r16,80(sp)
10005a48:	a823883a 	mov	r17,r21
10005a4c:	b0ed883a 	add	r22,r22,r3
10005a50:	102b883a 	mov	r21,r2
10005a54:	d9001117 	ldw	r4,68(sp)
10005a58:	d9401217 	ldw	r5,72(sp)
10005a5c:	000d883a 	mov	r6,zero
10005a60:	01cff834 	movhi	r7,16352
10005a64:	da801515 	stw	r10,84(sp)
10005a68:	000a7b00 	call	1000a7b0 <__adddf3>
10005a6c:	da801517 	ldw	r10,84(sp)
10005a70:	1009883a 	mov	r4,r2
10005a74:	180b883a 	mov	r5,r3
10005a78:	500f883a 	mov	r7,r10
10005a7c:	a80d883a 	mov	r6,r21
10005a80:	000ae7c0 	call	1000ae7c <__ltdf2>
10005a84:	da801517 	ldw	r10,84(sp)
10005a88:	10003b0e 	bge	r2,zero,10005b78 <_dtoa_r+0x1534>
10005a8c:	d9c01317 	ldw	r7,76(sp)
10005a90:	b53fffc3 	ldbu	r20,-1(r22)
10005a94:	d9c00615 	stw	r7,24(sp)
10005a98:	003d3106 	br	10004f60 <__alt_data_end+0xf8004f60>
10005a9c:	d8800817 	ldw	r2,32(sp)
10005aa0:	11e5c83a 	sub	r18,r2,r7
10005aa4:	0005883a 	mov	r2,zero
10005aa8:	003d5006 	br	10004fec <__alt_data_end+0xf8004fec>
10005aac:	05800044 	movi	r22,1
10005ab0:	003dc406 	br	100051c4 <__alt_data_end+0xf80051c4>
10005ab4:	a5000044 	addi	r20,r20,1
10005ab8:	15000005 	stb	r20,0(r2)
10005abc:	003c8206 	br	10004cc8 <__alt_data_end+0xf8004cc8>
10005ac0:	d8800217 	ldw	r2,8(sp)
10005ac4:	00c00d84 	movi	r3,54
10005ac8:	dcc00a17 	ldw	r19,40(sp)
10005acc:	1885c83a 	sub	r2,r3,r2
10005ad0:	dc800817 	ldw	r18,32(sp)
10005ad4:	003d4506 	br	10004fec <__alt_data_end+0xf8004fec>
10005ad8:	dcc00317 	ldw	r19,12(sp)
10005adc:	8829883a 	mov	r20,r17
10005ae0:	04800084 	movi	r18,2
10005ae4:	003bea06 	br	10004a90 <__alt_data_end+0xf8004a90>
10005ae8:	d9000917 	ldw	r4,36(sp)
10005aec:	203f1126 	beq	r4,zero,10005734 <__alt_data_end+0xf8005734>
10005af0:	d9c00e17 	ldw	r7,56(sp)
10005af4:	01fca20e 	bge	zero,r7,10004d80 <__alt_data_end+0xf8004d80>
10005af8:	a00b883a 	mov	r5,r20
10005afc:	9809883a 	mov	r4,r19
10005b00:	000d883a 	mov	r6,zero
10005b04:	01d00934 	movhi	r7,16420
10005b08:	000a8640 	call	1000a864 <__muldf3>
10005b0c:	91000044 	addi	r4,r18,1
10005b10:	1027883a 	mov	r19,r2
10005b14:	1829883a 	mov	r20,r3
10005b18:	000aed80 	call	1000aed8 <__floatsidf>
10005b1c:	9809883a 	mov	r4,r19
10005b20:	a00b883a 	mov	r5,r20
10005b24:	100d883a 	mov	r6,r2
10005b28:	180f883a 	mov	r7,r3
10005b2c:	000a8640 	call	1000a864 <__muldf3>
10005b30:	1009883a 	mov	r4,r2
10005b34:	180b883a 	mov	r5,r3
10005b38:	000d883a 	mov	r6,zero
10005b3c:	01d00734 	movhi	r7,16412
10005b40:	000a7b00 	call	1000a7b0 <__adddf3>
10005b44:	1025883a 	mov	r18,r2
10005b48:	d8800617 	ldw	r2,24(sp)
10005b4c:	057f3034 	movhi	r21,64704
10005b50:	1d6b883a 	add	r21,r3,r21
10005b54:	10bfffc4 	addi	r2,r2,-1
10005b58:	d8801315 	stw	r2,76(sp)
10005b5c:	dac00e17 	ldw	r11,56(sp)
10005b60:	003be706 	br	10004b00 <__alt_data_end+0xf8004b00>
10005b64:	01000e44 	movi	r4,57
10005b68:	91000005 	stb	r4,0(r18)
10005b6c:	95800044 	addi	r22,r18,1
10005b70:	982b883a 	mov	r21,r19
10005b74:	003da106 	br	100051fc <__alt_data_end+0xf80051fc>
10005b78:	d9801117 	ldw	r6,68(sp)
10005b7c:	d9c01217 	ldw	r7,72(sp)
10005b80:	0009883a 	mov	r4,zero
10005b84:	014ff834 	movhi	r5,16352
10005b88:	da801515 	stw	r10,84(sp)
10005b8c:	000a8040 	call	1000a804 <__subdf3>
10005b90:	da801517 	ldw	r10,84(sp)
10005b94:	1009883a 	mov	r4,r2
10005b98:	180b883a 	mov	r5,r3
10005b9c:	a80d883a 	mov	r6,r21
10005ba0:	500f883a 	mov	r7,r10
10005ba4:	000adb40 	call	1000adb4 <__gtdf2>
10005ba8:	00bc750e 	bge	zero,r2,10004d80 <__alt_data_end+0xf8004d80>
10005bac:	01000c04 	movi	r4,48
10005bb0:	00000106 	br	10005bb8 <_dtoa_r+0x1574>
10005bb4:	102d883a 	mov	r22,r2
10005bb8:	b0bfffc4 	addi	r2,r22,-1
10005bbc:	10c00007 	ldb	r3,0(r2)
10005bc0:	193ffc26 	beq	r3,r4,10005bb4 <__alt_data_end+0xf8005bb4>
10005bc4:	d8801317 	ldw	r2,76(sp)
10005bc8:	d8800615 	stw	r2,24(sp)
10005bcc:	003c3e06 	br	10004cc8 <__alt_data_end+0xf8004cc8>
10005bd0:	d9001317 	ldw	r4,76(sp)
10005bd4:	df001117 	ldw	fp,68(sp)
10005bd8:	d9000615 	stw	r4,24(sp)
10005bdc:	003ce006 	br	10004f60 <__alt_data_end+0xf8004f60>
10005be0:	df001117 	ldw	fp,68(sp)
10005be4:	dc401217 	ldw	r17,72(sp)
10005be8:	003c6506 	br	10004d80 <__alt_data_end+0xf8004d80>
10005bec:	103e7a1e 	bne	r2,zero,100055d8 <__alt_data_end+0xf80055d8>
10005bf0:	1880004c 	andi	r2,r3,1
10005bf4:	103e7826 	beq	r2,zero,100055d8 <__alt_data_end+0xf80055d8>
10005bf8:	003e7406 	br	100055cc <__alt_data_end+0xf80055cc>
10005bfc:	8009883a 	mov	r4,r16
10005c00:	a80b883a 	mov	r5,r21
10005c04:	01800284 	movi	r6,10
10005c08:	000f883a 	mov	r7,zero
10005c0c:	0007b2c0 	call	10007b2c <__multadd>
10005c10:	d9000e17 	ldw	r4,56(sp)
10005c14:	102b883a 	mov	r21,r2
10005c18:	d9000915 	stw	r4,36(sp)
10005c1c:	003d5106 	br	10005164 <__alt_data_end+0xf8005164>
10005c20:	04800084 	movi	r18,2
10005c24:	003b9a06 	br	10004a90 <__alt_data_end+0xf8004a90>
10005c28:	d8c01317 	ldw	r3,76(sp)
10005c2c:	d8c00615 	stw	r3,24(sp)
10005c30:	003ccb06 	br	10004f60 <__alt_data_end+0xf8004f60>
10005c34:	d8c01317 	ldw	r3,76(sp)
10005c38:	d8c00615 	stw	r3,24(sp)
10005c3c:	003c2206 	br	10004cc8 <__alt_data_end+0xf8004cc8>
10005c40:	20fd3826 	beq	r4,r3,10005124 <__alt_data_end+0xf8005124>
10005c44:	00c00f04 	movi	r3,60
10005c48:	1885c83a 	sub	r2,r3,r2
10005c4c:	003da906 	br	100052f4 <__alt_data_end+0xf80052f4>
10005c50:	000b883a 	mov	r5,zero
10005c54:	003b5406 	br	100049a8 <__alt_data_end+0xf80049a8>
10005c58:	04c00044 	movi	r19,1
10005c5c:	003b3b06 	br	1000494c <__alt_data_end+0xf800494c>

10005c60 <_fflush_r>:
10005c60:	defffb04 	addi	sp,sp,-20
10005c64:	dcc00315 	stw	r19,12(sp)
10005c68:	dc400115 	stw	r17,4(sp)
10005c6c:	dfc00415 	stw	ra,16(sp)
10005c70:	dc800215 	stw	r18,8(sp)
10005c74:	dc000015 	stw	r16,0(sp)
10005c78:	2027883a 	mov	r19,r4
10005c7c:	2823883a 	mov	r17,r5
10005c80:	20000226 	beq	r4,zero,10005c8c <_fflush_r+0x2c>
10005c84:	20800e17 	ldw	r2,56(r4)
10005c88:	10005726 	beq	r2,zero,10005de8 <_fflush_r+0x188>
10005c8c:	8880030b 	ldhu	r2,12(r17)
10005c90:	10c0020c 	andi	r3,r2,8
10005c94:	18ffffcc 	andi	r3,r3,65535
10005c98:	18e0001c 	xori	r3,r3,32768
10005c9c:	18e00004 	addi	r3,r3,-32768
10005ca0:	1800311e 	bne	r3,zero,10005d68 <_fflush_r+0x108>
10005ca4:	89000117 	ldw	r4,4(r17)
10005ca8:	10c20014 	ori	r3,r2,2048
10005cac:	88c0030d 	sth	r3,12(r17)
10005cb0:	180b883a 	mov	r5,r3
10005cb4:	0100520e 	bge	zero,r4,10005e00 <_fflush_r+0x1a0>
10005cb8:	88c00a17 	ldw	r3,40(r17)
10005cbc:	18002226 	beq	r3,zero,10005d48 <_fflush_r+0xe8>
10005cc0:	1084000c 	andi	r2,r2,4096
10005cc4:	10bfffcc 	andi	r2,r2,65535
10005cc8:	10a0001c 	xori	r2,r2,32768
10005ccc:	10a00004 	addi	r2,r2,-32768
10005cd0:	10004e26 	beq	r2,zero,10005e0c <_fflush_r+0x1ac>
10005cd4:	8c001417 	ldw	r16,80(r17)
10005cd8:	2940010c 	andi	r5,r5,4
10005cdc:	297fffcc 	andi	r5,r5,65535
10005ce0:	2960001c 	xori	r5,r5,32768
10005ce4:	29600004 	addi	r5,r5,-32768
10005ce8:	28000626 	beq	r5,zero,10005d04 <_fflush_r+0xa4>
10005cec:	89000117 	ldw	r4,4(r17)
10005cf0:	88800c17 	ldw	r2,48(r17)
10005cf4:	8121c83a 	sub	r16,r16,r4
10005cf8:	10000226 	beq	r2,zero,10005d04 <_fflush_r+0xa4>
10005cfc:	88800f17 	ldw	r2,60(r17)
10005d00:	80a1c83a 	sub	r16,r16,r2
10005d04:	89400717 	ldw	r5,28(r17)
10005d08:	9809883a 	mov	r4,r19
10005d0c:	800d883a 	mov	r6,r16
10005d10:	000f883a 	mov	r7,zero
10005d14:	183ee83a 	callr	r3
10005d18:	8080281e 	bne	r16,r2,10005dbc <_fflush_r+0x15c>
10005d1c:	8880030b 	ldhu	r2,12(r17)
10005d20:	88c00417 	ldw	r3,16(r17)
10005d24:	88000115 	stw	zero,4(r17)
10005d28:	113dffcc 	andi	r4,r2,63487
10005d2c:	1084000c 	andi	r2,r2,4096
10005d30:	10bfffcc 	andi	r2,r2,65535
10005d34:	10a0001c 	xori	r2,r2,32768
10005d38:	8900030d 	sth	r4,12(r17)
10005d3c:	88c00015 	stw	r3,0(r17)
10005d40:	10a00004 	addi	r2,r2,-32768
10005d44:	10002c1e 	bne	r2,zero,10005df8 <_fflush_r+0x198>
10005d48:	0005883a 	mov	r2,zero
10005d4c:	dfc00417 	ldw	ra,16(sp)
10005d50:	dcc00317 	ldw	r19,12(sp)
10005d54:	dc800217 	ldw	r18,8(sp)
10005d58:	dc400117 	ldw	r17,4(sp)
10005d5c:	dc000017 	ldw	r16,0(sp)
10005d60:	dec00504 	addi	sp,sp,20
10005d64:	f800283a 	ret
10005d68:	8c800417 	ldw	r18,16(r17)
10005d6c:	903ff626 	beq	r18,zero,10005d48 <__alt_data_end+0xf8005d48>
10005d70:	8c000017 	ldw	r16,0(r17)
10005d74:	108000cc 	andi	r2,r2,3
10005d78:	8c800015 	stw	r18,0(r17)
10005d7c:	84a1c83a 	sub	r16,r16,r18
10005d80:	10001b1e 	bne	r2,zero,10005df0 <_fflush_r+0x190>
10005d84:	88800517 	ldw	r2,20(r17)
10005d88:	88800215 	stw	r2,8(r17)
10005d8c:	04000316 	blt	zero,r16,10005d9c <_fflush_r+0x13c>
10005d90:	003fed06 	br	10005d48 <__alt_data_end+0xf8005d48>
10005d94:	90a5883a 	add	r18,r18,r2
10005d98:	043feb0e 	bge	zero,r16,10005d48 <__alt_data_end+0xf8005d48>
10005d9c:	88800917 	ldw	r2,36(r17)
10005da0:	89400717 	ldw	r5,28(r17)
10005da4:	800f883a 	mov	r7,r16
10005da8:	900d883a 	mov	r6,r18
10005dac:	9809883a 	mov	r4,r19
10005db0:	103ee83a 	callr	r2
10005db4:	80a1c83a 	sub	r16,r16,r2
10005db8:	00bff616 	blt	zero,r2,10005d94 <__alt_data_end+0xf8005d94>
10005dbc:	88c0030b 	ldhu	r3,12(r17)
10005dc0:	00bfffc4 	movi	r2,-1
10005dc4:	18c01014 	ori	r3,r3,64
10005dc8:	88c0030d 	sth	r3,12(r17)
10005dcc:	dfc00417 	ldw	ra,16(sp)
10005dd0:	dcc00317 	ldw	r19,12(sp)
10005dd4:	dc800217 	ldw	r18,8(sp)
10005dd8:	dc400117 	ldw	r17,4(sp)
10005ddc:	dc000017 	ldw	r16,0(sp)
10005de0:	dec00504 	addi	sp,sp,20
10005de4:	f800283a 	ret
10005de8:	0005f1c0 	call	10005f1c <__sinit>
10005dec:	003fa706 	br	10005c8c <__alt_data_end+0xf8005c8c>
10005df0:	0005883a 	mov	r2,zero
10005df4:	003fe406 	br	10005d88 <__alt_data_end+0xf8005d88>
10005df8:	8c001415 	stw	r16,80(r17)
10005dfc:	003fd206 	br	10005d48 <__alt_data_end+0xf8005d48>
10005e00:	88c00f17 	ldw	r3,60(r17)
10005e04:	00ffac16 	blt	zero,r3,10005cb8 <__alt_data_end+0xf8005cb8>
10005e08:	003fcf06 	br	10005d48 <__alt_data_end+0xf8005d48>
10005e0c:	89400717 	ldw	r5,28(r17)
10005e10:	9809883a 	mov	r4,r19
10005e14:	000d883a 	mov	r6,zero
10005e18:	01c00044 	movi	r7,1
10005e1c:	183ee83a 	callr	r3
10005e20:	1021883a 	mov	r16,r2
10005e24:	00bfffc4 	movi	r2,-1
10005e28:	80800326 	beq	r16,r2,10005e38 <_fflush_r+0x1d8>
10005e2c:	8940030b 	ldhu	r5,12(r17)
10005e30:	88c00a17 	ldw	r3,40(r17)
10005e34:	003fa806 	br	10005cd8 <__alt_data_end+0xf8005cd8>
10005e38:	98c00017 	ldw	r3,0(r19)
10005e3c:	00800744 	movi	r2,29
10005e40:	18bfde1e 	bne	r3,r2,10005dbc <__alt_data_end+0xf8005dbc>
10005e44:	003fc006 	br	10005d48 <__alt_data_end+0xf8005d48>

10005e48 <fflush>:
10005e48:	200b883a 	mov	r5,r4
10005e4c:	20000426 	beq	r4,zero,10005e60 <fflush+0x18>
10005e50:	00840074 	movhi	r2,4097
10005e54:	10818404 	addi	r2,r2,1552
10005e58:	11000017 	ldw	r4,0(r2)
10005e5c:	0005c601 	jmpi	10005c60 <_fflush_r>
10005e60:	00840074 	movhi	r2,4097
10005e64:	10818304 	addi	r2,r2,1548
10005e68:	11000017 	ldw	r4,0(r2)
10005e6c:	01440034 	movhi	r5,4096
10005e70:	29571804 	addi	r5,r5,23648
10005e74:	0006afc1 	jmpi	10006afc <_fwalk_reent>

10005e78 <__fp_lock>:
10005e78:	0005883a 	mov	r2,zero
10005e7c:	f800283a 	ret

10005e80 <__fp_unlock>:
10005e80:	0005883a 	mov	r2,zero
10005e84:	f800283a 	ret

10005e88 <_cleanup_r>:
10005e88:	01440074 	movhi	r5,4097
10005e8c:	29658b04 	addi	r5,r5,-27092
10005e90:	0006a541 	jmpi	10006a54 <_fwalk>

10005e94 <__sfmoreglue>:
10005e94:	defffc04 	addi	sp,sp,-16
10005e98:	dc800215 	stw	r18,8(sp)
10005e9c:	2825883a 	mov	r18,r5
10005ea0:	dc000015 	stw	r16,0(sp)
10005ea4:	01401704 	movi	r5,92
10005ea8:	2021883a 	mov	r16,r4
10005eac:	9009883a 	mov	r4,r18
10005eb0:	dfc00315 	stw	ra,12(sp)
10005eb4:	dc400115 	stw	r17,4(sp)
10005eb8:	000b2bc0 	call	1000b2bc <__mulsi3>
10005ebc:	8009883a 	mov	r4,r16
10005ec0:	11400304 	addi	r5,r2,12
10005ec4:	1023883a 	mov	r17,r2
10005ec8:	0006e380 	call	10006e38 <_malloc_r>
10005ecc:	1021883a 	mov	r16,r2
10005ed0:	10000726 	beq	r2,zero,10005ef0 <__sfmoreglue+0x5c>
10005ed4:	11000304 	addi	r4,r2,12
10005ed8:	10000015 	stw	zero,0(r2)
10005edc:	14800115 	stw	r18,4(r2)
10005ee0:	11000215 	stw	r4,8(r2)
10005ee4:	000b883a 	mov	r5,zero
10005ee8:	880d883a 	mov	r6,r17
10005eec:	00079800 	call	10007980 <memset>
10005ef0:	8005883a 	mov	r2,r16
10005ef4:	dfc00317 	ldw	ra,12(sp)
10005ef8:	dc800217 	ldw	r18,8(sp)
10005efc:	dc400117 	ldw	r17,4(sp)
10005f00:	dc000017 	ldw	r16,0(sp)
10005f04:	dec00404 	addi	sp,sp,16
10005f08:	f800283a 	ret

10005f0c <_cleanup>:
10005f0c:	00840074 	movhi	r2,4097
10005f10:	10818304 	addi	r2,r2,1548
10005f14:	11000017 	ldw	r4,0(r2)
10005f18:	0005e881 	jmpi	10005e88 <_cleanup_r>

10005f1c <__sinit>:
10005f1c:	20800e17 	ldw	r2,56(r4)
10005f20:	1000401e 	bne	r2,zero,10006024 <__sinit+0x108>
10005f24:	21400117 	ldw	r5,4(r4)
10005f28:	01840034 	movhi	r6,4096
10005f2c:	3197a204 	addi	r6,r6,24200
10005f30:	20c00217 	ldw	r3,8(r4)
10005f34:	21800f15 	stw	r6,60(r4)
10005f38:	2080bb04 	addi	r2,r4,748
10005f3c:	02400044 	movi	r9,1
10005f40:	018000c4 	movi	r6,3
10005f44:	2180b915 	stw	r6,740(r4)
10005f48:	2080ba15 	stw	r2,744(r4)
10005f4c:	22400e15 	stw	r9,56(r4)
10005f50:	20800317 	ldw	r2,12(r4)
10005f54:	2000b815 	stw	zero,736(r4)
10005f58:	02040074 	movhi	r8,4097
10005f5c:	42245c04 	addi	r8,r8,-28304
10005f60:	01c40074 	movhi	r7,4097
10005f64:	39e47104 	addi	r7,r7,-28220
10005f68:	01840074 	movhi	r6,4097
10005f6c:	31a49304 	addi	r6,r6,-28084
10005f70:	01040074 	movhi	r4,4097
10005f74:	2124aa04 	addi	r4,r4,-27992
10005f78:	02800104 	movi	r10,4
10005f7c:	28000015 	stw	zero,0(r5)
10005f80:	28000115 	stw	zero,4(r5)
10005f84:	28000215 	stw	zero,8(r5)
10005f88:	2a80030d 	sth	r10,12(r5)
10005f8c:	2800038d 	sth	zero,14(r5)
10005f90:	28000415 	stw	zero,16(r5)
10005f94:	28000515 	stw	zero,20(r5)
10005f98:	28000615 	stw	zero,24(r5)
10005f9c:	29400715 	stw	r5,28(r5)
10005fa0:	2a000815 	stw	r8,32(r5)
10005fa4:	29c00915 	stw	r7,36(r5)
10005fa8:	29800a15 	stw	r6,40(r5)
10005fac:	29000b15 	stw	r4,44(r5)
10005fb0:	01400284 	movi	r5,10
10005fb4:	18000015 	stw	zero,0(r3)
10005fb8:	18000115 	stw	zero,4(r3)
10005fbc:	18000215 	stw	zero,8(r3)
10005fc0:	1940030d 	sth	r5,12(r3)
10005fc4:	1a40038d 	sth	r9,14(r3)
10005fc8:	18000415 	stw	zero,16(r3)
10005fcc:	18000515 	stw	zero,20(r3)
10005fd0:	18000615 	stw	zero,24(r3)
10005fd4:	18c00715 	stw	r3,28(r3)
10005fd8:	1a000815 	stw	r8,32(r3)
10005fdc:	19c00915 	stw	r7,36(r3)
10005fe0:	19800a15 	stw	r6,40(r3)
10005fe4:	19000b15 	stw	r4,44(r3)
10005fe8:	00c00484 	movi	r3,18
10005fec:	10c0030d 	sth	r3,12(r2)
10005ff0:	00c00084 	movi	r3,2
10005ff4:	10000015 	stw	zero,0(r2)
10005ff8:	10000115 	stw	zero,4(r2)
10005ffc:	10000215 	stw	zero,8(r2)
10006000:	10c0038d 	sth	r3,14(r2)
10006004:	10000415 	stw	zero,16(r2)
10006008:	10000515 	stw	zero,20(r2)
1000600c:	10000615 	stw	zero,24(r2)
10006010:	10800715 	stw	r2,28(r2)
10006014:	12000815 	stw	r8,32(r2)
10006018:	11c00915 	stw	r7,36(r2)
1000601c:	11800a15 	stw	r6,40(r2)
10006020:	11000b15 	stw	r4,44(r2)
10006024:	f800283a 	ret

10006028 <__sfp>:
10006028:	defffc04 	addi	sp,sp,-16
1000602c:	00840074 	movhi	r2,4097
10006030:	10818304 	addi	r2,r2,1548
10006034:	dc400115 	stw	r17,4(sp)
10006038:	14400017 	ldw	r17,0(r2)
1000603c:	dc800215 	stw	r18,8(sp)
10006040:	dfc00315 	stw	ra,12(sp)
10006044:	88800e17 	ldw	r2,56(r17)
10006048:	dc000015 	stw	r16,0(sp)
1000604c:	2025883a 	mov	r18,r4
10006050:	10002826 	beq	r2,zero,100060f4 <__sfp+0xcc>
10006054:	8c40b804 	addi	r17,r17,736
10006058:	043fffc4 	movi	r16,-1
1000605c:	89400117 	ldw	r5,4(r17)
10006060:	88800217 	ldw	r2,8(r17)
10006064:	297fffc4 	addi	r5,r5,-1
10006068:	28000a16 	blt	r5,zero,10006094 <__sfp+0x6c>
1000606c:	10c0030f 	ldh	r3,12(r2)
10006070:	18000c26 	beq	r3,zero,100060a4 <__sfp+0x7c>
10006074:	10c01a04 	addi	r3,r2,104
10006078:	00000206 	br	10006084 <__sfp+0x5c>
1000607c:	19bfe90f 	ldh	r6,-92(r3)
10006080:	30000826 	beq	r6,zero,100060a4 <__sfp+0x7c>
10006084:	297fffc4 	addi	r5,r5,-1
10006088:	18bffd04 	addi	r2,r3,-12
1000608c:	18c01704 	addi	r3,r3,92
10006090:	2c3ffa1e 	bne	r5,r16,1000607c <__alt_data_end+0xf800607c>
10006094:	88800017 	ldw	r2,0(r17)
10006098:	10001926 	beq	r2,zero,10006100 <__sfp+0xd8>
1000609c:	1023883a 	mov	r17,r2
100060a0:	003fee06 	br	1000605c <__alt_data_end+0xf800605c>
100060a4:	00ffffc4 	movi	r3,-1
100060a8:	10c0038d 	sth	r3,14(r2)
100060ac:	00c00044 	movi	r3,1
100060b0:	10c0030d 	sth	r3,12(r2)
100060b4:	10000015 	stw	zero,0(r2)
100060b8:	10000215 	stw	zero,8(r2)
100060bc:	10000115 	stw	zero,4(r2)
100060c0:	10000415 	stw	zero,16(r2)
100060c4:	10000515 	stw	zero,20(r2)
100060c8:	10000615 	stw	zero,24(r2)
100060cc:	10000c15 	stw	zero,48(r2)
100060d0:	10000d15 	stw	zero,52(r2)
100060d4:	10001115 	stw	zero,68(r2)
100060d8:	10001215 	stw	zero,72(r2)
100060dc:	dfc00317 	ldw	ra,12(sp)
100060e0:	dc800217 	ldw	r18,8(sp)
100060e4:	dc400117 	ldw	r17,4(sp)
100060e8:	dc000017 	ldw	r16,0(sp)
100060ec:	dec00404 	addi	sp,sp,16
100060f0:	f800283a 	ret
100060f4:	8809883a 	mov	r4,r17
100060f8:	0005f1c0 	call	10005f1c <__sinit>
100060fc:	003fd506 	br	10006054 <__alt_data_end+0xf8006054>
10006100:	9009883a 	mov	r4,r18
10006104:	01400104 	movi	r5,4
10006108:	0005e940 	call	10005e94 <__sfmoreglue>
1000610c:	88800015 	stw	r2,0(r17)
10006110:	103fe21e 	bne	r2,zero,1000609c <__alt_data_end+0xf800609c>
10006114:	00800304 	movi	r2,12
10006118:	90800015 	stw	r2,0(r18)
1000611c:	0005883a 	mov	r2,zero
10006120:	003fee06 	br	100060dc <__alt_data_end+0xf80060dc>

10006124 <__sfp_lock_acquire>:
10006124:	f800283a 	ret

10006128 <__sfp_lock_release>:
10006128:	f800283a 	ret

1000612c <__sinit_lock_acquire>:
1000612c:	f800283a 	ret

10006130 <__sinit_lock_release>:
10006130:	f800283a 	ret

10006134 <__fp_lock_all>:
10006134:	00840074 	movhi	r2,4097
10006138:	10818404 	addi	r2,r2,1552
1000613c:	11000017 	ldw	r4,0(r2)
10006140:	01440034 	movhi	r5,4096
10006144:	29579e04 	addi	r5,r5,24184
10006148:	0006a541 	jmpi	10006a54 <_fwalk>

1000614c <__fp_unlock_all>:
1000614c:	00840074 	movhi	r2,4097
10006150:	10818404 	addi	r2,r2,1552
10006154:	11000017 	ldw	r4,0(r2)
10006158:	01440034 	movhi	r5,4096
1000615c:	2957a004 	addi	r5,r5,24192
10006160:	0006a541 	jmpi	10006a54 <_fwalk>

10006164 <_malloc_trim_r>:
10006164:	defffb04 	addi	sp,sp,-20
10006168:	dcc00315 	stw	r19,12(sp)
1000616c:	dc800215 	stw	r18,8(sp)
10006170:	dc400115 	stw	r17,4(sp)
10006174:	dc000015 	stw	r16,0(sp)
10006178:	2827883a 	mov	r19,r5
1000617c:	dfc00415 	stw	ra,16(sp)
10006180:	04440074 	movhi	r17,4097
10006184:	8c7bff04 	addi	r17,r17,-4100
10006188:	2021883a 	mov	r16,r4
1000618c:	000bee40 	call	1000bee4 <__malloc_lock>
10006190:	88800217 	ldw	r2,8(r17)
10006194:	14800117 	ldw	r18,4(r2)
10006198:	00bfff04 	movi	r2,-4
1000619c:	90a4703a 	and	r18,r18,r2
100061a0:	9083fbc4 	addi	r2,r18,4079
100061a4:	14e7c83a 	sub	r19,r2,r19
100061a8:	9826d33a 	srli	r19,r19,12
100061ac:	0083ffc4 	movi	r2,4095
100061b0:	9cffffc4 	addi	r19,r19,-1
100061b4:	9826933a 	slli	r19,r19,12
100061b8:	14c0060e 	bge	r2,r19,100061d4 <_malloc_trim_r+0x70>
100061bc:	8009883a 	mov	r4,r16
100061c0:	000b883a 	mov	r5,zero
100061c4:	000910c0 	call	1000910c <_sbrk_r>
100061c8:	88c00217 	ldw	r3,8(r17)
100061cc:	1c87883a 	add	r3,r3,r18
100061d0:	10c00a26 	beq	r2,r3,100061fc <_malloc_trim_r+0x98>
100061d4:	8009883a 	mov	r4,r16
100061d8:	000bf040 	call	1000bf04 <__malloc_unlock>
100061dc:	0005883a 	mov	r2,zero
100061e0:	dfc00417 	ldw	ra,16(sp)
100061e4:	dcc00317 	ldw	r19,12(sp)
100061e8:	dc800217 	ldw	r18,8(sp)
100061ec:	dc400117 	ldw	r17,4(sp)
100061f0:	dc000017 	ldw	r16,0(sp)
100061f4:	dec00504 	addi	sp,sp,20
100061f8:	f800283a 	ret
100061fc:	8009883a 	mov	r4,r16
10006200:	04cbc83a 	sub	r5,zero,r19
10006204:	000910c0 	call	1000910c <_sbrk_r>
10006208:	00ffffc4 	movi	r3,-1
1000620c:	10c01326 	beq	r2,r3,1000625c <_malloc_trim_r+0xf8>
10006210:	00840074 	movhi	r2,4097
10006214:	10883704 	addi	r2,r2,8412
10006218:	11000017 	ldw	r4,0(r2)
1000621c:	88c00217 	ldw	r3,8(r17)
10006220:	94e5c83a 	sub	r18,r18,r19
10006224:	94800054 	ori	r18,r18,1
10006228:	24e7c83a 	sub	r19,r4,r19
1000622c:	1c800115 	stw	r18,4(r3)
10006230:	8009883a 	mov	r4,r16
10006234:	14c00015 	stw	r19,0(r2)
10006238:	000bf040 	call	1000bf04 <__malloc_unlock>
1000623c:	00800044 	movi	r2,1
10006240:	dfc00417 	ldw	ra,16(sp)
10006244:	dcc00317 	ldw	r19,12(sp)
10006248:	dc800217 	ldw	r18,8(sp)
1000624c:	dc400117 	ldw	r17,4(sp)
10006250:	dc000017 	ldw	r16,0(sp)
10006254:	dec00504 	addi	sp,sp,20
10006258:	f800283a 	ret
1000625c:	8009883a 	mov	r4,r16
10006260:	000b883a 	mov	r5,zero
10006264:	000910c0 	call	1000910c <_sbrk_r>
10006268:	88c00217 	ldw	r3,8(r17)
1000626c:	014003c4 	movi	r5,15
10006270:	10c9c83a 	sub	r4,r2,r3
10006274:	293fd70e 	bge	r5,r4,100061d4 <__alt_data_end+0xf80061d4>
10006278:	01440074 	movhi	r5,4097
1000627c:	29418604 	addi	r5,r5,1560
10006280:	29400017 	ldw	r5,0(r5)
10006284:	21000054 	ori	r4,r4,1
10006288:	19000115 	stw	r4,4(r3)
1000628c:	1145c83a 	sub	r2,r2,r5
10006290:	01440074 	movhi	r5,4097
10006294:	29483704 	addi	r5,r5,8412
10006298:	28800015 	stw	r2,0(r5)
1000629c:	003fcd06 	br	100061d4 <__alt_data_end+0xf80061d4>

100062a0 <_free_r>:
100062a0:	defffd04 	addi	sp,sp,-12
100062a4:	dc400115 	stw	r17,4(sp)
100062a8:	dc000015 	stw	r16,0(sp)
100062ac:	dfc00215 	stw	ra,8(sp)
100062b0:	2821883a 	mov	r16,r5
100062b4:	2023883a 	mov	r17,r4
100062b8:	28004b26 	beq	r5,zero,100063e8 <_free_r+0x148>
100062bc:	000bee40 	call	1000bee4 <__malloc_lock>
100062c0:	823fff17 	ldw	r8,-4(r16)
100062c4:	00bfff84 	movi	r2,-2
100062c8:	81bffe04 	addi	r6,r16,-8
100062cc:	4084703a 	and	r2,r8,r2
100062d0:	3087883a 	add	r3,r6,r2
100062d4:	01440074 	movhi	r5,4097
100062d8:	297bff04 	addi	r5,r5,-4100
100062dc:	1a400117 	ldw	r9,4(r3)
100062e0:	29000217 	ldw	r4,8(r5)
100062e4:	01ffff04 	movi	r7,-4
100062e8:	49ce703a 	and	r7,r9,r7
100062ec:	20c06526 	beq	r4,r3,10006484 <_free_r+0x1e4>
100062f0:	19c00115 	stw	r7,4(r3)
100062f4:	4200004c 	andi	r8,r8,1
100062f8:	40003026 	beq	r8,zero,100063bc <_free_r+0x11c>
100062fc:	0009883a 	mov	r4,zero
10006300:	19d1883a 	add	r8,r3,r7
10006304:	42000117 	ldw	r8,4(r8)
10006308:	4200004c 	andi	r8,r8,1
1000630c:	4000061e 	bne	r8,zero,10006328 <_free_r+0x88>
10006310:	11c5883a 	add	r2,r2,r7
10006314:	19c00217 	ldw	r7,8(r3)
10006318:	20004e26 	beq	r4,zero,10006454 <_free_r+0x1b4>
1000631c:	18c00317 	ldw	r3,12(r3)
10006320:	38c00315 	stw	r3,12(r7)
10006324:	19c00215 	stw	r7,8(r3)
10006328:	11c00054 	ori	r7,r2,1
1000632c:	3087883a 	add	r3,r6,r2
10006330:	31c00115 	stw	r7,4(r6)
10006334:	18800015 	stw	r2,0(r3)
10006338:	20001a1e 	bne	r4,zero,100063a4 <_free_r+0x104>
1000633c:	00c07fc4 	movi	r3,511
10006340:	18802e2e 	bgeu	r3,r2,100063fc <_free_r+0x15c>
10006344:	1006d27a 	srli	r3,r2,9
10006348:	01000104 	movi	r4,4
1000634c:	20c06636 	bltu	r4,r3,100064e8 <_free_r+0x248>
10006350:	1008d1ba 	srli	r4,r2,6
10006354:	21000e04 	addi	r4,r4,56
10006358:	210f883a 	add	r7,r4,r4
1000635c:	39cf883a 	add	r7,r7,r7
10006360:	39cf883a 	add	r7,r7,r7
10006364:	29cf883a 	add	r7,r5,r7
10006368:	38c00217 	ldw	r3,8(r7)
1000636c:	01440074 	movhi	r5,4097
10006370:	297bff04 	addi	r5,r5,-4100
10006374:	19c06126 	beq	r3,r7,100064fc <_free_r+0x25c>
10006378:	013fff04 	movi	r4,-4
1000637c:	19400117 	ldw	r5,4(r3)
10006380:	290a703a 	and	r5,r5,r4
10006384:	1140022e 	bgeu	r2,r5,10006390 <_free_r+0xf0>
10006388:	18c00217 	ldw	r3,8(r3)
1000638c:	38fffb1e 	bne	r7,r3,1000637c <__alt_data_end+0xf800637c>
10006390:	18800317 	ldw	r2,12(r3)
10006394:	30800315 	stw	r2,12(r6)
10006398:	30c00215 	stw	r3,8(r6)
1000639c:	11800215 	stw	r6,8(r2)
100063a0:	19800315 	stw	r6,12(r3)
100063a4:	8809883a 	mov	r4,r17
100063a8:	dfc00217 	ldw	ra,8(sp)
100063ac:	dc400117 	ldw	r17,4(sp)
100063b0:	dc000017 	ldw	r16,0(sp)
100063b4:	dec00304 	addi	sp,sp,12
100063b8:	000bf041 	jmpi	1000bf04 <__malloc_unlock>
100063bc:	813ffe17 	ldw	r4,-8(r16)
100063c0:	2a400204 	addi	r9,r5,8
100063c4:	310dc83a 	sub	r6,r6,r4
100063c8:	32000217 	ldw	r8,8(r6)
100063cc:	1105883a 	add	r2,r2,r4
100063d0:	42404326 	beq	r8,r9,100064e0 <_free_r+0x240>
100063d4:	32400317 	ldw	r9,12(r6)
100063d8:	0009883a 	mov	r4,zero
100063dc:	42400315 	stw	r9,12(r8)
100063e0:	4a000215 	stw	r8,8(r9)
100063e4:	003fc606 	br	10006300 <__alt_data_end+0xf8006300>
100063e8:	dfc00217 	ldw	ra,8(sp)
100063ec:	dc400117 	ldw	r17,4(sp)
100063f0:	dc000017 	ldw	r16,0(sp)
100063f4:	dec00304 	addi	sp,sp,12
100063f8:	f800283a 	ret
100063fc:	1004d0fa 	srli	r2,r2,3
10006400:	02000044 	movi	r8,1
10006404:	29c00117 	ldw	r7,4(r5)
10006408:	1087883a 	add	r3,r2,r2
1000640c:	18c7883a 	add	r3,r3,r3
10006410:	1005d0ba 	srai	r2,r2,2
10006414:	18c7883a 	add	r3,r3,r3
10006418:	28c7883a 	add	r3,r5,r3
1000641c:	19000217 	ldw	r4,8(r3)
10006420:	4084983a 	sll	r2,r8,r2
10006424:	30c00315 	stw	r3,12(r6)
10006428:	31000215 	stw	r4,8(r6)
1000642c:	11c4b03a 	or	r2,r2,r7
10006430:	21800315 	stw	r6,12(r4)
10006434:	8809883a 	mov	r4,r17
10006438:	28800115 	stw	r2,4(r5)
1000643c:	19800215 	stw	r6,8(r3)
10006440:	dfc00217 	ldw	ra,8(sp)
10006444:	dc400117 	ldw	r17,4(sp)
10006448:	dc000017 	ldw	r16,0(sp)
1000644c:	dec00304 	addi	sp,sp,12
10006450:	000bf041 	jmpi	1000bf04 <__malloc_unlock>
10006454:	02040074 	movhi	r8,4097
10006458:	423c0104 	addi	r8,r8,-4092
1000645c:	3a3faf1e 	bne	r7,r8,1000631c <__alt_data_end+0xf800631c>
10006460:	29800515 	stw	r6,20(r5)
10006464:	29800415 	stw	r6,16(r5)
10006468:	11000054 	ori	r4,r2,1
1000646c:	3087883a 	add	r3,r6,r2
10006470:	31c00315 	stw	r7,12(r6)
10006474:	31c00215 	stw	r7,8(r6)
10006478:	31000115 	stw	r4,4(r6)
1000647c:	18800015 	stw	r2,0(r3)
10006480:	003fc806 	br	100063a4 <__alt_data_end+0xf80063a4>
10006484:	4200004c 	andi	r8,r8,1
10006488:	3885883a 	add	r2,r7,r2
1000648c:	4000071e 	bne	r8,zero,100064ac <_free_r+0x20c>
10006490:	81fffe17 	ldw	r7,-8(r16)
10006494:	31cdc83a 	sub	r6,r6,r7
10006498:	30c00317 	ldw	r3,12(r6)
1000649c:	31000217 	ldw	r4,8(r6)
100064a0:	11c5883a 	add	r2,r2,r7
100064a4:	20c00315 	stw	r3,12(r4)
100064a8:	19000215 	stw	r4,8(r3)
100064ac:	00c40074 	movhi	r3,4097
100064b0:	18c18704 	addi	r3,r3,1564
100064b4:	18c00017 	ldw	r3,0(r3)
100064b8:	11000054 	ori	r4,r2,1
100064bc:	31000115 	stw	r4,4(r6)
100064c0:	29800215 	stw	r6,8(r5)
100064c4:	10ffb736 	bltu	r2,r3,100063a4 <__alt_data_end+0xf80063a4>
100064c8:	00840074 	movhi	r2,4097
100064cc:	10882f04 	addi	r2,r2,8380
100064d0:	11400017 	ldw	r5,0(r2)
100064d4:	8809883a 	mov	r4,r17
100064d8:	00061640 	call	10006164 <_malloc_trim_r>
100064dc:	003fb106 	br	100063a4 <__alt_data_end+0xf80063a4>
100064e0:	01000044 	movi	r4,1
100064e4:	003f8606 	br	10006300 <__alt_data_end+0xf8006300>
100064e8:	01000504 	movi	r4,20
100064ec:	20c00b36 	bltu	r4,r3,1000651c <_free_r+0x27c>
100064f0:	190016c4 	addi	r4,r3,91
100064f4:	210f883a 	add	r7,r4,r4
100064f8:	003f9806 	br	1000635c <__alt_data_end+0xf800635c>
100064fc:	2009d0ba 	srai	r4,r4,2
10006500:	00800044 	movi	r2,1
10006504:	29c00117 	ldw	r7,4(r5)
10006508:	1108983a 	sll	r4,r2,r4
1000650c:	1805883a 	mov	r2,r3
10006510:	21c8b03a 	or	r4,r4,r7
10006514:	29000115 	stw	r4,4(r5)
10006518:	003f9e06 	br	10006394 <__alt_data_end+0xf8006394>
1000651c:	01001504 	movi	r4,84
10006520:	20c00436 	bltu	r4,r3,10006534 <_free_r+0x294>
10006524:	1008d33a 	srli	r4,r2,12
10006528:	21001b84 	addi	r4,r4,110
1000652c:	210f883a 	add	r7,r4,r4
10006530:	003f8a06 	br	1000635c <__alt_data_end+0xf800635c>
10006534:	01005504 	movi	r4,340
10006538:	20c00436 	bltu	r4,r3,1000654c <_free_r+0x2ac>
1000653c:	1008d3fa 	srli	r4,r2,15
10006540:	21001dc4 	addi	r4,r4,119
10006544:	210f883a 	add	r7,r4,r4
10006548:	003f8406 	br	1000635c <__alt_data_end+0xf800635c>
1000654c:	01015504 	movi	r4,1364
10006550:	20c00436 	bltu	r4,r3,10006564 <_free_r+0x2c4>
10006554:	1008d4ba 	srli	r4,r2,18
10006558:	21001f04 	addi	r4,r4,124
1000655c:	210f883a 	add	r7,r4,r4
10006560:	003f7e06 	br	1000635c <__alt_data_end+0xf800635c>
10006564:	01c03f04 	movi	r7,252
10006568:	01001f84 	movi	r4,126
1000656c:	003f7b06 	br	1000635c <__alt_data_end+0xf800635c>

10006570 <__sfvwrite_r>:
10006570:	30800217 	ldw	r2,8(r6)
10006574:	defff504 	addi	sp,sp,-44
10006578:	dd400615 	stw	r21,24(sp)
1000657c:	dd000515 	stw	r20,20(sp)
10006580:	dc000115 	stw	r16,4(sp)
10006584:	dfc00a15 	stw	ra,40(sp)
10006588:	df000915 	stw	fp,36(sp)
1000658c:	ddc00815 	stw	r23,32(sp)
10006590:	dd800715 	stw	r22,28(sp)
10006594:	dcc00415 	stw	r19,16(sp)
10006598:	dc800315 	stw	r18,12(sp)
1000659c:	dc400215 	stw	r17,8(sp)
100065a0:	3029883a 	mov	r20,r6
100065a4:	202b883a 	mov	r21,r4
100065a8:	2821883a 	mov	r16,r5
100065ac:	10002126 	beq	r2,zero,10006634 <__sfvwrite_r+0xc4>
100065b0:	2880030b 	ldhu	r2,12(r5)
100065b4:	10c0020c 	andi	r3,r2,8
100065b8:	18ffffcc 	andi	r3,r3,65535
100065bc:	18e0001c 	xori	r3,r3,32768
100065c0:	18e00004 	addi	r3,r3,-32768
100065c4:	18002826 	beq	r3,zero,10006668 <__sfvwrite_r+0xf8>
100065c8:	28c00417 	ldw	r3,16(r5)
100065cc:	18002626 	beq	r3,zero,10006668 <__sfvwrite_r+0xf8>
100065d0:	10c0008c 	andi	r3,r2,2
100065d4:	18ffffcc 	andi	r3,r3,65535
100065d8:	18e0001c 	xori	r3,r3,32768
100065dc:	18e00004 	addi	r3,r3,-32768
100065e0:	a4400017 	ldw	r17,0(r20)
100065e4:	18002b26 	beq	r3,zero,10006694 <__sfvwrite_r+0x124>
100065e8:	0027883a 	mov	r19,zero
100065ec:	0025883a 	mov	r18,zero
100065f0:	05810004 	movi	r22,1024
100065f4:	980d883a 	mov	r6,r19
100065f8:	a809883a 	mov	r4,r21
100065fc:	90004f26 	beq	r18,zero,1000673c <__sfvwrite_r+0x1cc>
10006600:	900f883a 	mov	r7,r18
10006604:	81400717 	ldw	r5,28(r16)
10006608:	b480012e 	bgeu	r22,r18,10006610 <__sfvwrite_r+0xa0>
1000660c:	01c10004 	movi	r7,1024
10006610:	80800917 	ldw	r2,36(r16)
10006614:	103ee83a 	callr	r2
10006618:	0080540e 	bge	zero,r2,1000676c <__sfvwrite_r+0x1fc>
1000661c:	a0c00217 	ldw	r3,8(r20)
10006620:	98a7883a 	add	r19,r19,r2
10006624:	90a5c83a 	sub	r18,r18,r2
10006628:	1885c83a 	sub	r2,r3,r2
1000662c:	a0800215 	stw	r2,8(r20)
10006630:	103ff01e 	bne	r2,zero,100065f4 <__alt_data_end+0xf80065f4>
10006634:	0005883a 	mov	r2,zero
10006638:	dfc00a17 	ldw	ra,40(sp)
1000663c:	df000917 	ldw	fp,36(sp)
10006640:	ddc00817 	ldw	r23,32(sp)
10006644:	dd800717 	ldw	r22,28(sp)
10006648:	dd400617 	ldw	r21,24(sp)
1000664c:	dd000517 	ldw	r20,20(sp)
10006650:	dcc00417 	ldw	r19,16(sp)
10006654:	dc800317 	ldw	r18,12(sp)
10006658:	dc400217 	ldw	r17,8(sp)
1000665c:	dc000117 	ldw	r16,4(sp)
10006660:	dec00b04 	addi	sp,sp,44
10006664:	f800283a 	ret
10006668:	a809883a 	mov	r4,r21
1000666c:	800b883a 	mov	r5,r16
10006670:	00042940 	call	10004294 <__swsetup_r>
10006674:	1000f01e 	bne	r2,zero,10006a38 <__sfvwrite_r+0x4c8>
10006678:	8080030b 	ldhu	r2,12(r16)
1000667c:	a4400017 	ldw	r17,0(r20)
10006680:	10c0008c 	andi	r3,r2,2
10006684:	18ffffcc 	andi	r3,r3,65535
10006688:	18e0001c 	xori	r3,r3,32768
1000668c:	18e00004 	addi	r3,r3,-32768
10006690:	183fd51e 	bne	r3,zero,100065e8 <__alt_data_end+0xf80065e8>
10006694:	10c0004c 	andi	r3,r2,1
10006698:	002d883a 	mov	r22,zero
1000669c:	1800381e 	bne	r3,zero,10006780 <__sfvwrite_r+0x210>
100066a0:	0025883a 	mov	r18,zero
100066a4:	90002126 	beq	r18,zero,1000672c <__sfvwrite_r+0x1bc>
100066a8:	10c0800c 	andi	r3,r2,512
100066ac:	18ffffcc 	andi	r3,r3,65535
100066b0:	18e0001c 	xori	r3,r3,32768
100066b4:	18e00004 	addi	r3,r3,-32768
100066b8:	84c00217 	ldw	r19,8(r16)
100066bc:	18006b26 	beq	r3,zero,1000686c <__sfvwrite_r+0x2fc>
100066c0:	980f883a 	mov	r7,r19
100066c4:	94c08636 	bltu	r18,r19,100068e0 <__sfvwrite_r+0x370>
100066c8:	10c1200c 	andi	r3,r2,1152
100066cc:	18009f1e 	bne	r3,zero,1000694c <__sfvwrite_r+0x3dc>
100066d0:	81000017 	ldw	r4,0(r16)
100066d4:	982f883a 	mov	r23,r19
100066d8:	9039883a 	mov	fp,r18
100066dc:	9027883a 	mov	r19,r18
100066e0:	380d883a 	mov	r6,r7
100066e4:	b00b883a 	mov	r5,r22
100066e8:	d9c00015 	stw	r7,0(sp)
100066ec:	00077f40 	call	100077f4 <memmove>
100066f0:	d9c00017 	ldw	r7,0(sp)
100066f4:	81000217 	ldw	r4,8(r16)
100066f8:	80800017 	ldw	r2,0(r16)
100066fc:	25efc83a 	sub	r23,r4,r23
10006700:	11cf883a 	add	r7,r2,r7
10006704:	85c00215 	stw	r23,8(r16)
10006708:	81c00015 	stw	r7,0(r16)
1000670c:	a0800217 	ldw	r2,8(r20)
10006710:	b72d883a 	add	r22,r22,fp
10006714:	9725c83a 	sub	r18,r18,fp
10006718:	14e7c83a 	sub	r19,r2,r19
1000671c:	a4c00215 	stw	r19,8(r20)
10006720:	983fc426 	beq	r19,zero,10006634 <__alt_data_end+0xf8006634>
10006724:	8080030b 	ldhu	r2,12(r16)
10006728:	903fdf1e 	bne	r18,zero,100066a8 <__alt_data_end+0xf80066a8>
1000672c:	8d800017 	ldw	r22,0(r17)
10006730:	8c800117 	ldw	r18,4(r17)
10006734:	8c400204 	addi	r17,r17,8
10006738:	003fda06 	br	100066a4 <__alt_data_end+0xf80066a4>
1000673c:	8cc00017 	ldw	r19,0(r17)
10006740:	8c800117 	ldw	r18,4(r17)
10006744:	8c400204 	addi	r17,r17,8
10006748:	003faa06 	br	100065f4 <__alt_data_end+0xf80065f4>
1000674c:	0008aac0 	call	10008aac <_realloc_r>
10006750:	102f883a 	mov	r23,r2
10006754:	10009f1e 	bne	r2,zero,100069d4 <__sfvwrite_r+0x464>
10006758:	81400417 	ldw	r5,16(r16)
1000675c:	a809883a 	mov	r4,r21
10006760:	00062a00 	call	100062a0 <_free_r>
10006764:	00800304 	movi	r2,12
10006768:	a8800015 	stw	r2,0(r21)
1000676c:	80c0030b 	ldhu	r3,12(r16)
10006770:	00bfffc4 	movi	r2,-1
10006774:	18c01014 	ori	r3,r3,64
10006778:	80c0030d 	sth	r3,12(r16)
1000677c:	003fae06 	br	10006638 <__alt_data_end+0xf8006638>
10006780:	0007883a 	mov	r3,zero
10006784:	0039883a 	mov	fp,zero
10006788:	0025883a 	mov	r18,zero
1000678c:	90001e26 	beq	r18,zero,10006808 <__sfvwrite_r+0x298>
10006790:	18006526 	beq	r3,zero,10006928 <__sfvwrite_r+0x3b8>
10006794:	b02f883a 	mov	r23,r22
10006798:	9580012e 	bgeu	r18,r22,100067a0 <__sfvwrite_r+0x230>
1000679c:	902f883a 	mov	r23,r18
100067a0:	81000017 	ldw	r4,0(r16)
100067a4:	80800417 	ldw	r2,16(r16)
100067a8:	84c00217 	ldw	r19,8(r16)
100067ac:	81c00517 	ldw	r7,20(r16)
100067b0:	1100022e 	bgeu	r2,r4,100067bc <__sfvwrite_r+0x24c>
100067b4:	99e7883a 	add	r19,r19,r7
100067b8:	9dc01816 	blt	r19,r23,1000681c <__sfvwrite_r+0x2ac>
100067bc:	b9c03b16 	blt	r23,r7,100068ac <__sfvwrite_r+0x33c>
100067c0:	80800917 	ldw	r2,36(r16)
100067c4:	81400717 	ldw	r5,28(r16)
100067c8:	a809883a 	mov	r4,r21
100067cc:	d8c00015 	stw	r3,0(sp)
100067d0:	e00d883a 	mov	r6,fp
100067d4:	103ee83a 	callr	r2
100067d8:	1027883a 	mov	r19,r2
100067dc:	d8c00017 	ldw	r3,0(sp)
100067e0:	00bfe20e 	bge	zero,r2,1000676c <__alt_data_end+0xf800676c>
100067e4:	b4edc83a 	sub	r22,r22,r19
100067e8:	b0001a26 	beq	r22,zero,10006854 <__sfvwrite_r+0x2e4>
100067ec:	a0800217 	ldw	r2,8(r20)
100067f0:	e4f9883a 	add	fp,fp,r19
100067f4:	94e5c83a 	sub	r18,r18,r19
100067f8:	14e7c83a 	sub	r19,r2,r19
100067fc:	a4c00215 	stw	r19,8(r20)
10006800:	983f8c26 	beq	r19,zero,10006634 <__alt_data_end+0xf8006634>
10006804:	903fe21e 	bne	r18,zero,10006790 <__alt_data_end+0xf8006790>
10006808:	8f000017 	ldw	fp,0(r17)
1000680c:	8c800117 	ldw	r18,4(r17)
10006810:	0007883a 	mov	r3,zero
10006814:	8c400204 	addi	r17,r17,8
10006818:	003fdc06 	br	1000678c <__alt_data_end+0xf800678c>
1000681c:	e00b883a 	mov	r5,fp
10006820:	980d883a 	mov	r6,r19
10006824:	d8c00015 	stw	r3,0(sp)
10006828:	00077f40 	call	100077f4 <memmove>
1000682c:	80800017 	ldw	r2,0(r16)
10006830:	a809883a 	mov	r4,r21
10006834:	800b883a 	mov	r5,r16
10006838:	14c5883a 	add	r2,r2,r19
1000683c:	80800015 	stw	r2,0(r16)
10006840:	0005c600 	call	10005c60 <_fflush_r>
10006844:	d8c00017 	ldw	r3,0(sp)
10006848:	103fc81e 	bne	r2,zero,1000676c <__alt_data_end+0xf800676c>
1000684c:	b4edc83a 	sub	r22,r22,r19
10006850:	b03fe61e 	bne	r22,zero,100067ec <__alt_data_end+0xf80067ec>
10006854:	a809883a 	mov	r4,r21
10006858:	800b883a 	mov	r5,r16
1000685c:	0005c600 	call	10005c60 <_fflush_r>
10006860:	103fc21e 	bne	r2,zero,1000676c <__alt_data_end+0xf800676c>
10006864:	0007883a 	mov	r3,zero
10006868:	003fe006 	br	100067ec <__alt_data_end+0xf80067ec>
1000686c:	81000017 	ldw	r4,0(r16)
10006870:	80800417 	ldw	r2,16(r16)
10006874:	1100022e 	bgeu	r2,r4,10006880 <__sfvwrite_r+0x310>
10006878:	9839883a 	mov	fp,r19
1000687c:	9c806036 	bltu	r19,r18,10006a00 <__sfvwrite_r+0x490>
10006880:	81c00517 	ldw	r7,20(r16)
10006884:	91c01c36 	bltu	r18,r7,100068f8 <__sfvwrite_r+0x388>
10006888:	80800917 	ldw	r2,36(r16)
1000688c:	81400717 	ldw	r5,28(r16)
10006890:	a809883a 	mov	r4,r21
10006894:	b00d883a 	mov	r6,r22
10006898:	103ee83a 	callr	r2
1000689c:	1027883a 	mov	r19,r2
100068a0:	00bfb20e 	bge	zero,r2,1000676c <__alt_data_end+0xf800676c>
100068a4:	1039883a 	mov	fp,r2
100068a8:	003f9806 	br	1000670c <__alt_data_end+0xf800670c>
100068ac:	b80d883a 	mov	r6,r23
100068b0:	e00b883a 	mov	r5,fp
100068b4:	d8c00015 	stw	r3,0(sp)
100068b8:	00077f40 	call	100077f4 <memmove>
100068bc:	80800217 	ldw	r2,8(r16)
100068c0:	81000017 	ldw	r4,0(r16)
100068c4:	b827883a 	mov	r19,r23
100068c8:	15c5c83a 	sub	r2,r2,r23
100068cc:	25ef883a 	add	r23,r4,r23
100068d0:	80800215 	stw	r2,8(r16)
100068d4:	85c00015 	stw	r23,0(r16)
100068d8:	d8c00017 	ldw	r3,0(sp)
100068dc:	003fc106 	br	100067e4 <__alt_data_end+0xf80067e4>
100068e0:	81000017 	ldw	r4,0(r16)
100068e4:	902f883a 	mov	r23,r18
100068e8:	9039883a 	mov	fp,r18
100068ec:	9027883a 	mov	r19,r18
100068f0:	900f883a 	mov	r7,r18
100068f4:	003f7a06 	br	100066e0 <__alt_data_end+0xf80066e0>
100068f8:	b00b883a 	mov	r5,r22
100068fc:	900d883a 	mov	r6,r18
10006900:	00077f40 	call	100077f4 <memmove>
10006904:	80c00217 	ldw	r3,8(r16)
10006908:	80800017 	ldw	r2,0(r16)
1000690c:	9027883a 	mov	r19,r18
10006910:	1c87c83a 	sub	r3,r3,r18
10006914:	1485883a 	add	r2,r2,r18
10006918:	80c00215 	stw	r3,8(r16)
1000691c:	80800015 	stw	r2,0(r16)
10006920:	9039883a 	mov	fp,r18
10006924:	003f7906 	br	1000670c <__alt_data_end+0xf800670c>
10006928:	e009883a 	mov	r4,fp
1000692c:	01400284 	movi	r5,10
10006930:	900d883a 	mov	r6,r18
10006934:	00075bc0 	call	100075bc <memchr>
10006938:	10003c26 	beq	r2,zero,10006a2c <__sfvwrite_r+0x4bc>
1000693c:	15800044 	addi	r22,r2,1
10006940:	b72dc83a 	sub	r22,r22,fp
10006944:	00c00044 	movi	r3,1
10006948:	003f9206 	br	10006794 <__alt_data_end+0xf8006794>
1000694c:	81000517 	ldw	r4,20(r16)
10006950:	81400417 	ldw	r5,16(r16)
10006954:	80c00017 	ldw	r3,0(r16)
10006958:	210d883a 	add	r6,r4,r4
1000695c:	3109883a 	add	r4,r6,r4
10006960:	2026d7fa 	srli	r19,r4,31
10006964:	1979c83a 	sub	fp,r3,r5
10006968:	e1800044 	addi	r6,fp,1
1000696c:	9909883a 	add	r4,r19,r4
10006970:	2027d07a 	srai	r19,r4,1
10006974:	3489883a 	add	r4,r6,r18
10006978:	980d883a 	mov	r6,r19
1000697c:	9900022e 	bgeu	r19,r4,10006988 <__sfvwrite_r+0x418>
10006980:	2027883a 	mov	r19,r4
10006984:	200d883a 	mov	r6,r4
10006988:	1081000c 	andi	r2,r2,1024
1000698c:	10bfffcc 	andi	r2,r2,65535
10006990:	10a0001c 	xori	r2,r2,32768
10006994:	10a00004 	addi	r2,r2,-32768
10006998:	a809883a 	mov	r4,r21
1000699c:	103f6b26 	beq	r2,zero,1000674c <__alt_data_end+0xf800674c>
100069a0:	300b883a 	mov	r5,r6
100069a4:	0006e380 	call	10006e38 <_malloc_r>
100069a8:	102f883a 	mov	r23,r2
100069ac:	103f6d26 	beq	r2,zero,10006764 <__alt_data_end+0xf8006764>
100069b0:	81400417 	ldw	r5,16(r16)
100069b4:	1009883a 	mov	r4,r2
100069b8:	e00d883a 	mov	r6,fp
100069bc:	00076b40 	call	100076b4 <memcpy>
100069c0:	8080030b 	ldhu	r2,12(r16)
100069c4:	00fedfc4 	movi	r3,-1153
100069c8:	10c4703a 	and	r2,r2,r3
100069cc:	10802014 	ori	r2,r2,128
100069d0:	8080030d 	sth	r2,12(r16)
100069d4:	bf09883a 	add	r4,r23,fp
100069d8:	9f07c83a 	sub	r3,r19,fp
100069dc:	85c00415 	stw	r23,16(r16)
100069e0:	84c00515 	stw	r19,20(r16)
100069e4:	81000015 	stw	r4,0(r16)
100069e8:	902f883a 	mov	r23,r18
100069ec:	80c00215 	stw	r3,8(r16)
100069f0:	9039883a 	mov	fp,r18
100069f4:	9027883a 	mov	r19,r18
100069f8:	900f883a 	mov	r7,r18
100069fc:	003f3806 	br	100066e0 <__alt_data_end+0xf80066e0>
10006a00:	b00b883a 	mov	r5,r22
10006a04:	980d883a 	mov	r6,r19
10006a08:	00077f40 	call	100077f4 <memmove>
10006a0c:	80800017 	ldw	r2,0(r16)
10006a10:	a809883a 	mov	r4,r21
10006a14:	800b883a 	mov	r5,r16
10006a18:	14c5883a 	add	r2,r2,r19
10006a1c:	80800015 	stw	r2,0(r16)
10006a20:	0005c600 	call	10005c60 <_fflush_r>
10006a24:	103f3926 	beq	r2,zero,1000670c <__alt_data_end+0xf800670c>
10006a28:	003f5006 	br	1000676c <__alt_data_end+0xf800676c>
10006a2c:	95800044 	addi	r22,r18,1
10006a30:	00c00044 	movi	r3,1
10006a34:	003f5706 	br	10006794 <__alt_data_end+0xf8006794>
10006a38:	80c0030b 	ldhu	r3,12(r16)
10006a3c:	00bfffc4 	movi	r2,-1
10006a40:	18c01014 	ori	r3,r3,64
10006a44:	80c0030d 	sth	r3,12(r16)
10006a48:	00c00244 	movi	r3,9
10006a4c:	a8c00015 	stw	r3,0(r21)
10006a50:	003ef906 	br	10006638 <__alt_data_end+0xf8006638>

10006a54 <_fwalk>:
10006a54:	defff904 	addi	sp,sp,-28
10006a58:	dcc00315 	stw	r19,12(sp)
10006a5c:	24c0b804 	addi	r19,r4,736
10006a60:	dd400515 	stw	r21,20(sp)
10006a64:	dd000415 	stw	r20,16(sp)
10006a68:	dfc00615 	stw	ra,24(sp)
10006a6c:	dc800215 	stw	r18,8(sp)
10006a70:	dc400115 	stw	r17,4(sp)
10006a74:	dc000015 	stw	r16,0(sp)
10006a78:	282b883a 	mov	r21,r5
10006a7c:	0029883a 	mov	r20,zero
10006a80:	00061240 	call	10006124 <__sfp_lock_acquire>
10006a84:	98001226 	beq	r19,zero,10006ad0 <_fwalk+0x7c>
10006a88:	04bfffc4 	movi	r18,-1
10006a8c:	9c400117 	ldw	r17,4(r19)
10006a90:	9c000217 	ldw	r16,8(r19)
10006a94:	8c7fffc4 	addi	r17,r17,-1
10006a98:	88000b16 	blt	r17,zero,10006ac8 <_fwalk+0x74>
10006a9c:	84000304 	addi	r16,r16,12
10006aa0:	80c0000f 	ldh	r3,0(r16)
10006aa4:	8c7fffc4 	addi	r17,r17,-1
10006aa8:	813ffd04 	addi	r4,r16,-12
10006aac:	18000426 	beq	r3,zero,10006ac0 <_fwalk+0x6c>
10006ab0:	80c0008f 	ldh	r3,2(r16)
10006ab4:	1c800226 	beq	r3,r18,10006ac0 <_fwalk+0x6c>
10006ab8:	a83ee83a 	callr	r21
10006abc:	a0a8b03a 	or	r20,r20,r2
10006ac0:	84001704 	addi	r16,r16,92
10006ac4:	8cbff61e 	bne	r17,r18,10006aa0 <__alt_data_end+0xf8006aa0>
10006ac8:	9cc00017 	ldw	r19,0(r19)
10006acc:	983fef1e 	bne	r19,zero,10006a8c <__alt_data_end+0xf8006a8c>
10006ad0:	00061280 	call	10006128 <__sfp_lock_release>
10006ad4:	a005883a 	mov	r2,r20
10006ad8:	dfc00617 	ldw	ra,24(sp)
10006adc:	dd400517 	ldw	r21,20(sp)
10006ae0:	dd000417 	ldw	r20,16(sp)
10006ae4:	dcc00317 	ldw	r19,12(sp)
10006ae8:	dc800217 	ldw	r18,8(sp)
10006aec:	dc400117 	ldw	r17,4(sp)
10006af0:	dc000017 	ldw	r16,0(sp)
10006af4:	dec00704 	addi	sp,sp,28
10006af8:	f800283a 	ret

10006afc <_fwalk_reent>:
10006afc:	defff804 	addi	sp,sp,-32
10006b00:	dcc00315 	stw	r19,12(sp)
10006b04:	24c0b804 	addi	r19,r4,736
10006b08:	dd800615 	stw	r22,24(sp)
10006b0c:	dd400515 	stw	r21,20(sp)
10006b10:	dd000415 	stw	r20,16(sp)
10006b14:	dfc00715 	stw	ra,28(sp)
10006b18:	dc800215 	stw	r18,8(sp)
10006b1c:	dc400115 	stw	r17,4(sp)
10006b20:	dc000015 	stw	r16,0(sp)
10006b24:	2029883a 	mov	r20,r4
10006b28:	282b883a 	mov	r21,r5
10006b2c:	002d883a 	mov	r22,zero
10006b30:	00061240 	call	10006124 <__sfp_lock_acquire>
10006b34:	98001326 	beq	r19,zero,10006b84 <_fwalk_reent+0x88>
10006b38:	04bfffc4 	movi	r18,-1
10006b3c:	9c400117 	ldw	r17,4(r19)
10006b40:	9c000217 	ldw	r16,8(r19)
10006b44:	8c7fffc4 	addi	r17,r17,-1
10006b48:	88000c16 	blt	r17,zero,10006b7c <_fwalk_reent+0x80>
10006b4c:	84000304 	addi	r16,r16,12
10006b50:	80c0000f 	ldh	r3,0(r16)
10006b54:	8c7fffc4 	addi	r17,r17,-1
10006b58:	817ffd04 	addi	r5,r16,-12
10006b5c:	18000526 	beq	r3,zero,10006b74 <_fwalk_reent+0x78>
10006b60:	80c0008f 	ldh	r3,2(r16)
10006b64:	a009883a 	mov	r4,r20
10006b68:	1c800226 	beq	r3,r18,10006b74 <_fwalk_reent+0x78>
10006b6c:	a83ee83a 	callr	r21
10006b70:	b0acb03a 	or	r22,r22,r2
10006b74:	84001704 	addi	r16,r16,92
10006b78:	8cbff51e 	bne	r17,r18,10006b50 <__alt_data_end+0xf8006b50>
10006b7c:	9cc00017 	ldw	r19,0(r19)
10006b80:	983fee1e 	bne	r19,zero,10006b3c <__alt_data_end+0xf8006b3c>
10006b84:	00061280 	call	10006128 <__sfp_lock_release>
10006b88:	b005883a 	mov	r2,r22
10006b8c:	dfc00717 	ldw	ra,28(sp)
10006b90:	dd800617 	ldw	r22,24(sp)
10006b94:	dd400517 	ldw	r21,20(sp)
10006b98:	dd000417 	ldw	r20,16(sp)
10006b9c:	dcc00317 	ldw	r19,12(sp)
10006ba0:	dc800217 	ldw	r18,8(sp)
10006ba4:	dc400117 	ldw	r17,4(sp)
10006ba8:	dc000017 	ldw	r16,0(sp)
10006bac:	dec00804 	addi	sp,sp,32
10006bb0:	f800283a 	ret

10006bb4 <_setlocale_r>:
10006bb4:	defffc04 	addi	sp,sp,-16
10006bb8:	dc800215 	stw	r18,8(sp)
10006bbc:	dc400115 	stw	r17,4(sp)
10006bc0:	dc000015 	stw	r16,0(sp)
10006bc4:	dfc00315 	stw	ra,12(sp)
10006bc8:	3021883a 	mov	r16,r6
10006bcc:	2023883a 	mov	r17,r4
10006bd0:	2825883a 	mov	r18,r5
10006bd4:	30001626 	beq	r6,zero,10006c30 <_setlocale_r+0x7c>
10006bd8:	3009883a 	mov	r4,r6
10006bdc:	01440074 	movhi	r5,4097
10006be0:	297a5004 	addi	r5,r5,-5824
10006be4:	00092b00 	call	100092b0 <strcmp>
10006be8:	10000a1e 	bne	r2,zero,10006c14 <_setlocale_r+0x60>
10006bec:	8c800c15 	stw	r18,48(r17)
10006bf0:	8c000d15 	stw	r16,52(r17)
10006bf4:	00840074 	movhi	r2,4097
10006bf8:	10ba5004 	addi	r2,r2,-5824
10006bfc:	dfc00317 	ldw	ra,12(sp)
10006c00:	dc800217 	ldw	r18,8(sp)
10006c04:	dc400117 	ldw	r17,4(sp)
10006c08:	dc000017 	ldw	r16,0(sp)
10006c0c:	dec00404 	addi	sp,sp,16
10006c10:	f800283a 	ret
10006c14:	8009883a 	mov	r4,r16
10006c18:	01440074 	movhi	r5,4097
10006c1c:	297a3b04 	addi	r5,r5,-5908
10006c20:	00092b00 	call	100092b0 <strcmp>
10006c24:	103ff126 	beq	r2,zero,10006bec <__alt_data_end+0xf8006bec>
10006c28:	0005883a 	mov	r2,zero
10006c2c:	003ff306 	br	10006bfc <__alt_data_end+0xf8006bfc>
10006c30:	00840074 	movhi	r2,4097
10006c34:	10ba5004 	addi	r2,r2,-5824
10006c38:	dfc00317 	ldw	ra,12(sp)
10006c3c:	dc800217 	ldw	r18,8(sp)
10006c40:	dc400117 	ldw	r17,4(sp)
10006c44:	dc000017 	ldw	r16,0(sp)
10006c48:	dec00404 	addi	sp,sp,16
10006c4c:	f800283a 	ret

10006c50 <__locale_charset>:
10006c50:	00840074 	movhi	r2,4097
10006c54:	10ba5104 	addi	r2,r2,-5820
10006c58:	f800283a 	ret

10006c5c <_localeconv_r>:
10006c5c:	00840074 	movhi	r2,4097
10006c60:	10ba5504 	addi	r2,r2,-5804
10006c64:	f800283a 	ret

10006c68 <setlocale>:
10006c68:	00c40074 	movhi	r3,4097
10006c6c:	18c18404 	addi	r3,r3,1552
10006c70:	2005883a 	mov	r2,r4
10006c74:	19000017 	ldw	r4,0(r3)
10006c78:	280d883a 	mov	r6,r5
10006c7c:	100b883a 	mov	r5,r2
10006c80:	0006bb41 	jmpi	10006bb4 <_setlocale_r>

10006c84 <localeconv>:
10006c84:	00840074 	movhi	r2,4097
10006c88:	10ba5504 	addi	r2,r2,-5804
10006c8c:	f800283a 	ret

10006c90 <__smakebuf_r>:
10006c90:	2880030b 	ldhu	r2,12(r5)
10006c94:	deffed04 	addi	sp,sp,-76
10006c98:	dc401015 	stw	r17,64(sp)
10006c9c:	10c0008c 	andi	r3,r2,2
10006ca0:	18ffffcc 	andi	r3,r3,65535
10006ca4:	18e0001c 	xori	r3,r3,32768
10006ca8:	dc000f15 	stw	r16,60(sp)
10006cac:	dfc01215 	stw	ra,72(sp)
10006cb0:	dc801115 	stw	r18,68(sp)
10006cb4:	18e00004 	addi	r3,r3,-32768
10006cb8:	2821883a 	mov	r16,r5
10006cbc:	2023883a 	mov	r17,r4
10006cc0:	1800381e 	bne	r3,zero,10006da4 <__smakebuf_r+0x114>
10006cc4:	2940038f 	ldh	r5,14(r5)
10006cc8:	28002d16 	blt	r5,zero,10006d80 <__smakebuf_r+0xf0>
10006ccc:	d80d883a 	mov	r6,sp
10006cd0:	00096400 	call	10009640 <_fstat_r>
10006cd4:	10002916 	blt	r2,zero,10006d7c <__smakebuf_r+0xec>
10006cd8:	d8800117 	ldw	r2,4(sp)
10006cdc:	00e00014 	movui	r3,32768
10006ce0:	10bc000c 	andi	r2,r2,61440
10006ce4:	10c03c26 	beq	r2,r3,10006dd8 <__smakebuf_r+0x148>
10006ce8:	80c0030b 	ldhu	r3,12(r16)
10006cec:	18c20014 	ori	r3,r3,2048
10006cf0:	80c0030d 	sth	r3,12(r16)
10006cf4:	00c80004 	movi	r3,8192
10006cf8:	10c00c1e 	bne	r2,r3,10006d2c <__smakebuf_r+0x9c>
10006cfc:	8140038f 	ldh	r5,14(r16)
10006d00:	8809883a 	mov	r4,r17
10006d04:	00096a80 	call	100096a8 <_isatty_r>
10006d08:	10000826 	beq	r2,zero,10006d2c <__smakebuf_r+0x9c>
10006d0c:	80c0030b 	ldhu	r3,12(r16)
10006d10:	808010c4 	addi	r2,r16,67
10006d14:	80800015 	stw	r2,0(r16)
10006d18:	18c00054 	ori	r3,r3,1
10006d1c:	80800415 	stw	r2,16(r16)
10006d20:	00800044 	movi	r2,1
10006d24:	80c0030d 	sth	r3,12(r16)
10006d28:	80800515 	stw	r2,20(r16)
10006d2c:	04810004 	movi	r18,1024
10006d30:	8809883a 	mov	r4,r17
10006d34:	900b883a 	mov	r5,r18
10006d38:	0006e380 	call	10006e38 <_malloc_r>
10006d3c:	10003026 	beq	r2,zero,10006e00 <__smakebuf_r+0x170>
10006d40:	80c0030b 	ldhu	r3,12(r16)
10006d44:	01040034 	movhi	r4,4096
10006d48:	2117a204 	addi	r4,r4,24200
10006d4c:	89000f15 	stw	r4,60(r17)
10006d50:	18c02014 	ori	r3,r3,128
10006d54:	80c0030d 	sth	r3,12(r16)
10006d58:	80800015 	stw	r2,0(r16)
10006d5c:	80800415 	stw	r2,16(r16)
10006d60:	84800515 	stw	r18,20(r16)
10006d64:	dfc01217 	ldw	ra,72(sp)
10006d68:	dc801117 	ldw	r18,68(sp)
10006d6c:	dc401017 	ldw	r17,64(sp)
10006d70:	dc000f17 	ldw	r16,60(sp)
10006d74:	dec01304 	addi	sp,sp,76
10006d78:	f800283a 	ret
10006d7c:	8080030b 	ldhu	r2,12(r16)
10006d80:	10c0200c 	andi	r3,r2,128
10006d84:	18ffffcc 	andi	r3,r3,65535
10006d88:	18e0001c 	xori	r3,r3,32768
10006d8c:	18e00004 	addi	r3,r3,-32768
10006d90:	18000f1e 	bne	r3,zero,10006dd0 <__smakebuf_r+0x140>
10006d94:	04810004 	movi	r18,1024
10006d98:	10820014 	ori	r2,r2,2048
10006d9c:	8080030d 	sth	r2,12(r16)
10006da0:	003fe306 	br	10006d30 <__alt_data_end+0xf8006d30>
10006da4:	288010c4 	addi	r2,r5,67
10006da8:	28800015 	stw	r2,0(r5)
10006dac:	28800415 	stw	r2,16(r5)
10006db0:	00800044 	movi	r2,1
10006db4:	28800515 	stw	r2,20(r5)
10006db8:	dfc01217 	ldw	ra,72(sp)
10006dbc:	dc801117 	ldw	r18,68(sp)
10006dc0:	dc401017 	ldw	r17,64(sp)
10006dc4:	dc000f17 	ldw	r16,60(sp)
10006dc8:	dec01304 	addi	sp,sp,76
10006dcc:	f800283a 	ret
10006dd0:	04801004 	movi	r18,64
10006dd4:	003ff006 	br	10006d98 <__alt_data_end+0xf8006d98>
10006dd8:	81000a17 	ldw	r4,40(r16)
10006ddc:	00c40074 	movhi	r3,4097
10006de0:	18e49304 	addi	r3,r3,-28084
10006de4:	20ffc01e 	bne	r4,r3,10006ce8 <__alt_data_end+0xf8006ce8>
10006de8:	8080030b 	ldhu	r2,12(r16)
10006dec:	00c10004 	movi	r3,1024
10006df0:	80c01315 	stw	r3,76(r16)
10006df4:	10c4b03a 	or	r2,r2,r3
10006df8:	8080030d 	sth	r2,12(r16)
10006dfc:	003fcb06 	br	10006d2c <__alt_data_end+0xf8006d2c>
10006e00:	8080030b 	ldhu	r2,12(r16)
10006e04:	10c0800c 	andi	r3,r2,512
10006e08:	18ffffcc 	andi	r3,r3,65535
10006e0c:	18e0001c 	xori	r3,r3,32768
10006e10:	18e00004 	addi	r3,r3,-32768
10006e14:	183fd31e 	bne	r3,zero,10006d64 <__alt_data_end+0xf8006d64>
10006e18:	10800094 	ori	r2,r2,2
10006e1c:	80c010c4 	addi	r3,r16,67
10006e20:	8080030d 	sth	r2,12(r16)
10006e24:	00800044 	movi	r2,1
10006e28:	80c00015 	stw	r3,0(r16)
10006e2c:	80c00415 	stw	r3,16(r16)
10006e30:	80800515 	stw	r2,20(r16)
10006e34:	003fcb06 	br	10006d64 <__alt_data_end+0xf8006d64>

10006e38 <_malloc_r>:
10006e38:	defff604 	addi	sp,sp,-40
10006e3c:	dc800215 	stw	r18,8(sp)
10006e40:	dfc00915 	stw	ra,36(sp)
10006e44:	df000815 	stw	fp,32(sp)
10006e48:	ddc00715 	stw	r23,28(sp)
10006e4c:	dd800615 	stw	r22,24(sp)
10006e50:	dd400515 	stw	r21,20(sp)
10006e54:	dd000415 	stw	r20,16(sp)
10006e58:	dcc00315 	stw	r19,12(sp)
10006e5c:	dc400115 	stw	r17,4(sp)
10006e60:	dc000015 	stw	r16,0(sp)
10006e64:	288002c4 	addi	r2,r5,11
10006e68:	00c00584 	movi	r3,22
10006e6c:	2025883a 	mov	r18,r4
10006e70:	18802b2e 	bgeu	r3,r2,10006f20 <_malloc_r+0xe8>
10006e74:	047ffe04 	movi	r17,-8
10006e78:	1462703a 	and	r17,r2,r17
10006e7c:	88002a16 	blt	r17,zero,10006f28 <_malloc_r+0xf0>
10006e80:	89402936 	bltu	r17,r5,10006f28 <_malloc_r+0xf0>
10006e84:	9009883a 	mov	r4,r18
10006e88:	000bee40 	call	1000bee4 <__malloc_lock>
10006e8c:	00807dc4 	movi	r2,503
10006e90:	14402936 	bltu	r2,r17,10006f38 <_malloc_r+0x100>
10006e94:	8808d0fa 	srli	r4,r17,3
10006e98:	04c40074 	movhi	r19,4097
10006e9c:	9cfbff04 	addi	r19,r19,-4100
10006ea0:	2105883a 	add	r2,r4,r4
10006ea4:	1085883a 	add	r2,r2,r2
10006ea8:	1085883a 	add	r2,r2,r2
10006eac:	9885883a 	add	r2,r19,r2
10006eb0:	14000317 	ldw	r16,12(r2)
10006eb4:	80815526 	beq	r16,r2,1000740c <_malloc_r+0x5d4>
10006eb8:	81000117 	ldw	r4,4(r16)
10006ebc:	00bfff04 	movi	r2,-4
10006ec0:	80c00317 	ldw	r3,12(r16)
10006ec4:	2084703a 	and	r2,r4,r2
10006ec8:	8085883a 	add	r2,r16,r2
10006ecc:	11800117 	ldw	r6,4(r2)
10006ed0:	81400217 	ldw	r5,8(r16)
10006ed4:	9009883a 	mov	r4,r18
10006ed8:	31800054 	ori	r6,r6,1
10006edc:	11800115 	stw	r6,4(r2)
10006ee0:	28c00315 	stw	r3,12(r5)
10006ee4:	19400215 	stw	r5,8(r3)
10006ee8:	000bf040 	call	1000bf04 <__malloc_unlock>
10006eec:	80800204 	addi	r2,r16,8
10006ef0:	dfc00917 	ldw	ra,36(sp)
10006ef4:	df000817 	ldw	fp,32(sp)
10006ef8:	ddc00717 	ldw	r23,28(sp)
10006efc:	dd800617 	ldw	r22,24(sp)
10006f00:	dd400517 	ldw	r21,20(sp)
10006f04:	dd000417 	ldw	r20,16(sp)
10006f08:	dcc00317 	ldw	r19,12(sp)
10006f0c:	dc800217 	ldw	r18,8(sp)
10006f10:	dc400117 	ldw	r17,4(sp)
10006f14:	dc000017 	ldw	r16,0(sp)
10006f18:	dec00a04 	addi	sp,sp,40
10006f1c:	f800283a 	ret
10006f20:	04400404 	movi	r17,16
10006f24:	897fd72e 	bgeu	r17,r5,10006e84 <__alt_data_end+0xf8006e84>
10006f28:	00800304 	movi	r2,12
10006f2c:	90800015 	stw	r2,0(r18)
10006f30:	0005883a 	mov	r2,zero
10006f34:	003fee06 	br	10006ef0 <__alt_data_end+0xf8006ef0>
10006f38:	8808d27a 	srli	r4,r17,9
10006f3c:	20007126 	beq	r4,zero,10007104 <_malloc_r+0x2cc>
10006f40:	00800104 	movi	r2,4
10006f44:	1100eb36 	bltu	r2,r4,100072f4 <_malloc_r+0x4bc>
10006f48:	8808d1ba 	srli	r4,r17,6
10006f4c:	21000e04 	addi	r4,r4,56
10006f50:	210b883a 	add	r5,r4,r4
10006f54:	294b883a 	add	r5,r5,r5
10006f58:	294b883a 	add	r5,r5,r5
10006f5c:	04c40074 	movhi	r19,4097
10006f60:	9cfbff04 	addi	r19,r19,-4100
10006f64:	994b883a 	add	r5,r19,r5
10006f68:	2c000317 	ldw	r16,12(r5)
10006f6c:	2c000e26 	beq	r5,r16,10006fa8 <_malloc_r+0x170>
10006f70:	80c00117 	ldw	r3,4(r16)
10006f74:	01ffff04 	movi	r7,-4
10006f78:	018003c4 	movi	r6,15
10006f7c:	19c6703a 	and	r3,r3,r7
10006f80:	1c45c83a 	sub	r2,r3,r17
10006f84:	30800716 	blt	r6,r2,10006fa4 <_malloc_r+0x16c>
10006f88:	1000610e 	bge	r2,zero,10007110 <_malloc_r+0x2d8>
10006f8c:	84000317 	ldw	r16,12(r16)
10006f90:	2c000526 	beq	r5,r16,10006fa8 <_malloc_r+0x170>
10006f94:	80c00117 	ldw	r3,4(r16)
10006f98:	19c6703a 	and	r3,r3,r7
10006f9c:	1c45c83a 	sub	r2,r3,r17
10006fa0:	30bff90e 	bge	r6,r2,10006f88 <__alt_data_end+0xf8006f88>
10006fa4:	213fffc4 	addi	r4,r4,-1
10006fa8:	21000044 	addi	r4,r4,1
10006fac:	9c000417 	ldw	r16,16(r19)
10006fb0:	00c40074 	movhi	r3,4097
10006fb4:	18fbff04 	addi	r3,r3,-4100
10006fb8:	1a400204 	addi	r9,r3,8
10006fbc:	8240ff26 	beq	r16,r9,100073bc <_malloc_r+0x584>
10006fc0:	81400117 	ldw	r5,4(r16)
10006fc4:	00bfff04 	movi	r2,-4
10006fc8:	018003c4 	movi	r6,15
10006fcc:	2884703a 	and	r2,r5,r2
10006fd0:	144bc83a 	sub	r5,r2,r17
10006fd4:	3140ea16 	blt	r6,r5,10007380 <_malloc_r+0x548>
10006fd8:	1a400515 	stw	r9,20(r3)
10006fdc:	1a400415 	stw	r9,16(r3)
10006fe0:	2800570e 	bge	r5,zero,10007140 <_malloc_r+0x308>
10006fe4:	01407fc4 	movi	r5,511
10006fe8:	2880ca36 	bltu	r5,r2,10007314 <_malloc_r+0x4dc>
10006fec:	1004d0fa 	srli	r2,r2,3
10006ff0:	02000044 	movi	r8,1
10006ff4:	19c00117 	ldw	r7,4(r3)
10006ff8:	108b883a 	add	r5,r2,r2
10006ffc:	294b883a 	add	r5,r5,r5
10007000:	1005d0ba 	srai	r2,r2,2
10007004:	294b883a 	add	r5,r5,r5
10007008:	28cb883a 	add	r5,r5,r3
1000700c:	29800217 	ldw	r6,8(r5)
10007010:	4084983a 	sll	r2,r8,r2
10007014:	81400315 	stw	r5,12(r16)
10007018:	81800215 	stw	r6,8(r16)
1000701c:	11c4b03a 	or	r2,r2,r7
10007020:	18800115 	stw	r2,4(r3)
10007024:	2c000215 	stw	r16,8(r5)
10007028:	34000315 	stw	r16,12(r6)
1000702c:	200bd0ba 	srai	r5,r4,2
10007030:	00c00044 	movi	r3,1
10007034:	194a983a 	sll	r5,r3,r5
10007038:	11404936 	bltu	r2,r5,10007160 <_malloc_r+0x328>
1000703c:	1146703a 	and	r3,r2,r5
10007040:	18000a1e 	bne	r3,zero,1000706c <_malloc_r+0x234>
10007044:	00ffff04 	movi	r3,-4
10007048:	294b883a 	add	r5,r5,r5
1000704c:	20c8703a 	and	r4,r4,r3
10007050:	1146703a 	and	r3,r2,r5
10007054:	21000104 	addi	r4,r4,4
10007058:	1800041e 	bne	r3,zero,1000706c <_malloc_r+0x234>
1000705c:	294b883a 	add	r5,r5,r5
10007060:	1146703a 	and	r3,r2,r5
10007064:	21000104 	addi	r4,r4,4
10007068:	183ffc26 	beq	r3,zero,1000705c <__alt_data_end+0xf800705c>
1000706c:	023fff04 	movi	r8,-4
10007070:	01c003c4 	movi	r7,15
10007074:	2105883a 	add	r2,r4,r4
10007078:	1085883a 	add	r2,r2,r2
1000707c:	1085883a 	add	r2,r2,r2
10007080:	9899883a 	add	r12,r19,r2
10007084:	62800304 	addi	r10,r12,12
10007088:	2017883a 	mov	r11,r4
1000708c:	54000017 	ldw	r16,0(r10)
10007090:	51bffd04 	addi	r6,r10,-12
10007094:	8180041e 	bne	r16,r6,100070a8 <_malloc_r+0x270>
10007098:	0000ca06 	br	100073c4 <_malloc_r+0x58c>
1000709c:	10001c0e 	bge	r2,zero,10007110 <_malloc_r+0x2d8>
100070a0:	84000317 	ldw	r16,12(r16)
100070a4:	8180c726 	beq	r16,r6,100073c4 <_malloc_r+0x58c>
100070a8:	80c00117 	ldw	r3,4(r16)
100070ac:	1a06703a 	and	r3,r3,r8
100070b0:	1c45c83a 	sub	r2,r3,r17
100070b4:	38bff90e 	bge	r7,r2,1000709c <__alt_data_end+0xf800709c>
100070b8:	81000317 	ldw	r4,12(r16)
100070bc:	81400217 	ldw	r5,8(r16)
100070c0:	8447883a 	add	r3,r16,r17
100070c4:	8c400054 	ori	r17,r17,1
100070c8:	29000315 	stw	r4,12(r5)
100070cc:	21400215 	stw	r5,8(r4)
100070d0:	84400115 	stw	r17,4(r16)
100070d4:	1889883a 	add	r4,r3,r2
100070d8:	11400054 	ori	r5,r2,1
100070dc:	98c00515 	stw	r3,20(r19)
100070e0:	98c00415 	stw	r3,16(r19)
100070e4:	20800015 	stw	r2,0(r4)
100070e8:	1a400315 	stw	r9,12(r3)
100070ec:	1a400215 	stw	r9,8(r3)
100070f0:	19400115 	stw	r5,4(r3)
100070f4:	9009883a 	mov	r4,r18
100070f8:	000bf040 	call	1000bf04 <__malloc_unlock>
100070fc:	80800204 	addi	r2,r16,8
10007100:	003f7b06 	br	10006ef0 <__alt_data_end+0xf8006ef0>
10007104:	8808d0fa 	srli	r4,r17,3
10007108:	210b883a 	add	r5,r4,r4
1000710c:	003f9106 	br	10006f54 <__alt_data_end+0xf8006f54>
10007110:	80c7883a 	add	r3,r16,r3
10007114:	19400117 	ldw	r5,4(r3)
10007118:	80800317 	ldw	r2,12(r16)
1000711c:	81000217 	ldw	r4,8(r16)
10007120:	29400054 	ori	r5,r5,1
10007124:	19400115 	stw	r5,4(r3)
10007128:	20800315 	stw	r2,12(r4)
1000712c:	11000215 	stw	r4,8(r2)
10007130:	9009883a 	mov	r4,r18
10007134:	000bf040 	call	1000bf04 <__malloc_unlock>
10007138:	80800204 	addi	r2,r16,8
1000713c:	003f6c06 	br	10006ef0 <__alt_data_end+0xf8006ef0>
10007140:	8085883a 	add	r2,r16,r2
10007144:	10c00117 	ldw	r3,4(r2)
10007148:	9009883a 	mov	r4,r18
1000714c:	18c00054 	ori	r3,r3,1
10007150:	10c00115 	stw	r3,4(r2)
10007154:	000bf040 	call	1000bf04 <__malloc_unlock>
10007158:	80800204 	addi	r2,r16,8
1000715c:	003f6406 	br	10006ef0 <__alt_data_end+0xf8006ef0>
10007160:	9c000217 	ldw	r16,8(r19)
10007164:	00bfff04 	movi	r2,-4
10007168:	85400117 	ldw	r21,4(r16)
1000716c:	a8aa703a 	and	r21,r21,r2
10007170:	ac400336 	bltu	r21,r17,10007180 <_malloc_r+0x348>
10007174:	ac45c83a 	sub	r2,r21,r17
10007178:	00c003c4 	movi	r3,15
1000717c:	18805316 	blt	r3,r2,100072cc <_malloc_r+0x494>
10007180:	d5e6ac17 	ldw	r23,-25936(gp)
10007184:	d0e00317 	ldw	r3,-32756(gp)
10007188:	00bfffc4 	movi	r2,-1
1000718c:	8579883a 	add	fp,r16,r21
10007190:	8def883a 	add	r23,r17,r23
10007194:	1880d226 	beq	r3,r2,100074e0 <_malloc_r+0x6a8>
10007198:	bdc403c4 	addi	r23,r23,4111
1000719c:	00bc0004 	movi	r2,-4096
100071a0:	b8ae703a 	and	r23,r23,r2
100071a4:	9009883a 	mov	r4,r18
100071a8:	b80b883a 	mov	r5,r23
100071ac:	000910c0 	call	1000910c <_sbrk_r>
100071b0:	1029883a 	mov	r20,r2
100071b4:	00bfffc4 	movi	r2,-1
100071b8:	a080d126 	beq	r20,r2,10007500 <_malloc_r+0x6c8>
100071bc:	a7009f36 	bltu	r20,fp,1000743c <_malloc_r+0x604>
100071c0:	05840074 	movhi	r22,4097
100071c4:	b5883704 	addi	r22,r22,8412
100071c8:	b0800017 	ldw	r2,0(r22)
100071cc:	b885883a 	add	r2,r23,r2
100071d0:	b0800015 	stw	r2,0(r22)
100071d4:	e500cf26 	beq	fp,r20,10007514 <_malloc_r+0x6dc>
100071d8:	d1200317 	ldw	r4,-32756(gp)
100071dc:	00ffffc4 	movi	r3,-1
100071e0:	20c0e026 	beq	r4,r3,10007564 <_malloc_r+0x72c>
100071e4:	a739c83a 	sub	fp,r20,fp
100071e8:	1705883a 	add	r2,r2,fp
100071ec:	b0800015 	stw	r2,0(r22)
100071f0:	a08001cc 	andi	r2,r20,7
100071f4:	1000a526 	beq	r2,zero,1000748c <_malloc_r+0x654>
100071f8:	a0a9c83a 	sub	r20,r20,r2
100071fc:	00c40204 	movi	r3,4104
10007200:	a5000204 	addi	r20,r20,8
10007204:	1885c83a 	sub	r2,r3,r2
10007208:	a5c7883a 	add	r3,r20,r23
1000720c:	18c3ffcc 	andi	r3,r3,4095
10007210:	10efc83a 	sub	r23,r2,r3
10007214:	9009883a 	mov	r4,r18
10007218:	b80b883a 	mov	r5,r23
1000721c:	000910c0 	call	1000910c <_sbrk_r>
10007220:	00ffffc4 	movi	r3,-1
10007224:	10c0cc26 	beq	r2,r3,10007558 <_malloc_r+0x720>
10007228:	1505c83a 	sub	r2,r2,r20
1000722c:	b887883a 	add	r3,r23,r2
10007230:	18c00054 	ori	r3,r3,1
10007234:	b0800017 	ldw	r2,0(r22)
10007238:	9d000215 	stw	r20,8(r19)
1000723c:	a0c00115 	stw	r3,4(r20)
10007240:	b885883a 	add	r2,r23,r2
10007244:	b0800015 	stw	r2,0(r22)
10007248:	84c00e26 	beq	r16,r19,10007284 <_malloc_r+0x44c>
1000724c:	00c003c4 	movi	r3,15
10007250:	1d40902e 	bgeu	r3,r21,10007494 <_malloc_r+0x65c>
10007254:	ad7ffd04 	addi	r21,r21,-12
10007258:	013ffe04 	movi	r4,-8
1000725c:	a908703a 	and	r4,r21,r4
10007260:	810b883a 	add	r5,r16,r4
10007264:	01800144 	movi	r6,5
10007268:	29800115 	stw	r6,4(r5)
1000726c:	29800215 	stw	r6,8(r5)
10007270:	81400117 	ldw	r5,4(r16)
10007274:	2940004c 	andi	r5,r5,1
10007278:	214ab03a 	or	r5,r4,r5
1000727c:	81400115 	stw	r5,4(r16)
10007280:	1900ae36 	bltu	r3,r4,1000753c <_malloc_r+0x704>
10007284:	d0e6ab17 	ldw	r3,-25940(gp)
10007288:	1880012e 	bgeu	r3,r2,10007290 <_malloc_r+0x458>
1000728c:	d0a6ab15 	stw	r2,-25940(gp)
10007290:	d0e6aa17 	ldw	r3,-25944(gp)
10007294:	9c000217 	ldw	r16,8(r19)
10007298:	1880012e 	bgeu	r3,r2,100072a0 <_malloc_r+0x468>
1000729c:	d0a6aa15 	stw	r2,-25944(gp)
100072a0:	80c00117 	ldw	r3,4(r16)
100072a4:	00bfff04 	movi	r2,-4
100072a8:	1886703a 	and	r3,r3,r2
100072ac:	1c45c83a 	sub	r2,r3,r17
100072b0:	1c400236 	bltu	r3,r17,100072bc <_malloc_r+0x484>
100072b4:	00c003c4 	movi	r3,15
100072b8:	18800416 	blt	r3,r2,100072cc <_malloc_r+0x494>
100072bc:	9009883a 	mov	r4,r18
100072c0:	000bf040 	call	1000bf04 <__malloc_unlock>
100072c4:	0005883a 	mov	r2,zero
100072c8:	003f0906 	br	10006ef0 <__alt_data_end+0xf8006ef0>
100072cc:	88c00054 	ori	r3,r17,1
100072d0:	10800054 	ori	r2,r2,1
100072d4:	80c00115 	stw	r3,4(r16)
100072d8:	8463883a 	add	r17,r16,r17
100072dc:	88800115 	stw	r2,4(r17)
100072e0:	9009883a 	mov	r4,r18
100072e4:	9c400215 	stw	r17,8(r19)
100072e8:	000bf040 	call	1000bf04 <__malloc_unlock>
100072ec:	80800204 	addi	r2,r16,8
100072f0:	003eff06 	br	10006ef0 <__alt_data_end+0xf8006ef0>
100072f4:	00800504 	movi	r2,20
100072f8:	1100492e 	bgeu	r2,r4,10007420 <_malloc_r+0x5e8>
100072fc:	00801504 	movi	r2,84
10007300:	11005c36 	bltu	r2,r4,10007474 <_malloc_r+0x63c>
10007304:	8808d33a 	srli	r4,r17,12
10007308:	21001b84 	addi	r4,r4,110
1000730c:	210b883a 	add	r5,r4,r4
10007310:	003f1006 	br	10006f54 <__alt_data_end+0xf8006f54>
10007314:	1006d27a 	srli	r3,r2,9
10007318:	01400104 	movi	r5,4
1000731c:	28c0432e 	bgeu	r5,r3,1000742c <_malloc_r+0x5f4>
10007320:	01400504 	movi	r5,20
10007324:	28c07036 	bltu	r5,r3,100074e8 <_malloc_r+0x6b0>
10007328:	194016c4 	addi	r5,r3,91
1000732c:	294d883a 	add	r6,r5,r5
10007330:	318d883a 	add	r6,r6,r6
10007334:	318d883a 	add	r6,r6,r6
10007338:	998d883a 	add	r6,r19,r6
1000733c:	30c00217 	ldw	r3,8(r6)
10007340:	01c40074 	movhi	r7,4097
10007344:	39fbff04 	addi	r7,r7,-4100
10007348:	19805726 	beq	r3,r6,100074a8 <_malloc_r+0x670>
1000734c:	01ffff04 	movi	r7,-4
10007350:	19400117 	ldw	r5,4(r3)
10007354:	29ca703a 	and	r5,r5,r7
10007358:	1140022e 	bgeu	r2,r5,10007364 <_malloc_r+0x52c>
1000735c:	18c00217 	ldw	r3,8(r3)
10007360:	30fffb1e 	bne	r6,r3,10007350 <__alt_data_end+0xf8007350>
10007364:	19400317 	ldw	r5,12(r3)
10007368:	98800117 	ldw	r2,4(r19)
1000736c:	81400315 	stw	r5,12(r16)
10007370:	80c00215 	stw	r3,8(r16)
10007374:	2c000215 	stw	r16,8(r5)
10007378:	1c000315 	stw	r16,12(r3)
1000737c:	003f2b06 	br	1000702c <__alt_data_end+0xf800702c>
10007380:	8445883a 	add	r2,r16,r17
10007384:	8c400054 	ori	r17,r17,1
10007388:	18800515 	stw	r2,20(r3)
1000738c:	18800415 	stw	r2,16(r3)
10007390:	29000054 	ori	r4,r5,1
10007394:	1147883a 	add	r3,r2,r5
10007398:	84400115 	stw	r17,4(r16)
1000739c:	11000115 	stw	r4,4(r2)
100073a0:	12400315 	stw	r9,12(r2)
100073a4:	12400215 	stw	r9,8(r2)
100073a8:	19400015 	stw	r5,0(r3)
100073ac:	9009883a 	mov	r4,r18
100073b0:	000bf040 	call	1000bf04 <__malloc_unlock>
100073b4:	80800204 	addi	r2,r16,8
100073b8:	003ecd06 	br	10006ef0 <__alt_data_end+0xf8006ef0>
100073bc:	18800117 	ldw	r2,4(r3)
100073c0:	003f1a06 	br	1000702c <__alt_data_end+0xf800702c>
100073c4:	5ac00044 	addi	r11,r11,1
100073c8:	588000cc 	andi	r2,r11,3
100073cc:	52800204 	addi	r10,r10,8
100073d0:	103f2e1e 	bne	r2,zero,1000708c <__alt_data_end+0xf800708c>
100073d4:	20c000cc 	andi	r3,r4,3
100073d8:	60bffe04 	addi	r2,r12,-8
100073dc:	18006f26 	beq	r3,zero,1000759c <_malloc_r+0x764>
100073e0:	63000017 	ldw	r12,0(r12)
100073e4:	213fffc4 	addi	r4,r4,-1
100073e8:	60bffa26 	beq	r12,r2,100073d4 <__alt_data_end+0xf80073d4>
100073ec:	98800117 	ldw	r2,4(r19)
100073f0:	294b883a 	add	r5,r5,r5
100073f4:	117f5a36 	bltu	r2,r5,10007160 <__alt_data_end+0xf8007160>
100073f8:	283f5926 	beq	r5,zero,10007160 <__alt_data_end+0xf8007160>
100073fc:	1146703a 	and	r3,r2,r5
10007400:	18001626 	beq	r3,zero,1000745c <_malloc_r+0x624>
10007404:	5809883a 	mov	r4,r11
10007408:	003f1a06 	br	10007074 <__alt_data_end+0xf8007074>
1000740c:	80800204 	addi	r2,r16,8
10007410:	84000517 	ldw	r16,20(r16)
10007414:	143ea81e 	bne	r2,r16,10006eb8 <__alt_data_end+0xf8006eb8>
10007418:	21000084 	addi	r4,r4,2
1000741c:	003ee306 	br	10006fac <__alt_data_end+0xf8006fac>
10007420:	210016c4 	addi	r4,r4,91
10007424:	210b883a 	add	r5,r4,r4
10007428:	003eca06 	br	10006f54 <__alt_data_end+0xf8006f54>
1000742c:	100ad1ba 	srli	r5,r2,6
10007430:	29400e04 	addi	r5,r5,56
10007434:	294d883a 	add	r6,r5,r5
10007438:	003fbd06 	br	10007330 <__alt_data_end+0xf8007330>
1000743c:	84ff6026 	beq	r16,r19,100071c0 <__alt_data_end+0xf80071c0>
10007440:	00840074 	movhi	r2,4097
10007444:	10bbff04 	addi	r2,r2,-4100
10007448:	14000217 	ldw	r16,8(r2)
1000744c:	00bfff04 	movi	r2,-4
10007450:	80c00117 	ldw	r3,4(r16)
10007454:	1886703a 	and	r3,r3,r2
10007458:	003f9406 	br	100072ac <__alt_data_end+0xf80072ac>
1000745c:	294b883a 	add	r5,r5,r5
10007460:	1146703a 	and	r3,r2,r5
10007464:	5ac00104 	addi	r11,r11,4
10007468:	183ffc26 	beq	r3,zero,1000745c <__alt_data_end+0xf800745c>
1000746c:	5809883a 	mov	r4,r11
10007470:	003f0006 	br	10007074 <__alt_data_end+0xf8007074>
10007474:	00805504 	movi	r2,340
10007478:	11001336 	bltu	r2,r4,100074c8 <_malloc_r+0x690>
1000747c:	8808d3fa 	srli	r4,r17,15
10007480:	21001dc4 	addi	r4,r4,119
10007484:	210b883a 	add	r5,r4,r4
10007488:	003eb206 	br	10006f54 <__alt_data_end+0xf8006f54>
1000748c:	00840004 	movi	r2,4096
10007490:	003f5d06 	br	10007208 <__alt_data_end+0xf8007208>
10007494:	00800044 	movi	r2,1
10007498:	a0800115 	stw	r2,4(r20)
1000749c:	a021883a 	mov	r16,r20
100074a0:	0007883a 	mov	r3,zero
100074a4:	003f8106 	br	100072ac <__alt_data_end+0xf80072ac>
100074a8:	280bd0ba 	srai	r5,r5,2
100074ac:	01800044 	movi	r6,1
100074b0:	38800117 	ldw	r2,4(r7)
100074b4:	314c983a 	sll	r6,r6,r5
100074b8:	180b883a 	mov	r5,r3
100074bc:	3084b03a 	or	r2,r6,r2
100074c0:	38800115 	stw	r2,4(r7)
100074c4:	003fa906 	br	1000736c <__alt_data_end+0xf800736c>
100074c8:	00815504 	movi	r2,1364
100074cc:	11001836 	bltu	r2,r4,10007530 <_malloc_r+0x6f8>
100074d0:	8808d4ba 	srli	r4,r17,18
100074d4:	21001f04 	addi	r4,r4,124
100074d8:	210b883a 	add	r5,r4,r4
100074dc:	003e9d06 	br	10006f54 <__alt_data_end+0xf8006f54>
100074e0:	bdc00404 	addi	r23,r23,16
100074e4:	003f2f06 	br	100071a4 <__alt_data_end+0xf80071a4>
100074e8:	01401504 	movi	r5,84
100074ec:	28c01f36 	bltu	r5,r3,1000756c <_malloc_r+0x734>
100074f0:	100ad33a 	srli	r5,r2,12
100074f4:	29401b84 	addi	r5,r5,110
100074f8:	294d883a 	add	r6,r5,r5
100074fc:	003f8c06 	br	10007330 <__alt_data_end+0xf8007330>
10007500:	9c000217 	ldw	r16,8(r19)
10007504:	00bfff04 	movi	r2,-4
10007508:	80c00117 	ldw	r3,4(r16)
1000750c:	1886703a 	and	r3,r3,r2
10007510:	003f6606 	br	100072ac <__alt_data_end+0xf80072ac>
10007514:	e0c3ffcc 	andi	r3,fp,4095
10007518:	183f2f1e 	bne	r3,zero,100071d8 <__alt_data_end+0xf80071d8>
1000751c:	98c00217 	ldw	r3,8(r19)
10007520:	bd49883a 	add	r4,r23,r21
10007524:	21000054 	ori	r4,r4,1
10007528:	19000115 	stw	r4,4(r3)
1000752c:	003f5506 	br	10007284 <__alt_data_end+0xf8007284>
10007530:	01403f04 	movi	r5,252
10007534:	01001f84 	movi	r4,126
10007538:	003e8606 	br	10006f54 <__alt_data_end+0xf8006f54>
1000753c:	9009883a 	mov	r4,r18
10007540:	81400204 	addi	r5,r16,8
10007544:	00062a00 	call	100062a0 <_free_r>
10007548:	00840074 	movhi	r2,4097
1000754c:	10883704 	addi	r2,r2,8412
10007550:	10800017 	ldw	r2,0(r2)
10007554:	003f4b06 	br	10007284 <__alt_data_end+0xf8007284>
10007558:	00c00044 	movi	r3,1
1000755c:	002f883a 	mov	r23,zero
10007560:	003f3406 	br	10007234 <__alt_data_end+0xf8007234>
10007564:	d5200315 	stw	r20,-32756(gp)
10007568:	003f2106 	br	100071f0 <__alt_data_end+0xf80071f0>
1000756c:	01405504 	movi	r5,340
10007570:	28c00436 	bltu	r5,r3,10007584 <_malloc_r+0x74c>
10007574:	100ad3fa 	srli	r5,r2,15
10007578:	29401dc4 	addi	r5,r5,119
1000757c:	294d883a 	add	r6,r5,r5
10007580:	003f6b06 	br	10007330 <__alt_data_end+0xf8007330>
10007584:	01415504 	movi	r5,1364
10007588:	28c00936 	bltu	r5,r3,100075b0 <_malloc_r+0x778>
1000758c:	100ad4ba 	srli	r5,r2,18
10007590:	29401f04 	addi	r5,r5,124
10007594:	294d883a 	add	r6,r5,r5
10007598:	003f6506 	br	10007330 <__alt_data_end+0xf8007330>
1000759c:	98800117 	ldw	r2,4(r19)
100075a0:	0146303a 	nor	r3,zero,r5
100075a4:	1884703a 	and	r2,r3,r2
100075a8:	98800115 	stw	r2,4(r19)
100075ac:	003f9006 	br	100073f0 <__alt_data_end+0xf80073f0>
100075b0:	01803f04 	movi	r6,252
100075b4:	01401f84 	movi	r5,126
100075b8:	003f5d06 	br	10007330 <__alt_data_end+0xf8007330>

100075bc <memchr>:
100075bc:	008000c4 	movi	r2,3
100075c0:	29403fcc 	andi	r5,r5,255
100075c4:	1180282e 	bgeu	r2,r6,10007668 <memchr+0xac>
100075c8:	2086703a 	and	r3,r4,r2
100075cc:	1800351e 	bne	r3,zero,100076a4 <memchr+0xe8>
100075d0:	2816923a 	slli	r11,r5,8
100075d4:	2093883a 	add	r9,r4,r2
100075d8:	22000084 	addi	r8,r4,2
100075dc:	5957883a 	add	r11,r11,r5
100075e0:	5816923a 	slli	r11,r11,8
100075e4:	20c00044 	addi	r3,r4,1
100075e8:	037fbff4 	movhi	r13,65279
100075ec:	6b7fbfc4 	addi	r13,r13,-257
100075f0:	5957883a 	add	r11,r11,r5
100075f4:	5816923a 	slli	r11,r11,8
100075f8:	03202074 	movhi	r12,32897
100075fc:	63202004 	addi	r12,r12,-32640
10007600:	101d883a 	mov	r14,r2
10007604:	5957883a 	add	r11,r11,r5
10007608:	21c00017 	ldw	r7,0(r4)
1000760c:	31bfff04 	addi	r6,r6,-4
10007610:	1805883a 	mov	r2,r3
10007614:	3acef03a 	xor	r7,r7,r11
10007618:	3b55883a 	add	r10,r7,r13
1000761c:	01ce303a 	nor	r7,zero,r7
10007620:	51ce703a 	and	r7,r10,r7
10007624:	3b0e703a 	and	r7,r7,r12
10007628:	38000a26 	beq	r7,zero,10007654 <memchr+0x98>
1000762c:	21c00003 	ldbu	r7,0(r4)
10007630:	39401e26 	beq	r7,r5,100076ac <memchr+0xf0>
10007634:	19c00003 	ldbu	r7,0(r3)
10007638:	39401926 	beq	r7,r5,100076a0 <memchr+0xe4>
1000763c:	41c00003 	ldbu	r7,0(r8)
10007640:	4005883a 	mov	r2,r8
10007644:	39401626 	beq	r7,r5,100076a0 <memchr+0xe4>
10007648:	49c00003 	ldbu	r7,0(r9)
1000764c:	4805883a 	mov	r2,r9
10007650:	39401326 	beq	r7,r5,100076a0 <memchr+0xe4>
10007654:	21000104 	addi	r4,r4,4
10007658:	4a400104 	addi	r9,r9,4
1000765c:	42000104 	addi	r8,r8,4
10007660:	18c00104 	addi	r3,r3,4
10007664:	71bfe836 	bltu	r14,r6,10007608 <__alt_data_end+0xf8007608>
10007668:	2005883a 	mov	r2,r4
1000766c:	30000a26 	beq	r6,zero,10007698 <memchr+0xdc>
10007670:	10c00003 	ldbu	r3,0(r2)
10007674:	19400a26 	beq	r3,r5,100076a0 <memchr+0xe4>
10007678:	10c00044 	addi	r3,r2,1
1000767c:	118d883a 	add	r6,r2,r6
10007680:	00000306 	br	10007690 <memchr+0xd4>
10007684:	11000003 	ldbu	r4,0(r2)
10007688:	18c00044 	addi	r3,r3,1
1000768c:	21400426 	beq	r4,r5,100076a0 <memchr+0xe4>
10007690:	1805883a 	mov	r2,r3
10007694:	19bffb1e 	bne	r3,r6,10007684 <__alt_data_end+0xf8007684>
10007698:	0005883a 	mov	r2,zero
1000769c:	f800283a 	ret
100076a0:	f800283a 	ret
100076a4:	2005883a 	mov	r2,r4
100076a8:	003ff106 	br	10007670 <__alt_data_end+0xf8007670>
100076ac:	2005883a 	mov	r2,r4
100076b0:	f800283a 	ret

100076b4 <memcpy>:
100076b4:	defffb04 	addi	sp,sp,-20
100076b8:	dc000015 	stw	r16,0(sp)
100076bc:	dfc00415 	stw	ra,16(sp)
100076c0:	dcc00315 	stw	r19,12(sp)
100076c4:	dc800215 	stw	r18,8(sp)
100076c8:	dc400115 	stw	r17,4(sp)
100076cc:	00c003c4 	movi	r3,15
100076d0:	2021883a 	mov	r16,r4
100076d4:	3005883a 	mov	r2,r6
100076d8:	1980032e 	bgeu	r3,r6,100076e8 <memcpy+0x34>
100076dc:	2906b03a 	or	r3,r5,r4
100076e0:	18c000cc 	andi	r3,r3,3
100076e4:	18001026 	beq	r3,zero,10007728 <memcpy+0x74>
100076e8:	8007883a 	mov	r3,r16
100076ec:	288f883a 	add	r7,r5,r2
100076f0:	10000526 	beq	r2,zero,10007708 <memcpy+0x54>
100076f4:	29800003 	ldbu	r6,0(r5)
100076f8:	18c00044 	addi	r3,r3,1
100076fc:	29400044 	addi	r5,r5,1
10007700:	19bfffc5 	stb	r6,-1(r3)
10007704:	29fffb1e 	bne	r5,r7,100076f4 <__alt_data_end+0xf80076f4>
10007708:	8005883a 	mov	r2,r16
1000770c:	dfc00417 	ldw	ra,16(sp)
10007710:	dcc00317 	ldw	r19,12(sp)
10007714:	dc800217 	ldw	r18,8(sp)
10007718:	dc400117 	ldw	r17,4(sp)
1000771c:	dc000017 	ldw	r16,0(sp)
10007720:	dec00504 	addi	sp,sp,20
10007724:	f800283a 	ret
10007728:	32bffc04 	addi	r10,r6,-16
1000772c:	5014d13a 	srli	r10,r10,4
10007730:	20800404 	addi	r2,r4,16
10007734:	2007883a 	mov	r3,r4
10007738:	5008913a 	slli	r4,r10,4
1000773c:	280f883a 	mov	r7,r5
10007740:	1105883a 	add	r2,r2,r4
10007744:	3a000017 	ldw	r8,0(r7)
10007748:	18c00404 	addi	r3,r3,16
1000774c:	39c00404 	addi	r7,r7,16
10007750:	1a3ffc15 	stw	r8,-16(r3)
10007754:	3a3ffd17 	ldw	r8,-12(r7)
10007758:	1a3ffd15 	stw	r8,-12(r3)
1000775c:	3a3ffe17 	ldw	r8,-8(r7)
10007760:	1a3ffe15 	stw	r8,-8(r3)
10007764:	3a3fff17 	ldw	r8,-4(r7)
10007768:	1a3fff15 	stw	r8,-4(r3)
1000776c:	18bff51e 	bne	r3,r2,10007744 <__alt_data_end+0xf8007744>
10007770:	52800044 	addi	r10,r10,1
10007774:	5014913a 	slli	r10,r10,4
10007778:	308003cc 	andi	r2,r6,15
1000777c:	010000c4 	movi	r4,3
10007780:	8287883a 	add	r3,r16,r10
10007784:	2a95883a 	add	r10,r5,r10
10007788:	2080182e 	bgeu	r4,r2,100077ec <memcpy+0x138>
1000778c:	147fff04 	addi	r17,r2,-4
10007790:	8808d0ba 	srli	r4,r17,2
10007794:	1a400104 	addi	r9,r3,4
10007798:	180d883a 	mov	r6,r3
1000779c:	2105883a 	add	r2,r4,r4
100077a0:	1085883a 	add	r2,r2,r2
100077a4:	4893883a 	add	r9,r9,r2
100077a8:	500f883a 	mov	r7,r10
100077ac:	3a000017 	ldw	r8,0(r7)
100077b0:	31800104 	addi	r6,r6,4
100077b4:	39c00104 	addi	r7,r7,4
100077b8:	323fff15 	stw	r8,-4(r6)
100077bc:	327ffb1e 	bne	r6,r9,100077ac <__alt_data_end+0xf80077ac>
100077c0:	20800044 	addi	r2,r4,1
100077c4:	1085883a 	add	r2,r2,r2
100077c8:	1085883a 	add	r2,r2,r2
100077cc:	017fff04 	movi	r5,-4
100077d0:	18a5883a 	add	r18,r3,r2
100077d4:	50a7883a 	add	r19,r10,r2
100077d8:	000b2bc0 	call	1000b2bc <__mulsi3>
100077dc:	1445883a 	add	r2,r2,r17
100077e0:	980b883a 	mov	r5,r19
100077e4:	9007883a 	mov	r3,r18
100077e8:	003fc006 	br	100076ec <__alt_data_end+0xf80076ec>
100077ec:	500b883a 	mov	r5,r10
100077f0:	003fbe06 	br	100076ec <__alt_data_end+0xf80076ec>

100077f4 <memmove>:
100077f4:	defffb04 	addi	sp,sp,-20
100077f8:	dc000015 	stw	r16,0(sp)
100077fc:	dfc00415 	stw	ra,16(sp)
10007800:	dcc00315 	stw	r19,12(sp)
10007804:	dc800215 	stw	r18,8(sp)
10007808:	dc400115 	stw	r17,4(sp)
1000780c:	2021883a 	mov	r16,r4
10007810:	300f883a 	mov	r7,r6
10007814:	2900122e 	bgeu	r5,r4,10007860 <memmove+0x6c>
10007818:	2987883a 	add	r3,r5,r6
1000781c:	20c0102e 	bgeu	r4,r3,10007860 <memmove+0x6c>
10007820:	218b883a 	add	r5,r4,r6
10007824:	1989c83a 	sub	r4,r3,r6
10007828:	30000526 	beq	r6,zero,10007840 <memmove+0x4c>
1000782c:	18ffffc4 	addi	r3,r3,-1
10007830:	18800003 	ldbu	r2,0(r3)
10007834:	297fffc4 	addi	r5,r5,-1
10007838:	28800005 	stb	r2,0(r5)
1000783c:	193ffb1e 	bne	r3,r4,1000782c <__alt_data_end+0xf800782c>
10007840:	8005883a 	mov	r2,r16
10007844:	dfc00417 	ldw	ra,16(sp)
10007848:	dcc00317 	ldw	r19,12(sp)
1000784c:	dc800217 	ldw	r18,8(sp)
10007850:	dc400117 	ldw	r17,4(sp)
10007854:	dc000017 	ldw	r16,0(sp)
10007858:	dec00504 	addi	sp,sp,20
1000785c:	f800283a 	ret
10007860:	008003c4 	movi	r2,15
10007864:	1180422e 	bgeu	r2,r6,10007970 <memmove+0x17c>
10007868:	2c04b03a 	or	r2,r5,r16
1000786c:	108000cc 	andi	r2,r2,3
10007870:	10003f1e 	bne	r2,zero,10007970 <memmove+0x17c>
10007874:	32bffc04 	addi	r10,r6,-16
10007878:	5014d13a 	srli	r10,r10,4
1000787c:	81000404 	addi	r4,r16,16
10007880:	8007883a 	mov	r3,r16
10007884:	5004913a 	slli	r2,r10,4
10007888:	280f883a 	mov	r7,r5
1000788c:	2089883a 	add	r4,r4,r2
10007890:	38800017 	ldw	r2,0(r7)
10007894:	18c00404 	addi	r3,r3,16
10007898:	39c00404 	addi	r7,r7,16
1000789c:	18bffc15 	stw	r2,-16(r3)
100078a0:	38bffd17 	ldw	r2,-12(r7)
100078a4:	18bffd15 	stw	r2,-12(r3)
100078a8:	38bffe17 	ldw	r2,-8(r7)
100078ac:	18bffe15 	stw	r2,-8(r3)
100078b0:	38bfff17 	ldw	r2,-4(r7)
100078b4:	18bfff15 	stw	r2,-4(r3)
100078b8:	193ff51e 	bne	r3,r4,10007890 <__alt_data_end+0xf8007890>
100078bc:	52800044 	addi	r10,r10,1
100078c0:	5014913a 	slli	r10,r10,4
100078c4:	31c003cc 	andi	r7,r6,15
100078c8:	008000c4 	movi	r2,3
100078cc:	8287883a 	add	r3,r16,r10
100078d0:	2a95883a 	add	r10,r5,r10
100078d4:	11c0282e 	bgeu	r2,r7,10007978 <memmove+0x184>
100078d8:	3c7fff04 	addi	r17,r7,-4
100078dc:	8808d0ba 	srli	r4,r17,2
100078e0:	1a400104 	addi	r9,r3,4
100078e4:	180d883a 	mov	r6,r3
100078e8:	2105883a 	add	r2,r4,r4
100078ec:	1085883a 	add	r2,r2,r2
100078f0:	4893883a 	add	r9,r9,r2
100078f4:	5005883a 	mov	r2,r10
100078f8:	12000017 	ldw	r8,0(r2)
100078fc:	31800104 	addi	r6,r6,4
10007900:	10800104 	addi	r2,r2,4
10007904:	323fff15 	stw	r8,-4(r6)
10007908:	327ffb1e 	bne	r6,r9,100078f8 <__alt_data_end+0xf80078f8>
1000790c:	20800044 	addi	r2,r4,1
10007910:	1085883a 	add	r2,r2,r2
10007914:	1085883a 	add	r2,r2,r2
10007918:	017fff04 	movi	r5,-4
1000791c:	18a5883a 	add	r18,r3,r2
10007920:	50a7883a 	add	r19,r10,r2
10007924:	000b2bc0 	call	1000b2bc <__mulsi3>
10007928:	144f883a 	add	r7,r2,r17
1000792c:	980b883a 	mov	r5,r19
10007930:	9007883a 	mov	r3,r18
10007934:	383fc226 	beq	r7,zero,10007840 <__alt_data_end+0xf8007840>
10007938:	19cf883a 	add	r7,r3,r7
1000793c:	29800003 	ldbu	r6,0(r5)
10007940:	18c00044 	addi	r3,r3,1
10007944:	29400044 	addi	r5,r5,1
10007948:	19bfffc5 	stb	r6,-1(r3)
1000794c:	19fffb1e 	bne	r3,r7,1000793c <__alt_data_end+0xf800793c>
10007950:	8005883a 	mov	r2,r16
10007954:	dfc00417 	ldw	ra,16(sp)
10007958:	dcc00317 	ldw	r19,12(sp)
1000795c:	dc800217 	ldw	r18,8(sp)
10007960:	dc400117 	ldw	r17,4(sp)
10007964:	dc000017 	ldw	r16,0(sp)
10007968:	dec00504 	addi	sp,sp,20
1000796c:	f800283a 	ret
10007970:	8007883a 	mov	r3,r16
10007974:	003fef06 	br	10007934 <__alt_data_end+0xf8007934>
10007978:	500b883a 	mov	r5,r10
1000797c:	003fed06 	br	10007934 <__alt_data_end+0xf8007934>

10007980 <memset>:
10007980:	00c000c4 	movi	r3,3
10007984:	2005883a 	mov	r2,r4
10007988:	29403fcc 	andi	r5,r5,255
1000798c:	19802d2e 	bgeu	r3,r6,10007a44 <memset+0xc4>
10007990:	20c6703a 	and	r3,r4,r3
10007994:	18002e1e 	bne	r3,zero,10007a50 <memset+0xd0>
10007998:	2806923a 	slli	r3,r5,8
1000799c:	010003c4 	movi	r4,15
100079a0:	3011883a 	mov	r8,r6
100079a4:	1946b03a 	or	r3,r3,r5
100079a8:	180e943a 	slli	r7,r3,16
100079ac:	38ceb03a 	or	r7,r7,r3
100079b0:	1007883a 	mov	r3,r2
100079b4:	21800f2e 	bgeu	r4,r6,100079f4 <memset+0x74>
100079b8:	19c00015 	stw	r7,0(r3)
100079bc:	19c00115 	stw	r7,4(r3)
100079c0:	19c00215 	stw	r7,8(r3)
100079c4:	19c00315 	stw	r7,12(r3)
100079c8:	423ffc04 	addi	r8,r8,-16
100079cc:	18c00404 	addi	r3,r3,16
100079d0:	223ff936 	bltu	r4,r8,100079b8 <__alt_data_end+0xf80079b8>
100079d4:	30fffc04 	addi	r3,r6,-16
100079d8:	1806d13a 	srli	r3,r3,4
100079dc:	318003cc 	andi	r6,r6,15
100079e0:	010000c4 	movi	r4,3
100079e4:	18c00044 	addi	r3,r3,1
100079e8:	1806913a 	slli	r3,r3,4
100079ec:	10c7883a 	add	r3,r2,r3
100079f0:	21800e2e 	bgeu	r4,r6,10007a2c <memset+0xac>
100079f4:	1813883a 	mov	r9,r3
100079f8:	3011883a 	mov	r8,r6
100079fc:	010000c4 	movi	r4,3
10007a00:	49c00015 	stw	r7,0(r9)
10007a04:	423fff04 	addi	r8,r8,-4
10007a08:	4a400104 	addi	r9,r9,4
10007a0c:	223ffc36 	bltu	r4,r8,10007a00 <__alt_data_end+0xf8007a00>
10007a10:	313fff04 	addi	r4,r6,-4
10007a14:	2008d0ba 	srli	r4,r4,2
10007a18:	318000cc 	andi	r6,r6,3
10007a1c:	21000044 	addi	r4,r4,1
10007a20:	2109883a 	add	r4,r4,r4
10007a24:	2109883a 	add	r4,r4,r4
10007a28:	1907883a 	add	r3,r3,r4
10007a2c:	30000a26 	beq	r6,zero,10007a58 <memset+0xd8>
10007a30:	198d883a 	add	r6,r3,r6
10007a34:	19400005 	stb	r5,0(r3)
10007a38:	18c00044 	addi	r3,r3,1
10007a3c:	19bffd1e 	bne	r3,r6,10007a34 <__alt_data_end+0xf8007a34>
10007a40:	f800283a 	ret
10007a44:	2007883a 	mov	r3,r4
10007a48:	303ff91e 	bne	r6,zero,10007a30 <__alt_data_end+0xf8007a30>
10007a4c:	00000206 	br	10007a58 <memset+0xd8>
10007a50:	2007883a 	mov	r3,r4
10007a54:	003ff606 	br	10007a30 <__alt_data_end+0xf8007a30>
10007a58:	f800283a 	ret

10007a5c <_Balloc>:
10007a5c:	20801317 	ldw	r2,76(r4)
10007a60:	defffc04 	addi	sp,sp,-16
10007a64:	dc400115 	stw	r17,4(sp)
10007a68:	dc000015 	stw	r16,0(sp)
10007a6c:	dfc00315 	stw	ra,12(sp)
10007a70:	dc800215 	stw	r18,8(sp)
10007a74:	2023883a 	mov	r17,r4
10007a78:	2821883a 	mov	r16,r5
10007a7c:	10000f26 	beq	r2,zero,10007abc <_Balloc+0x60>
10007a80:	8407883a 	add	r3,r16,r16
10007a84:	18c7883a 	add	r3,r3,r3
10007a88:	10c7883a 	add	r3,r2,r3
10007a8c:	18800017 	ldw	r2,0(r3)
10007a90:	10001126 	beq	r2,zero,10007ad8 <_Balloc+0x7c>
10007a94:	11000017 	ldw	r4,0(r2)
10007a98:	19000015 	stw	r4,0(r3)
10007a9c:	10000415 	stw	zero,16(r2)
10007aa0:	10000315 	stw	zero,12(r2)
10007aa4:	dfc00317 	ldw	ra,12(sp)
10007aa8:	dc800217 	ldw	r18,8(sp)
10007aac:	dc400117 	ldw	r17,4(sp)
10007ab0:	dc000017 	ldw	r16,0(sp)
10007ab4:	dec00404 	addi	sp,sp,16
10007ab8:	f800283a 	ret
10007abc:	01400104 	movi	r5,4
10007ac0:	01800404 	movi	r6,16
10007ac4:	00093c00 	call	100093c0 <_calloc_r>
10007ac8:	88801315 	stw	r2,76(r17)
10007acc:	103fec1e 	bne	r2,zero,10007a80 <__alt_data_end+0xf8007a80>
10007ad0:	0005883a 	mov	r2,zero
10007ad4:	003ff306 	br	10007aa4 <__alt_data_end+0xf8007aa4>
10007ad8:	01400044 	movi	r5,1
10007adc:	2c24983a 	sll	r18,r5,r16
10007ae0:	8809883a 	mov	r4,r17
10007ae4:	91800144 	addi	r6,r18,5
10007ae8:	318d883a 	add	r6,r6,r6
10007aec:	318d883a 	add	r6,r6,r6
10007af0:	00093c00 	call	100093c0 <_calloc_r>
10007af4:	103ff626 	beq	r2,zero,10007ad0 <__alt_data_end+0xf8007ad0>
10007af8:	14000115 	stw	r16,4(r2)
10007afc:	14800215 	stw	r18,8(r2)
10007b00:	003fe606 	br	10007a9c <__alt_data_end+0xf8007a9c>

10007b04 <_Bfree>:
10007b04:	28000826 	beq	r5,zero,10007b28 <_Bfree+0x24>
10007b08:	28c00117 	ldw	r3,4(r5)
10007b0c:	20801317 	ldw	r2,76(r4)
10007b10:	18c7883a 	add	r3,r3,r3
10007b14:	18c7883a 	add	r3,r3,r3
10007b18:	10c5883a 	add	r2,r2,r3
10007b1c:	10c00017 	ldw	r3,0(r2)
10007b20:	28c00015 	stw	r3,0(r5)
10007b24:	11400015 	stw	r5,0(r2)
10007b28:	f800283a 	ret

10007b2c <__multadd>:
10007b2c:	defff604 	addi	sp,sp,-40
10007b30:	dd400515 	stw	r21,20(sp)
10007b34:	2d400417 	ldw	r21,16(r5)
10007b38:	df000815 	stw	fp,32(sp)
10007b3c:	ddc00715 	stw	r23,28(sp)
10007b40:	dd800615 	stw	r22,24(sp)
10007b44:	dd000415 	stw	r20,16(sp)
10007b48:	dc400115 	stw	r17,4(sp)
10007b4c:	dc000015 	stw	r16,0(sp)
10007b50:	dfc00915 	stw	ra,36(sp)
10007b54:	dcc00315 	stw	r19,12(sp)
10007b58:	dc800215 	stw	r18,8(sp)
10007b5c:	282d883a 	mov	r22,r5
10007b60:	202f883a 	mov	r23,r4
10007b64:	3029883a 	mov	r20,r6
10007b68:	3839883a 	mov	fp,r7
10007b6c:	2c000504 	addi	r16,r5,20
10007b70:	0023883a 	mov	r17,zero
10007b74:	84c00017 	ldw	r19,0(r16)
10007b78:	a00b883a 	mov	r5,r20
10007b7c:	8c400044 	addi	r17,r17,1
10007b80:	993fffcc 	andi	r4,r19,65535
10007b84:	000b2bc0 	call	1000b2bc <__mulsi3>
10007b88:	1725883a 	add	r18,r2,fp
10007b8c:	9808d43a 	srli	r4,r19,16
10007b90:	9026d43a 	srli	r19,r18,16
10007b94:	a00b883a 	mov	r5,r20
10007b98:	000b2bc0 	call	1000b2bc <__mulsi3>
10007b9c:	988f883a 	add	r7,r19,r2
10007ba0:	3804943a 	slli	r2,r7,16
10007ba4:	94bfffcc 	andi	r18,r18,65535
10007ba8:	3838d43a 	srli	fp,r7,16
10007bac:	14a5883a 	add	r18,r2,r18
10007bb0:	84800015 	stw	r18,0(r16)
10007bb4:	84000104 	addi	r16,r16,4
10007bb8:	8d7fee16 	blt	r17,r21,10007b74 <__alt_data_end+0xf8007b74>
10007bbc:	e0000926 	beq	fp,zero,10007be4 <__multadd+0xb8>
10007bc0:	b0800217 	ldw	r2,8(r22)
10007bc4:	a880140e 	bge	r21,r2,10007c18 <__multadd+0xec>
10007bc8:	a8800144 	addi	r2,r21,5
10007bcc:	1085883a 	add	r2,r2,r2
10007bd0:	1085883a 	add	r2,r2,r2
10007bd4:	b085883a 	add	r2,r22,r2
10007bd8:	ad400044 	addi	r21,r21,1
10007bdc:	17000015 	stw	fp,0(r2)
10007be0:	b5400415 	stw	r21,16(r22)
10007be4:	b005883a 	mov	r2,r22
10007be8:	dfc00917 	ldw	ra,36(sp)
10007bec:	df000817 	ldw	fp,32(sp)
10007bf0:	ddc00717 	ldw	r23,28(sp)
10007bf4:	dd800617 	ldw	r22,24(sp)
10007bf8:	dd400517 	ldw	r21,20(sp)
10007bfc:	dd000417 	ldw	r20,16(sp)
10007c00:	dcc00317 	ldw	r19,12(sp)
10007c04:	dc800217 	ldw	r18,8(sp)
10007c08:	dc400117 	ldw	r17,4(sp)
10007c0c:	dc000017 	ldw	r16,0(sp)
10007c10:	dec00a04 	addi	sp,sp,40
10007c14:	f800283a 	ret
10007c18:	b1400117 	ldw	r5,4(r22)
10007c1c:	b809883a 	mov	r4,r23
10007c20:	29400044 	addi	r5,r5,1
10007c24:	0007a5c0 	call	10007a5c <_Balloc>
10007c28:	b1800417 	ldw	r6,16(r22)
10007c2c:	b1400304 	addi	r5,r22,12
10007c30:	11000304 	addi	r4,r2,12
10007c34:	31800084 	addi	r6,r6,2
10007c38:	318d883a 	add	r6,r6,r6
10007c3c:	318d883a 	add	r6,r6,r6
10007c40:	1021883a 	mov	r16,r2
10007c44:	00076b40 	call	100076b4 <memcpy>
10007c48:	b0c00117 	ldw	r3,4(r22)
10007c4c:	b8801317 	ldw	r2,76(r23)
10007c50:	18c7883a 	add	r3,r3,r3
10007c54:	18c7883a 	add	r3,r3,r3
10007c58:	10c5883a 	add	r2,r2,r3
10007c5c:	10c00017 	ldw	r3,0(r2)
10007c60:	b0c00015 	stw	r3,0(r22)
10007c64:	15800015 	stw	r22,0(r2)
10007c68:	802d883a 	mov	r22,r16
10007c6c:	003fd606 	br	10007bc8 <__alt_data_end+0xf8007bc8>

10007c70 <__s2b>:
10007c70:	defff904 	addi	sp,sp,-28
10007c74:	dd000415 	stw	r20,16(sp)
10007c78:	dc400115 	stw	r17,4(sp)
10007c7c:	2829883a 	mov	r20,r5
10007c80:	2023883a 	mov	r17,r4
10007c84:	01400244 	movi	r5,9
10007c88:	39000204 	addi	r4,r7,8
10007c8c:	dcc00315 	stw	r19,12(sp)
10007c90:	dc800215 	stw	r18,8(sp)
10007c94:	dfc00615 	stw	ra,24(sp)
10007c98:	dd400515 	stw	r21,20(sp)
10007c9c:	dc000015 	stw	r16,0(sp)
10007ca0:	3825883a 	mov	r18,r7
10007ca4:	3027883a 	mov	r19,r6
10007ca8:	000b2000 	call	1000b200 <__divsi3>
10007cac:	00c00044 	movi	r3,1
10007cb0:	000b883a 	mov	r5,zero
10007cb4:	1880030e 	bge	r3,r2,10007cc4 <__s2b+0x54>
10007cb8:	18c7883a 	add	r3,r3,r3
10007cbc:	29400044 	addi	r5,r5,1
10007cc0:	18bffd16 	blt	r3,r2,10007cb8 <__alt_data_end+0xf8007cb8>
10007cc4:	8809883a 	mov	r4,r17
10007cc8:	0007a5c0 	call	10007a5c <_Balloc>
10007ccc:	d8c00717 	ldw	r3,28(sp)
10007cd0:	10c00515 	stw	r3,20(r2)
10007cd4:	00c00044 	movi	r3,1
10007cd8:	10c00415 	stw	r3,16(r2)
10007cdc:	00c00244 	movi	r3,9
10007ce0:	1cc0210e 	bge	r3,r19,10007d68 <__s2b+0xf8>
10007ce4:	a0eb883a 	add	r21,r20,r3
10007ce8:	a821883a 	mov	r16,r21
10007cec:	a4e9883a 	add	r20,r20,r19
10007cf0:	81c00007 	ldb	r7,0(r16)
10007cf4:	8809883a 	mov	r4,r17
10007cf8:	84000044 	addi	r16,r16,1
10007cfc:	100b883a 	mov	r5,r2
10007d00:	01800284 	movi	r6,10
10007d04:	39fff404 	addi	r7,r7,-48
10007d08:	0007b2c0 	call	10007b2c <__multadd>
10007d0c:	853ff81e 	bne	r16,r20,10007cf0 <__alt_data_end+0xf8007cf0>
10007d10:	ace1883a 	add	r16,r21,r19
10007d14:	843ffe04 	addi	r16,r16,-8
10007d18:	9c800a0e 	bge	r19,r18,10007d44 <__s2b+0xd4>
10007d1c:	94e5c83a 	sub	r18,r18,r19
10007d20:	84a5883a 	add	r18,r16,r18
10007d24:	81c00007 	ldb	r7,0(r16)
10007d28:	8809883a 	mov	r4,r17
10007d2c:	84000044 	addi	r16,r16,1
10007d30:	100b883a 	mov	r5,r2
10007d34:	01800284 	movi	r6,10
10007d38:	39fff404 	addi	r7,r7,-48
10007d3c:	0007b2c0 	call	10007b2c <__multadd>
10007d40:	84bff81e 	bne	r16,r18,10007d24 <__alt_data_end+0xf8007d24>
10007d44:	dfc00617 	ldw	ra,24(sp)
10007d48:	dd400517 	ldw	r21,20(sp)
10007d4c:	dd000417 	ldw	r20,16(sp)
10007d50:	dcc00317 	ldw	r19,12(sp)
10007d54:	dc800217 	ldw	r18,8(sp)
10007d58:	dc400117 	ldw	r17,4(sp)
10007d5c:	dc000017 	ldw	r16,0(sp)
10007d60:	dec00704 	addi	sp,sp,28
10007d64:	f800283a 	ret
10007d68:	a4000284 	addi	r16,r20,10
10007d6c:	1827883a 	mov	r19,r3
10007d70:	003fe906 	br	10007d18 <__alt_data_end+0xf8007d18>

10007d74 <__hi0bits>:
10007d74:	20bfffec 	andhi	r2,r4,65535
10007d78:	1000141e 	bne	r2,zero,10007dcc <__hi0bits+0x58>
10007d7c:	2008943a 	slli	r4,r4,16
10007d80:	00800404 	movi	r2,16
10007d84:	20ffc02c 	andhi	r3,r4,65280
10007d88:	1800021e 	bne	r3,zero,10007d94 <__hi0bits+0x20>
10007d8c:	2008923a 	slli	r4,r4,8
10007d90:	10800204 	addi	r2,r2,8
10007d94:	20fc002c 	andhi	r3,r4,61440
10007d98:	1800021e 	bne	r3,zero,10007da4 <__hi0bits+0x30>
10007d9c:	2008913a 	slli	r4,r4,4
10007da0:	10800104 	addi	r2,r2,4
10007da4:	20f0002c 	andhi	r3,r4,49152
10007da8:	1800031e 	bne	r3,zero,10007db8 <__hi0bits+0x44>
10007dac:	2109883a 	add	r4,r4,r4
10007db0:	10800084 	addi	r2,r2,2
10007db4:	2109883a 	add	r4,r4,r4
10007db8:	20000316 	blt	r4,zero,10007dc8 <__hi0bits+0x54>
10007dbc:	2110002c 	andhi	r4,r4,16384
10007dc0:	2000041e 	bne	r4,zero,10007dd4 <__hi0bits+0x60>
10007dc4:	00800804 	movi	r2,32
10007dc8:	f800283a 	ret
10007dcc:	0005883a 	mov	r2,zero
10007dd0:	003fec06 	br	10007d84 <__alt_data_end+0xf8007d84>
10007dd4:	10800044 	addi	r2,r2,1
10007dd8:	f800283a 	ret

10007ddc <__lo0bits>:
10007ddc:	20c00017 	ldw	r3,0(r4)
10007de0:	188001cc 	andi	r2,r3,7
10007de4:	10000826 	beq	r2,zero,10007e08 <__lo0bits+0x2c>
10007de8:	1880004c 	andi	r2,r3,1
10007dec:	1000211e 	bne	r2,zero,10007e74 <__lo0bits+0x98>
10007df0:	1880008c 	andi	r2,r3,2
10007df4:	1000211e 	bne	r2,zero,10007e7c <__lo0bits+0xa0>
10007df8:	1806d0ba 	srli	r3,r3,2
10007dfc:	00800084 	movi	r2,2
10007e00:	20c00015 	stw	r3,0(r4)
10007e04:	f800283a 	ret
10007e08:	18bfffcc 	andi	r2,r3,65535
10007e0c:	10001326 	beq	r2,zero,10007e5c <__lo0bits+0x80>
10007e10:	0005883a 	mov	r2,zero
10007e14:	19403fcc 	andi	r5,r3,255
10007e18:	2800021e 	bne	r5,zero,10007e24 <__lo0bits+0x48>
10007e1c:	1806d23a 	srli	r3,r3,8
10007e20:	10800204 	addi	r2,r2,8
10007e24:	194003cc 	andi	r5,r3,15
10007e28:	2800021e 	bne	r5,zero,10007e34 <__lo0bits+0x58>
10007e2c:	1806d13a 	srli	r3,r3,4
10007e30:	10800104 	addi	r2,r2,4
10007e34:	194000cc 	andi	r5,r3,3
10007e38:	2800021e 	bne	r5,zero,10007e44 <__lo0bits+0x68>
10007e3c:	1806d0ba 	srli	r3,r3,2
10007e40:	10800084 	addi	r2,r2,2
10007e44:	1940004c 	andi	r5,r3,1
10007e48:	2800081e 	bne	r5,zero,10007e6c <__lo0bits+0x90>
10007e4c:	1806d07a 	srli	r3,r3,1
10007e50:	1800051e 	bne	r3,zero,10007e68 <__lo0bits+0x8c>
10007e54:	00800804 	movi	r2,32
10007e58:	f800283a 	ret
10007e5c:	1806d43a 	srli	r3,r3,16
10007e60:	00800404 	movi	r2,16
10007e64:	003feb06 	br	10007e14 <__alt_data_end+0xf8007e14>
10007e68:	10800044 	addi	r2,r2,1
10007e6c:	20c00015 	stw	r3,0(r4)
10007e70:	f800283a 	ret
10007e74:	0005883a 	mov	r2,zero
10007e78:	f800283a 	ret
10007e7c:	1806d07a 	srli	r3,r3,1
10007e80:	00800044 	movi	r2,1
10007e84:	20c00015 	stw	r3,0(r4)
10007e88:	f800283a 	ret

10007e8c <__i2b>:
10007e8c:	defffd04 	addi	sp,sp,-12
10007e90:	dc000015 	stw	r16,0(sp)
10007e94:	04000044 	movi	r16,1
10007e98:	dc400115 	stw	r17,4(sp)
10007e9c:	2823883a 	mov	r17,r5
10007ea0:	800b883a 	mov	r5,r16
10007ea4:	dfc00215 	stw	ra,8(sp)
10007ea8:	0007a5c0 	call	10007a5c <_Balloc>
10007eac:	14400515 	stw	r17,20(r2)
10007eb0:	14000415 	stw	r16,16(r2)
10007eb4:	dfc00217 	ldw	ra,8(sp)
10007eb8:	dc400117 	ldw	r17,4(sp)
10007ebc:	dc000017 	ldw	r16,0(sp)
10007ec0:	dec00304 	addi	sp,sp,12
10007ec4:	f800283a 	ret

10007ec8 <__multiply>:
10007ec8:	defff004 	addi	sp,sp,-64
10007ecc:	dc800815 	stw	r18,32(sp)
10007ed0:	dc400715 	stw	r17,28(sp)
10007ed4:	34800417 	ldw	r18,16(r6)
10007ed8:	2c400417 	ldw	r17,16(r5)
10007edc:	ddc00d15 	stw	r23,52(sp)
10007ee0:	dc000615 	stw	r16,24(sp)
10007ee4:	dfc00f15 	stw	ra,60(sp)
10007ee8:	df000e15 	stw	fp,56(sp)
10007eec:	dd800c15 	stw	r22,48(sp)
10007ef0:	dd400b15 	stw	r21,44(sp)
10007ef4:	dd000a15 	stw	r20,40(sp)
10007ef8:	dcc00915 	stw	r19,36(sp)
10007efc:	2821883a 	mov	r16,r5
10007f00:	302f883a 	mov	r23,r6
10007f04:	8c80050e 	bge	r17,r18,10007f1c <__multiply+0x54>
10007f08:	8807883a 	mov	r3,r17
10007f0c:	3021883a 	mov	r16,r6
10007f10:	9023883a 	mov	r17,r18
10007f14:	282f883a 	mov	r23,r5
10007f18:	1825883a 	mov	r18,r3
10007f1c:	80800217 	ldw	r2,8(r16)
10007f20:	8c87883a 	add	r3,r17,r18
10007f24:	d8c00115 	stw	r3,4(sp)
10007f28:	81400117 	ldw	r5,4(r16)
10007f2c:	10c0010e 	bge	r2,r3,10007f34 <__multiply+0x6c>
10007f30:	29400044 	addi	r5,r5,1
10007f34:	0007a5c0 	call	10007a5c <_Balloc>
10007f38:	d8c00117 	ldw	r3,4(sp)
10007f3c:	d8800515 	stw	r2,20(sp)
10007f40:	14c00504 	addi	r19,r2,20
10007f44:	1d400144 	addi	r21,r3,5
10007f48:	ad6b883a 	add	r21,r21,r21
10007f4c:	ad6b883a 	add	r21,r21,r21
10007f50:	156b883a 	add	r21,r2,r21
10007f54:	dd400215 	stw	r21,8(sp)
10007f58:	9805883a 	mov	r2,r19
10007f5c:	9d40042e 	bgeu	r19,r21,10007f70 <__multiply+0xa8>
10007f60:	d8c00217 	ldw	r3,8(sp)
10007f64:	10000015 	stw	zero,0(r2)
10007f68:	10800104 	addi	r2,r2,4
10007f6c:	10fffc36 	bltu	r2,r3,10007f60 <__alt_data_end+0xf8007f60>
10007f70:	94800144 	addi	r18,r18,5
10007f74:	94a5883a 	add	r18,r18,r18
10007f78:	94ad883a 	add	r22,r18,r18
10007f7c:	8c400144 	addi	r17,r17,5
10007f80:	8c63883a 	add	r17,r17,r17
10007f84:	bdad883a 	add	r22,r23,r22
10007f88:	80c00504 	addi	r3,r16,20
10007f8c:	8c63883a 	add	r17,r17,r17
10007f90:	bc800504 	addi	r18,r23,20
10007f94:	dd800315 	stw	r22,12(sp)
10007f98:	d8c00415 	stw	r3,16(sp)
10007f9c:	dcc00015 	stw	r19,0(sp)
10007fa0:	8463883a 	add	r17,r16,r17
10007fa4:	9580412e 	bgeu	r18,r22,100080ac <__multiply+0x1e4>
10007fa8:	90800017 	ldw	r2,0(r18)
10007fac:	173fffcc 	andi	fp,r2,65535
10007fb0:	e0001a26 	beq	fp,zero,1000801c <__multiply+0x154>
10007fb4:	dd000017 	ldw	r20,0(sp)
10007fb8:	dd800417 	ldw	r22,16(sp)
10007fbc:	002b883a 	mov	r21,zero
10007fc0:	b4c00017 	ldw	r19,0(r22)
10007fc4:	a4000017 	ldw	r16,0(r20)
10007fc8:	e00b883a 	mov	r5,fp
10007fcc:	993fffcc 	andi	r4,r19,65535
10007fd0:	000b2bc0 	call	1000b2bc <__mulsi3>
10007fd4:	9808d43a 	srli	r4,r19,16
10007fd8:	817fffcc 	andi	r5,r16,65535
10007fdc:	1145883a 	add	r2,r2,r5
10007fe0:	e00b883a 	mov	r5,fp
10007fe4:	1567883a 	add	r19,r2,r21
10007fe8:	8020d43a 	srli	r16,r16,16
10007fec:	000b2bc0 	call	1000b2bc <__mulsi3>
10007ff0:	9808d43a 	srli	r4,r19,16
10007ff4:	1405883a 	add	r2,r2,r16
10007ff8:	a4c0000d 	sth	r19,0(r20)
10007ffc:	110f883a 	add	r7,r2,r4
10008000:	a1c0008d 	sth	r7,2(r20)
10008004:	b5800104 	addi	r22,r22,4
10008008:	382ad43a 	srli	r21,r7,16
1000800c:	a5000104 	addi	r20,r20,4
10008010:	b47feb36 	bltu	r22,r17,10007fc0 <__alt_data_end+0xf8007fc0>
10008014:	a5400015 	stw	r21,0(r20)
10008018:	90800017 	ldw	r2,0(r18)
1000801c:	1038d43a 	srli	fp,r2,16
10008020:	e0001c26 	beq	fp,zero,10008094 <__multiply+0x1cc>
10008024:	d8c00017 	ldw	r3,0(sp)
10008028:	dd000417 	ldw	r20,16(sp)
1000802c:	002b883a 	mov	r21,zero
10008030:	1d800017 	ldw	r22,0(r3)
10008034:	182f883a 	mov	r23,r3
10008038:	b021883a 	mov	r16,r22
1000803c:	a4c00017 	ldw	r19,0(r20)
10008040:	8020d43a 	srli	r16,r16,16
10008044:	e00b883a 	mov	r5,fp
10008048:	993fffcc 	andi	r4,r19,65535
1000804c:	000b2bc0 	call	1000b2bc <__mulsi3>
10008050:	1405883a 	add	r2,r2,r16
10008054:	9808d43a 	srli	r4,r19,16
10008058:	156b883a 	add	r21,r2,r21
1000805c:	bdc00104 	addi	r23,r23,4
10008060:	bdbfff0d 	sth	r22,-4(r23)
10008064:	bd7fff8d 	sth	r21,-2(r23)
10008068:	bc000017 	ldw	r16,0(r23)
1000806c:	e00b883a 	mov	r5,fp
10008070:	000b2bc0 	call	1000b2bc <__mulsi3>
10008074:	a80ed43a 	srli	r7,r21,16
10008078:	813fffcc 	andi	r4,r16,65535
1000807c:	2085883a 	add	r2,r4,r2
10008080:	11ed883a 	add	r22,r2,r7
10008084:	a5000104 	addi	r20,r20,4
10008088:	b02ad43a 	srli	r21,r22,16
1000808c:	a47feb36 	bltu	r20,r17,1000803c <__alt_data_end+0xf800803c>
10008090:	bd800015 	stw	r22,0(r23)
10008094:	d8c00017 	ldw	r3,0(sp)
10008098:	94800104 	addi	r18,r18,4
1000809c:	18c00104 	addi	r3,r3,4
100080a0:	d8c00015 	stw	r3,0(sp)
100080a4:	d8c00317 	ldw	r3,12(sp)
100080a8:	90ffbf36 	bltu	r18,r3,10007fa8 <__alt_data_end+0xf8007fa8>
100080ac:	d8c00117 	ldw	r3,4(sp)
100080b0:	00c00c0e 	bge	zero,r3,100080e4 <__multiply+0x21c>
100080b4:	d8c00217 	ldw	r3,8(sp)
100080b8:	18bfff17 	ldw	r2,-4(r3)
100080bc:	1d7fff04 	addi	r21,r3,-4
100080c0:	10000326 	beq	r2,zero,100080d0 <__multiply+0x208>
100080c4:	00000706 	br	100080e4 <__multiply+0x21c>
100080c8:	a8800017 	ldw	r2,0(r21)
100080cc:	1000051e 	bne	r2,zero,100080e4 <__multiply+0x21c>
100080d0:	d8c00117 	ldw	r3,4(sp)
100080d4:	ad7fff04 	addi	r21,r21,-4
100080d8:	18ffffc4 	addi	r3,r3,-1
100080dc:	d8c00115 	stw	r3,4(sp)
100080e0:	183ff91e 	bne	r3,zero,100080c8 <__alt_data_end+0xf80080c8>
100080e4:	d8800517 	ldw	r2,20(sp)
100080e8:	d8c00117 	ldw	r3,4(sp)
100080ec:	10c00415 	stw	r3,16(r2)
100080f0:	dfc00f17 	ldw	ra,60(sp)
100080f4:	df000e17 	ldw	fp,56(sp)
100080f8:	ddc00d17 	ldw	r23,52(sp)
100080fc:	dd800c17 	ldw	r22,48(sp)
10008100:	dd400b17 	ldw	r21,44(sp)
10008104:	dd000a17 	ldw	r20,40(sp)
10008108:	dcc00917 	ldw	r19,36(sp)
1000810c:	dc800817 	ldw	r18,32(sp)
10008110:	dc400717 	ldw	r17,28(sp)
10008114:	dc000617 	ldw	r16,24(sp)
10008118:	dec01004 	addi	sp,sp,64
1000811c:	f800283a 	ret

10008120 <__pow5mult>:
10008120:	defffb04 	addi	sp,sp,-20
10008124:	dcc00315 	stw	r19,12(sp)
10008128:	dc800215 	stw	r18,8(sp)
1000812c:	dc000015 	stw	r16,0(sp)
10008130:	dfc00415 	stw	ra,16(sp)
10008134:	dc400115 	stw	r17,4(sp)
10008138:	308000cc 	andi	r2,r6,3
1000813c:	3021883a 	mov	r16,r6
10008140:	2027883a 	mov	r19,r4
10008144:	2825883a 	mov	r18,r5
10008148:	10002e1e 	bne	r2,zero,10008204 <__pow5mult+0xe4>
1000814c:	8021d0ba 	srai	r16,r16,2
10008150:	80001a26 	beq	r16,zero,100081bc <__pow5mult+0x9c>
10008154:	9c401217 	ldw	r17,72(r19)
10008158:	8800061e 	bne	r17,zero,10008174 <__pow5mult+0x54>
1000815c:	00003406 	br	10008230 <__pow5mult+0x110>
10008160:	8021d07a 	srai	r16,r16,1
10008164:	80001526 	beq	r16,zero,100081bc <__pow5mult+0x9c>
10008168:	88c00017 	ldw	r3,0(r17)
1000816c:	18001b26 	beq	r3,zero,100081dc <__pow5mult+0xbc>
10008170:	1823883a 	mov	r17,r3
10008174:	80c0004c 	andi	r3,r16,1
10008178:	183ff926 	beq	r3,zero,10008160 <__alt_data_end+0xf8008160>
1000817c:	900b883a 	mov	r5,r18
10008180:	880d883a 	mov	r6,r17
10008184:	9809883a 	mov	r4,r19
10008188:	0007ec80 	call	10007ec8 <__multiply>
1000818c:	90001b26 	beq	r18,zero,100081fc <__pow5mult+0xdc>
10008190:	91000117 	ldw	r4,4(r18)
10008194:	98c01317 	ldw	r3,76(r19)
10008198:	8021d07a 	srai	r16,r16,1
1000819c:	2109883a 	add	r4,r4,r4
100081a0:	2109883a 	add	r4,r4,r4
100081a4:	1907883a 	add	r3,r3,r4
100081a8:	19000017 	ldw	r4,0(r3)
100081ac:	91000015 	stw	r4,0(r18)
100081b0:	1c800015 	stw	r18,0(r3)
100081b4:	1025883a 	mov	r18,r2
100081b8:	803feb1e 	bne	r16,zero,10008168 <__alt_data_end+0xf8008168>
100081bc:	9005883a 	mov	r2,r18
100081c0:	dfc00417 	ldw	ra,16(sp)
100081c4:	dcc00317 	ldw	r19,12(sp)
100081c8:	dc800217 	ldw	r18,8(sp)
100081cc:	dc400117 	ldw	r17,4(sp)
100081d0:	dc000017 	ldw	r16,0(sp)
100081d4:	dec00504 	addi	sp,sp,20
100081d8:	f800283a 	ret
100081dc:	880b883a 	mov	r5,r17
100081e0:	880d883a 	mov	r6,r17
100081e4:	9809883a 	mov	r4,r19
100081e8:	0007ec80 	call	10007ec8 <__multiply>
100081ec:	88800015 	stw	r2,0(r17)
100081f0:	10000015 	stw	zero,0(r2)
100081f4:	1023883a 	mov	r17,r2
100081f8:	003fde06 	br	10008174 <__alt_data_end+0xf8008174>
100081fc:	1025883a 	mov	r18,r2
10008200:	003fd706 	br	10008160 <__alt_data_end+0xf8008160>
10008204:	10bfffc4 	addi	r2,r2,-1
10008208:	1085883a 	add	r2,r2,r2
1000820c:	00c40074 	movhi	r3,4097
10008210:	18faa704 	addi	r3,r3,-5476
10008214:	1085883a 	add	r2,r2,r2
10008218:	1885883a 	add	r2,r3,r2
1000821c:	11800017 	ldw	r6,0(r2)
10008220:	000f883a 	mov	r7,zero
10008224:	0007b2c0 	call	10007b2c <__multadd>
10008228:	1025883a 	mov	r18,r2
1000822c:	003fc706 	br	1000814c <__alt_data_end+0xf800814c>
10008230:	9809883a 	mov	r4,r19
10008234:	01409c44 	movi	r5,625
10008238:	0007e8c0 	call	10007e8c <__i2b>
1000823c:	98801215 	stw	r2,72(r19)
10008240:	1023883a 	mov	r17,r2
10008244:	10000015 	stw	zero,0(r2)
10008248:	003fca06 	br	10008174 <__alt_data_end+0xf8008174>

1000824c <__lshift>:
1000824c:	defff904 	addi	sp,sp,-28
10008250:	dd400515 	stw	r21,20(sp)
10008254:	dc400115 	stw	r17,4(sp)
10008258:	2d400417 	ldw	r21,16(r5)
1000825c:	3023d17a 	srai	r17,r6,5
10008260:	28800217 	ldw	r2,8(r5)
10008264:	dd000415 	stw	r20,16(sp)
10008268:	8d6b883a 	add	r21,r17,r21
1000826c:	dcc00315 	stw	r19,12(sp)
10008270:	dc800215 	stw	r18,8(sp)
10008274:	dc000015 	stw	r16,0(sp)
10008278:	dfc00615 	stw	ra,24(sp)
1000827c:	ac000044 	addi	r16,r21,1
10008280:	2825883a 	mov	r18,r5
10008284:	3029883a 	mov	r20,r6
10008288:	2027883a 	mov	r19,r4
1000828c:	29400117 	ldw	r5,4(r5)
10008290:	1400030e 	bge	r2,r16,100082a0 <__lshift+0x54>
10008294:	1085883a 	add	r2,r2,r2
10008298:	29400044 	addi	r5,r5,1
1000829c:	143ffd16 	blt	r2,r16,10008294 <__alt_data_end+0xf8008294>
100082a0:	9809883a 	mov	r4,r19
100082a4:	0007a5c0 	call	10007a5c <_Balloc>
100082a8:	10c00504 	addi	r3,r2,20
100082ac:	0440090e 	bge	zero,r17,100082d4 <__lshift+0x88>
100082b0:	000f883a 	mov	r7,zero
100082b4:	18000015 	stw	zero,0(r3)
100082b8:	39c00044 	addi	r7,r7,1
100082bc:	18c00104 	addi	r3,r3,4
100082c0:	3c7ffc1e 	bne	r7,r17,100082b4 <__alt_data_end+0xf80082b4>
100082c4:	38c00144 	addi	r3,r7,5
100082c8:	18c7883a 	add	r3,r3,r3
100082cc:	18c7883a 	add	r3,r3,r3
100082d0:	10c7883a 	add	r3,r2,r3
100082d4:	92000417 	ldw	r8,16(r18)
100082d8:	a18007cc 	andi	r6,r20,31
100082dc:	91c00504 	addi	r7,r18,20
100082e0:	42000144 	addi	r8,r8,5
100082e4:	4211883a 	add	r8,r8,r8
100082e8:	4211883a 	add	r8,r8,r8
100082ec:	9211883a 	add	r8,r18,r8
100082f0:	30002226 	beq	r6,zero,1000837c <__lshift+0x130>
100082f4:	02800804 	movi	r10,32
100082f8:	5195c83a 	sub	r10,r10,r6
100082fc:	000b883a 	mov	r5,zero
10008300:	3a400017 	ldw	r9,0(r7)
10008304:	18c00104 	addi	r3,r3,4
10008308:	39c00104 	addi	r7,r7,4
1000830c:	4992983a 	sll	r9,r9,r6
10008310:	2a4ab03a 	or	r5,r5,r9
10008314:	197fff15 	stw	r5,-4(r3)
10008318:	397fff17 	ldw	r5,-4(r7)
1000831c:	2a8ad83a 	srl	r5,r5,r10
10008320:	3a3ff736 	bltu	r7,r8,10008300 <__alt_data_end+0xf8008300>
10008324:	19400015 	stw	r5,0(r3)
10008328:	28000126 	beq	r5,zero,10008330 <__lshift+0xe4>
1000832c:	ac000084 	addi	r16,r21,2
10008330:	91000117 	ldw	r4,4(r18)
10008334:	98c01317 	ldw	r3,76(r19)
10008338:	843fffc4 	addi	r16,r16,-1
1000833c:	2109883a 	add	r4,r4,r4
10008340:	2109883a 	add	r4,r4,r4
10008344:	1907883a 	add	r3,r3,r4
10008348:	19000017 	ldw	r4,0(r3)
1000834c:	14000415 	stw	r16,16(r2)
10008350:	91000015 	stw	r4,0(r18)
10008354:	1c800015 	stw	r18,0(r3)
10008358:	dfc00617 	ldw	ra,24(sp)
1000835c:	dd400517 	ldw	r21,20(sp)
10008360:	dd000417 	ldw	r20,16(sp)
10008364:	dcc00317 	ldw	r19,12(sp)
10008368:	dc800217 	ldw	r18,8(sp)
1000836c:	dc400117 	ldw	r17,4(sp)
10008370:	dc000017 	ldw	r16,0(sp)
10008374:	dec00704 	addi	sp,sp,28
10008378:	f800283a 	ret
1000837c:	39400017 	ldw	r5,0(r7)
10008380:	18c00104 	addi	r3,r3,4
10008384:	39c00104 	addi	r7,r7,4
10008388:	197fff15 	stw	r5,-4(r3)
1000838c:	3a3fe82e 	bgeu	r7,r8,10008330 <__alt_data_end+0xf8008330>
10008390:	39400017 	ldw	r5,0(r7)
10008394:	18c00104 	addi	r3,r3,4
10008398:	39c00104 	addi	r7,r7,4
1000839c:	197fff15 	stw	r5,-4(r3)
100083a0:	3a3ff636 	bltu	r7,r8,1000837c <__alt_data_end+0xf800837c>
100083a4:	003fe206 	br	10008330 <__alt_data_end+0xf8008330>

100083a8 <__mcmp>:
100083a8:	20800417 	ldw	r2,16(r4)
100083ac:	28c00417 	ldw	r3,16(r5)
100083b0:	10c5c83a 	sub	r2,r2,r3
100083b4:	10000f1e 	bne	r2,zero,100083f4 <__mcmp+0x4c>
100083b8:	18c00144 	addi	r3,r3,5
100083bc:	18c7883a 	add	r3,r3,r3
100083c0:	18c7883a 	add	r3,r3,r3
100083c4:	21c00504 	addi	r7,r4,20
100083c8:	28cb883a 	add	r5,r5,r3
100083cc:	20c9883a 	add	r4,r4,r3
100083d0:	213fff04 	addi	r4,r4,-4
100083d4:	297fff04 	addi	r5,r5,-4
100083d8:	21800017 	ldw	r6,0(r4)
100083dc:	28c00017 	ldw	r3,0(r5)
100083e0:	30c0021e 	bne	r6,r3,100083ec <__mcmp+0x44>
100083e4:	393ffa36 	bltu	r7,r4,100083d0 <__alt_data_end+0xf80083d0>
100083e8:	f800283a 	ret
100083ec:	30c00236 	bltu	r6,r3,100083f8 <__mcmp+0x50>
100083f0:	00800044 	movi	r2,1
100083f4:	f800283a 	ret
100083f8:	00bfffc4 	movi	r2,-1
100083fc:	f800283a 	ret

10008400 <__mdiff>:
10008400:	defffb04 	addi	sp,sp,-20
10008404:	dc000015 	stw	r16,0(sp)
10008408:	2821883a 	mov	r16,r5
1000840c:	dc800215 	stw	r18,8(sp)
10008410:	300b883a 	mov	r5,r6
10008414:	2025883a 	mov	r18,r4
10008418:	8009883a 	mov	r4,r16
1000841c:	dc400115 	stw	r17,4(sp)
10008420:	dfc00415 	stw	ra,16(sp)
10008424:	dcc00315 	stw	r19,12(sp)
10008428:	3023883a 	mov	r17,r6
1000842c:	00083a80 	call	100083a8 <__mcmp>
10008430:	10005026 	beq	r2,zero,10008574 <__mdiff+0x174>
10008434:	10004a16 	blt	r2,zero,10008560 <__mdiff+0x160>
10008438:	0027883a 	mov	r19,zero
1000843c:	81400117 	ldw	r5,4(r16)
10008440:	9009883a 	mov	r4,r18
10008444:	0007a5c0 	call	10007a5c <_Balloc>
10008448:	82400417 	ldw	r9,16(r16)
1000844c:	89800417 	ldw	r6,16(r17)
10008450:	14c00315 	stw	r19,12(r2)
10008454:	4b800144 	addi	r14,r9,5
10008458:	31800144 	addi	r6,r6,5
1000845c:	739d883a 	add	r14,r14,r14
10008460:	318d883a 	add	r6,r6,r6
10008464:	739d883a 	add	r14,r14,r14
10008468:	318d883a 	add	r6,r6,r6
1000846c:	81c00504 	addi	r7,r16,20
10008470:	839d883a 	add	r14,r16,r14
10008474:	8a000504 	addi	r8,r17,20
10008478:	898d883a 	add	r6,r17,r6
1000847c:	10c00504 	addi	r3,r2,20
10008480:	0009883a 	mov	r4,zero
10008484:	3b000017 	ldw	r12,0(r7)
10008488:	42c00017 	ldw	r11,0(r8)
1000848c:	42000104 	addi	r8,r8,4
10008490:	62bfffcc 	andi	r10,r12,65535
10008494:	5b7fffcc 	andi	r13,r11,65535
10008498:	5109883a 	add	r4,r10,r4
1000849c:	2355c83a 	sub	r10,r4,r13
100084a0:	5816d43a 	srli	r11,r11,16
100084a4:	6008d43a 	srli	r4,r12,16
100084a8:	501bd43a 	srai	r13,r10,16
100084ac:	1a80000d 	sth	r10,0(r3)
100084b0:	22c9c83a 	sub	r4,r4,r11
100084b4:	2349883a 	add	r4,r4,r13
100084b8:	1900008d 	sth	r4,2(r3)
100084bc:	39c00104 	addi	r7,r7,4
100084c0:	2009d43a 	srai	r4,r4,16
100084c4:	18c00104 	addi	r3,r3,4
100084c8:	41bfee36 	bltu	r8,r6,10008484 <__alt_data_end+0xf8008484>
100084cc:	180b883a 	mov	r5,r3
100084d0:	3815883a 	mov	r10,r7
100084d4:	3b80132e 	bgeu	r7,r14,10008524 <__mdiff+0x124>
100084d8:	3a000017 	ldw	r8,0(r7)
100084dc:	18c00104 	addi	r3,r3,4
100084e0:	39c00104 	addi	r7,r7,4
100084e4:	41bfffcc 	andi	r6,r8,65535
100084e8:	310d883a 	add	r6,r6,r4
100084ec:	3009d43a 	srai	r4,r6,16
100084f0:	4010d43a 	srli	r8,r8,16
100084f4:	19bfff0d 	sth	r6,-4(r3)
100084f8:	2209883a 	add	r4,r4,r8
100084fc:	193fff8d 	sth	r4,-2(r3)
10008500:	2009d43a 	srai	r4,r4,16
10008504:	3bbff436 	bltu	r7,r14,100084d8 <__alt_data_end+0xf80084d8>
10008508:	0286303a 	nor	r3,zero,r10
1000850c:	1b87883a 	add	r3,r3,r14
10008510:	1806d0ba 	srli	r3,r3,2
10008514:	18c00044 	addi	r3,r3,1
10008518:	18c7883a 	add	r3,r3,r3
1000851c:	18c7883a 	add	r3,r3,r3
10008520:	28c7883a 	add	r3,r5,r3
10008524:	193fff17 	ldw	r4,-4(r3)
10008528:	18ffff04 	addi	r3,r3,-4
1000852c:	2000041e 	bne	r4,zero,10008540 <__mdiff+0x140>
10008530:	18ffff04 	addi	r3,r3,-4
10008534:	19000017 	ldw	r4,0(r3)
10008538:	4a7fffc4 	addi	r9,r9,-1
1000853c:	203ffc26 	beq	r4,zero,10008530 <__alt_data_end+0xf8008530>
10008540:	12400415 	stw	r9,16(r2)
10008544:	dfc00417 	ldw	ra,16(sp)
10008548:	dcc00317 	ldw	r19,12(sp)
1000854c:	dc800217 	ldw	r18,8(sp)
10008550:	dc400117 	ldw	r17,4(sp)
10008554:	dc000017 	ldw	r16,0(sp)
10008558:	dec00504 	addi	sp,sp,20
1000855c:	f800283a 	ret
10008560:	8005883a 	mov	r2,r16
10008564:	04c00044 	movi	r19,1
10008568:	8821883a 	mov	r16,r17
1000856c:	1023883a 	mov	r17,r2
10008570:	003fb206 	br	1000843c <__alt_data_end+0xf800843c>
10008574:	9009883a 	mov	r4,r18
10008578:	000b883a 	mov	r5,zero
1000857c:	0007a5c0 	call	10007a5c <_Balloc>
10008580:	00c00044 	movi	r3,1
10008584:	10c00415 	stw	r3,16(r2)
10008588:	10000515 	stw	zero,20(r2)
1000858c:	dfc00417 	ldw	ra,16(sp)
10008590:	dcc00317 	ldw	r19,12(sp)
10008594:	dc800217 	ldw	r18,8(sp)
10008598:	dc400117 	ldw	r17,4(sp)
1000859c:	dc000017 	ldw	r16,0(sp)
100085a0:	dec00504 	addi	sp,sp,20
100085a4:	f800283a 	ret

100085a8 <__ulp>:
100085a8:	295ffc2c 	andhi	r5,r5,32752
100085ac:	00bf3034 	movhi	r2,64704
100085b0:	2887883a 	add	r3,r5,r2
100085b4:	00c0020e 	bge	zero,r3,100085c0 <__ulp+0x18>
100085b8:	0005883a 	mov	r2,zero
100085bc:	f800283a 	ret
100085c0:	00c7c83a 	sub	r3,zero,r3
100085c4:	1805d53a 	srai	r2,r3,20
100085c8:	00c004c4 	movi	r3,19
100085cc:	18800a0e 	bge	r3,r2,100085f8 <__ulp+0x50>
100085d0:	01000c84 	movi	r4,50
100085d4:	0007883a 	mov	r3,zero
100085d8:	20800516 	blt	r4,r2,100085f0 <__ulp+0x48>
100085dc:	01000cc4 	movi	r4,51
100085e0:	2085c83a 	sub	r2,r4,r2
100085e4:	01000044 	movi	r4,1
100085e8:	2084983a 	sll	r2,r4,r2
100085ec:	f800283a 	ret
100085f0:	00800044 	movi	r2,1
100085f4:	f800283a 	ret
100085f8:	00c00234 	movhi	r3,8
100085fc:	1887d83a 	sra	r3,r3,r2
10008600:	0005883a 	mov	r2,zero
10008604:	f800283a 	ret

10008608 <__b2d>:
10008608:	defffa04 	addi	sp,sp,-24
1000860c:	dc000015 	stw	r16,0(sp)
10008610:	24000417 	ldw	r16,16(r4)
10008614:	dc400115 	stw	r17,4(sp)
10008618:	dcc00315 	stw	r19,12(sp)
1000861c:	84000144 	addi	r16,r16,5
10008620:	8421883a 	add	r16,r16,r16
10008624:	8421883a 	add	r16,r16,r16
10008628:	2421883a 	add	r16,r4,r16
1000862c:	847fff17 	ldw	r17,-4(r16)
10008630:	24c00504 	addi	r19,r4,20
10008634:	dd000415 	stw	r20,16(sp)
10008638:	8809883a 	mov	r4,r17
1000863c:	dc800215 	stw	r18,8(sp)
10008640:	2829883a 	mov	r20,r5
10008644:	dfc00515 	stw	ra,20(sp)
10008648:	0007d740 	call	10007d74 <__hi0bits>
1000864c:	00c00804 	movi	r3,32
10008650:	1887c83a 	sub	r3,r3,r2
10008654:	a0c00015 	stw	r3,0(r20)
10008658:	00c00284 	movi	r3,10
1000865c:	84bfff04 	addi	r18,r16,-4
10008660:	18801216 	blt	r3,r2,100086ac <__b2d+0xa4>
10008664:	010002c4 	movi	r4,11
10008668:	2089c83a 	sub	r4,r4,r2
1000866c:	8906d83a 	srl	r3,r17,r4
10008670:	18cffc34 	orhi	r3,r3,16368
10008674:	9c80322e 	bgeu	r19,r18,10008740 <__b2d+0x138>
10008678:	817ffe17 	ldw	r5,-8(r16)
1000867c:	2908d83a 	srl	r4,r5,r4
10008680:	10800544 	addi	r2,r2,21
10008684:	88a2983a 	sll	r17,r17,r2
10008688:	2444b03a 	or	r2,r4,r17
1000868c:	dfc00517 	ldw	ra,20(sp)
10008690:	dd000417 	ldw	r20,16(sp)
10008694:	dcc00317 	ldw	r19,12(sp)
10008698:	dc800217 	ldw	r18,8(sp)
1000869c:	dc400117 	ldw	r17,4(sp)
100086a0:	dc000017 	ldw	r16,0(sp)
100086a4:	dec00604 	addi	sp,sp,24
100086a8:	f800283a 	ret
100086ac:	9c801636 	bltu	r19,r18,10008708 <__b2d+0x100>
100086b0:	113ffd44 	addi	r4,r2,-11
100086b4:	000b883a 	mov	r5,zero
100086b8:	20001726 	beq	r4,zero,10008718 <__b2d+0x110>
100086bc:	00c00ac4 	movi	r3,43
100086c0:	1885c83a 	sub	r2,r3,r2
100086c4:	8906983a 	sll	r3,r17,r4
100086c8:	288cd83a 	srl	r6,r5,r2
100086cc:	18cffc34 	orhi	r3,r3,16368
100086d0:	1986b03a 	or	r3,r3,r6
100086d4:	9c801c2e 	bgeu	r19,r18,10008748 <__b2d+0x140>
100086d8:	91bfff17 	ldw	r6,-4(r18)
100086dc:	3084d83a 	srl	r2,r6,r2
100086e0:	2908983a 	sll	r4,r5,r4
100086e4:	1104b03a 	or	r2,r2,r4
100086e8:	dfc00517 	ldw	ra,20(sp)
100086ec:	dd000417 	ldw	r20,16(sp)
100086f0:	dcc00317 	ldw	r19,12(sp)
100086f4:	dc800217 	ldw	r18,8(sp)
100086f8:	dc400117 	ldw	r17,4(sp)
100086fc:	dc000017 	ldw	r16,0(sp)
10008700:	dec00604 	addi	sp,sp,24
10008704:	f800283a 	ret
10008708:	113ffd44 	addi	r4,r2,-11
1000870c:	84bffe04 	addi	r18,r16,-8
10008710:	817ffe17 	ldw	r5,-8(r16)
10008714:	203fe91e 	bne	r4,zero,100086bc <__alt_data_end+0xf80086bc>
10008718:	88cffc34 	orhi	r3,r17,16368
1000871c:	2805883a 	mov	r2,r5
10008720:	dfc00517 	ldw	ra,20(sp)
10008724:	dd000417 	ldw	r20,16(sp)
10008728:	dcc00317 	ldw	r19,12(sp)
1000872c:	dc800217 	ldw	r18,8(sp)
10008730:	dc400117 	ldw	r17,4(sp)
10008734:	dc000017 	ldw	r16,0(sp)
10008738:	dec00604 	addi	sp,sp,24
1000873c:	f800283a 	ret
10008740:	0009883a 	mov	r4,zero
10008744:	003fce06 	br	10008680 <__alt_data_end+0xf8008680>
10008748:	0005883a 	mov	r2,zero
1000874c:	003fe406 	br	100086e0 <__alt_data_end+0xf80086e0>

10008750 <__d2b>:
10008750:	defff804 	addi	sp,sp,-32
10008754:	dc400315 	stw	r17,12(sp)
10008758:	3023883a 	mov	r17,r6
1000875c:	dc800415 	stw	r18,16(sp)
10008760:	8824907a 	slli	r18,r17,1
10008764:	dcc00515 	stw	r19,20(sp)
10008768:	2827883a 	mov	r19,r5
1000876c:	9024d57a 	srli	r18,r18,21
10008770:	01400044 	movi	r5,1
10008774:	dd000615 	stw	r20,24(sp)
10008778:	dc000215 	stw	r16,8(sp)
1000877c:	dfc00715 	stw	ra,28(sp)
10008780:	3829883a 	mov	r20,r7
10008784:	0007a5c0 	call	10007a5c <_Balloc>
10008788:	1021883a 	mov	r16,r2
1000878c:	00800434 	movhi	r2,16
10008790:	10bfffc4 	addi	r2,r2,-1
10008794:	88a2703a 	and	r17,r17,r2
10008798:	90000126 	beq	r18,zero,100087a0 <__d2b+0x50>
1000879c:	8c400434 	orhi	r17,r17,16
100087a0:	dc400015 	stw	r17,0(sp)
100087a4:	98002226 	beq	r19,zero,10008830 <__d2b+0xe0>
100087a8:	d9000104 	addi	r4,sp,4
100087ac:	dcc00115 	stw	r19,4(sp)
100087b0:	0007ddc0 	call	10007ddc <__lo0bits>
100087b4:	d8c00017 	ldw	r3,0(sp)
100087b8:	10002d1e 	bne	r2,zero,10008870 <__d2b+0x120>
100087bc:	d9000117 	ldw	r4,4(sp)
100087c0:	81000515 	stw	r4,20(r16)
100087c4:	1823003a 	cmpeq	r17,r3,zero
100087c8:	01000084 	movi	r4,2
100087cc:	2463c83a 	sub	r17,r4,r17
100087d0:	80c00615 	stw	r3,24(r16)
100087d4:	84400415 	stw	r17,16(r16)
100087d8:	90001d1e 	bne	r18,zero,10008850 <__d2b+0x100>
100087dc:	88c00104 	addi	r3,r17,4
100087e0:	18c7883a 	add	r3,r3,r3
100087e4:	18c7883a 	add	r3,r3,r3
100087e8:	80c7883a 	add	r3,r16,r3
100087ec:	19000017 	ldw	r4,0(r3)
100087f0:	10bef384 	addi	r2,r2,-1074
100087f4:	a0800015 	stw	r2,0(r20)
100087f8:	0007d740 	call	10007d74 <__hi0bits>
100087fc:	8822917a 	slli	r17,r17,5
10008800:	d8c00817 	ldw	r3,32(sp)
10008804:	8885c83a 	sub	r2,r17,r2
10008808:	18800015 	stw	r2,0(r3)
1000880c:	8005883a 	mov	r2,r16
10008810:	dfc00717 	ldw	ra,28(sp)
10008814:	dd000617 	ldw	r20,24(sp)
10008818:	dcc00517 	ldw	r19,20(sp)
1000881c:	dc800417 	ldw	r18,16(sp)
10008820:	dc400317 	ldw	r17,12(sp)
10008824:	dc000217 	ldw	r16,8(sp)
10008828:	dec00804 	addi	sp,sp,32
1000882c:	f800283a 	ret
10008830:	d809883a 	mov	r4,sp
10008834:	0007ddc0 	call	10007ddc <__lo0bits>
10008838:	d8c00017 	ldw	r3,0(sp)
1000883c:	04400044 	movi	r17,1
10008840:	84400415 	stw	r17,16(r16)
10008844:	80c00515 	stw	r3,20(r16)
10008848:	10800804 	addi	r2,r2,32
1000884c:	903fe326 	beq	r18,zero,100087dc <__alt_data_end+0xf80087dc>
10008850:	00c00d44 	movi	r3,53
10008854:	94bef344 	addi	r18,r18,-1075
10008858:	90a5883a 	add	r18,r18,r2
1000885c:	1885c83a 	sub	r2,r3,r2
10008860:	d8c00817 	ldw	r3,32(sp)
10008864:	a4800015 	stw	r18,0(r20)
10008868:	18800015 	stw	r2,0(r3)
1000886c:	003fe706 	br	1000880c <__alt_data_end+0xf800880c>
10008870:	01000804 	movi	r4,32
10008874:	2089c83a 	sub	r4,r4,r2
10008878:	1908983a 	sll	r4,r3,r4
1000887c:	d9400117 	ldw	r5,4(sp)
10008880:	1886d83a 	srl	r3,r3,r2
10008884:	2148b03a 	or	r4,r4,r5
10008888:	81000515 	stw	r4,20(r16)
1000888c:	d8c00015 	stw	r3,0(sp)
10008890:	003fcc06 	br	100087c4 <__alt_data_end+0xf80087c4>

10008894 <__ratio>:
10008894:	defff904 	addi	sp,sp,-28
10008898:	dc400315 	stw	r17,12(sp)
1000889c:	2823883a 	mov	r17,r5
100088a0:	d9400104 	addi	r5,sp,4
100088a4:	dfc00615 	stw	ra,24(sp)
100088a8:	dcc00515 	stw	r19,20(sp)
100088ac:	dc800415 	stw	r18,16(sp)
100088b0:	2027883a 	mov	r19,r4
100088b4:	dc000215 	stw	r16,8(sp)
100088b8:	00086080 	call	10008608 <__b2d>
100088bc:	8809883a 	mov	r4,r17
100088c0:	d80b883a 	mov	r5,sp
100088c4:	1025883a 	mov	r18,r2
100088c8:	1821883a 	mov	r16,r3
100088cc:	00086080 	call	10008608 <__b2d>
100088d0:	99400417 	ldw	r5,16(r19)
100088d4:	89000417 	ldw	r4,16(r17)
100088d8:	d9800117 	ldw	r6,4(sp)
100088dc:	2909c83a 	sub	r4,r5,r4
100088e0:	d9400017 	ldw	r5,0(sp)
100088e4:	2008917a 	slli	r4,r4,5
100088e8:	314bc83a 	sub	r5,r6,r5
100088ec:	290b883a 	add	r5,r5,r4
100088f0:	01400e0e 	bge	zero,r5,1000892c <__ratio+0x98>
100088f4:	280a953a 	slli	r5,r5,20
100088f8:	2c21883a 	add	r16,r5,r16
100088fc:	9009883a 	mov	r4,r18
10008900:	800b883a 	mov	r5,r16
10008904:	100d883a 	mov	r6,r2
10008908:	180f883a 	mov	r7,r3
1000890c:	000ab480 	call	1000ab48 <__divdf3>
10008910:	dfc00617 	ldw	ra,24(sp)
10008914:	dcc00517 	ldw	r19,20(sp)
10008918:	dc800417 	ldw	r18,16(sp)
1000891c:	dc400317 	ldw	r17,12(sp)
10008920:	dc000217 	ldw	r16,8(sp)
10008924:	dec00704 	addi	sp,sp,28
10008928:	f800283a 	ret
1000892c:	280a953a 	slli	r5,r5,20
10008930:	1947c83a 	sub	r3,r3,r5
10008934:	003ff106 	br	100088fc <__alt_data_end+0xf80088fc>

10008938 <_mprec_log10>:
10008938:	defffe04 	addi	sp,sp,-8
1000893c:	dc000015 	stw	r16,0(sp)
10008940:	dfc00115 	stw	ra,4(sp)
10008944:	008005c4 	movi	r2,23
10008948:	2021883a 	mov	r16,r4
1000894c:	11000d0e 	bge	r2,r4,10008984 <_mprec_log10+0x4c>
10008950:	0005883a 	mov	r2,zero
10008954:	00cffc34 	movhi	r3,16368
10008958:	843fffc4 	addi	r16,r16,-1
1000895c:	1009883a 	mov	r4,r2
10008960:	180b883a 	mov	r5,r3
10008964:	000d883a 	mov	r6,zero
10008968:	01d00934 	movhi	r7,16420
1000896c:	000a8640 	call	1000a864 <__muldf3>
10008970:	803ff91e 	bne	r16,zero,10008958 <__alt_data_end+0xf8008958>
10008974:	dfc00117 	ldw	ra,4(sp)
10008978:	dc000017 	ldw	r16,0(sp)
1000897c:	dec00204 	addi	sp,sp,8
10008980:	f800283a 	ret
10008984:	202090fa 	slli	r16,r4,3
10008988:	00840074 	movhi	r2,4097
1000898c:	10ba7504 	addi	r2,r2,-5676
10008990:	1421883a 	add	r16,r2,r16
10008994:	80800017 	ldw	r2,0(r16)
10008998:	80c00117 	ldw	r3,4(r16)
1000899c:	dfc00117 	ldw	ra,4(sp)
100089a0:	dc000017 	ldw	r16,0(sp)
100089a4:	dec00204 	addi	sp,sp,8
100089a8:	f800283a 	ret

100089ac <__copybits>:
100089ac:	297fffc4 	addi	r5,r5,-1
100089b0:	31c00417 	ldw	r7,16(r6)
100089b4:	2811d17a 	srai	r8,r5,5
100089b8:	30800504 	addi	r2,r6,20
100089bc:	39c00144 	addi	r7,r7,5
100089c0:	42000044 	addi	r8,r8,1
100089c4:	39cf883a 	add	r7,r7,r7
100089c8:	4211883a 	add	r8,r8,r8
100089cc:	39cf883a 	add	r7,r7,r7
100089d0:	4211883a 	add	r8,r8,r8
100089d4:	31cf883a 	add	r7,r6,r7
100089d8:	2211883a 	add	r8,r4,r8
100089dc:	11c00d2e 	bgeu	r2,r7,10008a14 <__copybits+0x68>
100089e0:	2007883a 	mov	r3,r4
100089e4:	11400017 	ldw	r5,0(r2)
100089e8:	18c00104 	addi	r3,r3,4
100089ec:	10800104 	addi	r2,r2,4
100089f0:	197fff15 	stw	r5,-4(r3)
100089f4:	11fffb36 	bltu	r2,r7,100089e4 <__alt_data_end+0xf80089e4>
100089f8:	3985c83a 	sub	r2,r7,r6
100089fc:	10bffac4 	addi	r2,r2,-21
10008a00:	1004d0ba 	srli	r2,r2,2
10008a04:	10800044 	addi	r2,r2,1
10008a08:	1085883a 	add	r2,r2,r2
10008a0c:	1085883a 	add	r2,r2,r2
10008a10:	2089883a 	add	r4,r4,r2
10008a14:	2200032e 	bgeu	r4,r8,10008a24 <__copybits+0x78>
10008a18:	20000015 	stw	zero,0(r4)
10008a1c:	21000104 	addi	r4,r4,4
10008a20:	223ffd36 	bltu	r4,r8,10008a18 <__alt_data_end+0xf8008a18>
10008a24:	f800283a 	ret

10008a28 <__any_on>:
10008a28:	21800417 	ldw	r6,16(r4)
10008a2c:	2805d17a 	srai	r2,r5,5
10008a30:	20c00504 	addi	r3,r4,20
10008a34:	30800f0e 	bge	r6,r2,10008a74 <__any_on+0x4c>
10008a38:	3005883a 	mov	r2,r6
10008a3c:	10800144 	addi	r2,r2,5
10008a40:	1085883a 	add	r2,r2,r2
10008a44:	1085883a 	add	r2,r2,r2
10008a48:	2089883a 	add	r4,r4,r2
10008a4c:	1900152e 	bgeu	r3,r4,10008aa4 <__any_on+0x7c>
10008a50:	20bfff17 	ldw	r2,-4(r4)
10008a54:	213fff04 	addi	r4,r4,-4
10008a58:	1000041e 	bne	r2,zero,10008a6c <__any_on+0x44>
10008a5c:	1900112e 	bgeu	r3,r4,10008aa4 <__any_on+0x7c>
10008a60:	213fff04 	addi	r4,r4,-4
10008a64:	20800017 	ldw	r2,0(r4)
10008a68:	103ffc26 	beq	r2,zero,10008a5c <__alt_data_end+0xf8008a5c>
10008a6c:	00800044 	movi	r2,1
10008a70:	f800283a 	ret
10008a74:	11bff10e 	bge	r2,r6,10008a3c <__alt_data_end+0xf8008a3c>
10008a78:	294007cc 	andi	r5,r5,31
10008a7c:	283fef26 	beq	r5,zero,10008a3c <__alt_data_end+0xf8008a3c>
10008a80:	11800144 	addi	r6,r2,5
10008a84:	318d883a 	add	r6,r6,r6
10008a88:	318d883a 	add	r6,r6,r6
10008a8c:	218d883a 	add	r6,r4,r6
10008a90:	31800017 	ldw	r6,0(r6)
10008a94:	314ed83a 	srl	r7,r6,r5
10008a98:	394a983a 	sll	r5,r7,r5
10008a9c:	29bff31e 	bne	r5,r6,10008a6c <__alt_data_end+0xf8008a6c>
10008aa0:	003fe606 	br	10008a3c <__alt_data_end+0xf8008a3c>
10008aa4:	0005883a 	mov	r2,zero
10008aa8:	f800283a 	ret

10008aac <_realloc_r>:
10008aac:	defff504 	addi	sp,sp,-44
10008ab0:	dd400615 	stw	r21,24(sp)
10008ab4:	dc800315 	stw	r18,12(sp)
10008ab8:	dc000115 	stw	r16,4(sp)
10008abc:	dfc00a15 	stw	ra,40(sp)
10008ac0:	df000915 	stw	fp,36(sp)
10008ac4:	ddc00815 	stw	r23,32(sp)
10008ac8:	dd800715 	stw	r22,28(sp)
10008acc:	dd000515 	stw	r20,20(sp)
10008ad0:	dcc00415 	stw	r19,16(sp)
10008ad4:	dc400215 	stw	r17,8(sp)
10008ad8:	2821883a 	mov	r16,r5
10008adc:	202b883a 	mov	r21,r4
10008ae0:	3025883a 	mov	r18,r6
10008ae4:	28009626 	beq	r5,zero,10008d40 <_realloc_r+0x294>
10008ae8:	000bee40 	call	1000bee4 <__malloc_lock>
10008aec:	80bfff17 	ldw	r2,-4(r16)
10008af0:	04ffff04 	movi	r19,-4
10008af4:	90c002c4 	addi	r3,r18,11
10008af8:	01000584 	movi	r4,22
10008afc:	85bffe04 	addi	r22,r16,-8
10008b00:	14e6703a 	and	r19,r2,r19
10008b04:	20c0372e 	bgeu	r4,r3,10008be4 <_realloc_r+0x138>
10008b08:	047ffe04 	movi	r17,-8
10008b0c:	1c62703a 	and	r17,r3,r17
10008b10:	8807883a 	mov	r3,r17
10008b14:	88005a16 	blt	r17,zero,10008c80 <_realloc_r+0x1d4>
10008b18:	8c805936 	bltu	r17,r18,10008c80 <_realloc_r+0x1d4>
10008b1c:	98c0340e 	bge	r19,r3,10008bf0 <_realloc_r+0x144>
10008b20:	07040074 	movhi	fp,4097
10008b24:	e73bff04 	addi	fp,fp,-4100
10008b28:	e1400217 	ldw	r5,8(fp)
10008b2c:	b4c9883a 	add	r4,r22,r19
10008b30:	29009026 	beq	r5,r4,10008d74 <_realloc_r+0x2c8>
10008b34:	21800117 	ldw	r6,4(r4)
10008b38:	01ffff84 	movi	r7,-2
10008b3c:	31ce703a 	and	r7,r6,r7
10008b40:	21cf883a 	add	r7,r4,r7
10008b44:	39c00117 	ldw	r7,4(r7)
10008b48:	39c0004c 	andi	r7,r7,1
10008b4c:	38004326 	beq	r7,zero,10008c5c <_realloc_r+0x1b0>
10008b50:	000d883a 	mov	r6,zero
10008b54:	0009883a 	mov	r4,zero
10008b58:	1080004c 	andi	r2,r2,1
10008b5c:	10005a1e 	bne	r2,zero,10008cc8 <_realloc_r+0x21c>
10008b60:	85fffe17 	ldw	r23,-8(r16)
10008b64:	00bfff04 	movi	r2,-4
10008b68:	b5efc83a 	sub	r23,r22,r23
10008b6c:	b9c00117 	ldw	r7,4(r23)
10008b70:	388e703a 	and	r7,r7,r2
10008b74:	3ccf883a 	add	r7,r7,r19
10008b78:	20005226 	beq	r4,zero,10008cc4 <_realloc_r+0x218>
10008b7c:	31e9883a 	add	r20,r6,r7
10008b80:	2140c726 	beq	r4,r5,10008ea0 <_realloc_r+0x3f4>
10008b84:	a0c04f16 	blt	r20,r3,10008cc4 <_realloc_r+0x218>
10008b88:	20800317 	ldw	r2,12(r4)
10008b8c:	20c00217 	ldw	r3,8(r4)
10008b90:	99bfff04 	addi	r6,r19,-4
10008b94:	01000904 	movi	r4,36
10008b98:	18800315 	stw	r2,12(r3)
10008b9c:	10c00215 	stw	r3,8(r2)
10008ba0:	b8c00217 	ldw	r3,8(r23)
10008ba4:	b8800317 	ldw	r2,12(r23)
10008ba8:	bc800204 	addi	r18,r23,8
10008bac:	18800315 	stw	r2,12(r3)
10008bb0:	10c00215 	stw	r3,8(r2)
10008bb4:	2180ed36 	bltu	r4,r6,10008f6c <_realloc_r+0x4c0>
10008bb8:	008004c4 	movi	r2,19
10008bbc:	11809b2e 	bgeu	r2,r6,10008e2c <_realloc_r+0x380>
10008bc0:	80800017 	ldw	r2,0(r16)
10008bc4:	b8800215 	stw	r2,8(r23)
10008bc8:	80800117 	ldw	r2,4(r16)
10008bcc:	b8800315 	stw	r2,12(r23)
10008bd0:	008006c4 	movi	r2,27
10008bd4:	1180f936 	bltu	r2,r6,10008fbc <_realloc_r+0x510>
10008bd8:	b8800404 	addi	r2,r23,16
10008bdc:	80c00204 	addi	r3,r16,8
10008be0:	00009406 	br	10008e34 <_realloc_r+0x388>
10008be4:	00c00404 	movi	r3,16
10008be8:	1823883a 	mov	r17,r3
10008bec:	003fca06 	br	10008b18 <__alt_data_end+0xf8008b18>
10008bf0:	9829883a 	mov	r20,r19
10008bf4:	a447c83a 	sub	r3,r20,r17
10008bf8:	010003c4 	movi	r4,15
10008bfc:	1080004c 	andi	r2,r2,1
10008c00:	20c02336 	bltu	r4,r3,10008c90 <_realloc_r+0x1e4>
10008c04:	1504b03a 	or	r2,r2,r20
10008c08:	b0800115 	stw	r2,4(r22)
10008c0c:	b52d883a 	add	r22,r22,r20
10008c10:	b0800117 	ldw	r2,4(r22)
10008c14:	10800054 	ori	r2,r2,1
10008c18:	b0800115 	stw	r2,4(r22)
10008c1c:	a809883a 	mov	r4,r21
10008c20:	000bf040 	call	1000bf04 <__malloc_unlock>
10008c24:	8025883a 	mov	r18,r16
10008c28:	9005883a 	mov	r2,r18
10008c2c:	dfc00a17 	ldw	ra,40(sp)
10008c30:	df000917 	ldw	fp,36(sp)
10008c34:	ddc00817 	ldw	r23,32(sp)
10008c38:	dd800717 	ldw	r22,28(sp)
10008c3c:	dd400617 	ldw	r21,24(sp)
10008c40:	dd000517 	ldw	r20,20(sp)
10008c44:	dcc00417 	ldw	r19,16(sp)
10008c48:	dc800317 	ldw	r18,12(sp)
10008c4c:	dc400217 	ldw	r17,8(sp)
10008c50:	dc000117 	ldw	r16,4(sp)
10008c54:	dec00b04 	addi	sp,sp,44
10008c58:	f800283a 	ret
10008c5c:	01ffff04 	movi	r7,-4
10008c60:	31cc703a 	and	r6,r6,r7
10008c64:	34e9883a 	add	r20,r6,r19
10008c68:	a0ffbb16 	blt	r20,r3,10008b58 <__alt_data_end+0xf8008b58>
10008c6c:	20c00317 	ldw	r3,12(r4)
10008c70:	21000217 	ldw	r4,8(r4)
10008c74:	20c00315 	stw	r3,12(r4)
10008c78:	19000215 	stw	r4,8(r3)
10008c7c:	003fdd06 	br	10008bf4 <__alt_data_end+0xf8008bf4>
10008c80:	00800304 	movi	r2,12
10008c84:	a8800015 	stw	r2,0(r21)
10008c88:	0025883a 	mov	r18,zero
10008c8c:	003fe606 	br	10008c28 <__alt_data_end+0xf8008c28>
10008c90:	1444b03a 	or	r2,r2,r17
10008c94:	b0800115 	stw	r2,4(r22)
10008c98:	b44b883a 	add	r5,r22,r17
10008c9c:	18800054 	ori	r2,r3,1
10008ca0:	28800115 	stw	r2,4(r5)
10008ca4:	28c7883a 	add	r3,r5,r3
10008ca8:	18800117 	ldw	r2,4(r3)
10008cac:	a809883a 	mov	r4,r21
10008cb0:	29400204 	addi	r5,r5,8
10008cb4:	10800054 	ori	r2,r2,1
10008cb8:	18800115 	stw	r2,4(r3)
10008cbc:	00062a00 	call	100062a0 <_free_r>
10008cc0:	003fd606 	br	10008c1c <__alt_data_end+0xf8008c1c>
10008cc4:	38c0330e 	bge	r7,r3,10008d94 <_realloc_r+0x2e8>
10008cc8:	900b883a 	mov	r5,r18
10008ccc:	a809883a 	mov	r4,r21
10008cd0:	0006e380 	call	10006e38 <_malloc_r>
10008cd4:	1025883a 	mov	r18,r2
10008cd8:	10001626 	beq	r2,zero,10008d34 <_realloc_r+0x288>
10008cdc:	80bfff17 	ldw	r2,-4(r16)
10008ce0:	00ffff84 	movi	r3,-2
10008ce4:	913ffe04 	addi	r4,r18,-8
10008ce8:	10c6703a 	and	r3,r2,r3
10008cec:	b0c7883a 	add	r3,r22,r3
10008cf0:	20c09926 	beq	r4,r3,10008f58 <_realloc_r+0x4ac>
10008cf4:	99bfff04 	addi	r6,r19,-4
10008cf8:	00800904 	movi	r2,36
10008cfc:	11806436 	bltu	r2,r6,10008e90 <_realloc_r+0x3e4>
10008d00:	00c004c4 	movi	r3,19
10008d04:	19804036 	bltu	r3,r6,10008e08 <_realloc_r+0x35c>
10008d08:	9005883a 	mov	r2,r18
10008d0c:	8007883a 	mov	r3,r16
10008d10:	19000017 	ldw	r4,0(r3)
10008d14:	11000015 	stw	r4,0(r2)
10008d18:	19000117 	ldw	r4,4(r3)
10008d1c:	11000115 	stw	r4,4(r2)
10008d20:	18c00217 	ldw	r3,8(r3)
10008d24:	10c00215 	stw	r3,8(r2)
10008d28:	a809883a 	mov	r4,r21
10008d2c:	800b883a 	mov	r5,r16
10008d30:	00062a00 	call	100062a0 <_free_r>
10008d34:	a809883a 	mov	r4,r21
10008d38:	000bf040 	call	1000bf04 <__malloc_unlock>
10008d3c:	003fba06 	br	10008c28 <__alt_data_end+0xf8008c28>
10008d40:	300b883a 	mov	r5,r6
10008d44:	dfc00a17 	ldw	ra,40(sp)
10008d48:	df000917 	ldw	fp,36(sp)
10008d4c:	ddc00817 	ldw	r23,32(sp)
10008d50:	dd800717 	ldw	r22,28(sp)
10008d54:	dd400617 	ldw	r21,24(sp)
10008d58:	dd000517 	ldw	r20,20(sp)
10008d5c:	dcc00417 	ldw	r19,16(sp)
10008d60:	dc800317 	ldw	r18,12(sp)
10008d64:	dc400217 	ldw	r17,8(sp)
10008d68:	dc000117 	ldw	r16,4(sp)
10008d6c:	dec00b04 	addi	sp,sp,44
10008d70:	0006e381 	jmpi	10006e38 <_malloc_r>
10008d74:	29800117 	ldw	r6,4(r5)
10008d78:	013fff04 	movi	r4,-4
10008d7c:	89c00404 	addi	r7,r17,16
10008d80:	310c703a 	and	r6,r6,r4
10008d84:	34c9883a 	add	r4,r6,r19
10008d88:	21c0340e 	bge	r4,r7,10008e5c <_realloc_r+0x3b0>
10008d8c:	2809883a 	mov	r4,r5
10008d90:	003f7106 	br	10008b58 <__alt_data_end+0xf8008b58>
10008d94:	b8800317 	ldw	r2,12(r23)
10008d98:	b8c00217 	ldw	r3,8(r23)
10008d9c:	99bfff04 	addi	r6,r19,-4
10008da0:	01000904 	movi	r4,36
10008da4:	18800315 	stw	r2,12(r3)
10008da8:	10c00215 	stw	r3,8(r2)
10008dac:	bc800204 	addi	r18,r23,8
10008db0:	21807836 	bltu	r4,r6,10008f94 <_realloc_r+0x4e8>
10008db4:	008004c4 	movi	r2,19
10008db8:	1180732e 	bgeu	r2,r6,10008f88 <_realloc_r+0x4dc>
10008dbc:	80800017 	ldw	r2,0(r16)
10008dc0:	b8800215 	stw	r2,8(r23)
10008dc4:	80800117 	ldw	r2,4(r16)
10008dc8:	b8800315 	stw	r2,12(r23)
10008dcc:	008006c4 	movi	r2,27
10008dd0:	11808936 	bltu	r2,r6,10008ff8 <_realloc_r+0x54c>
10008dd4:	b8800404 	addi	r2,r23,16
10008dd8:	80c00204 	addi	r3,r16,8
10008ddc:	19000017 	ldw	r4,0(r3)
10008de0:	9021883a 	mov	r16,r18
10008de4:	3829883a 	mov	r20,r7
10008de8:	11000015 	stw	r4,0(r2)
10008dec:	19000117 	ldw	r4,4(r3)
10008df0:	b82d883a 	mov	r22,r23
10008df4:	11000115 	stw	r4,4(r2)
10008df8:	18c00217 	ldw	r3,8(r3)
10008dfc:	10c00215 	stw	r3,8(r2)
10008e00:	b8800117 	ldw	r2,4(r23)
10008e04:	003f7b06 	br	10008bf4 <__alt_data_end+0xf8008bf4>
10008e08:	80c00017 	ldw	r3,0(r16)
10008e0c:	90c00015 	stw	r3,0(r18)
10008e10:	80c00117 	ldw	r3,4(r16)
10008e14:	90c00115 	stw	r3,4(r18)
10008e18:	00c006c4 	movi	r3,27
10008e1c:	19804636 	bltu	r3,r6,10008f38 <_realloc_r+0x48c>
10008e20:	90800204 	addi	r2,r18,8
10008e24:	80c00204 	addi	r3,r16,8
10008e28:	003fb906 	br	10008d10 <__alt_data_end+0xf8008d10>
10008e2c:	9005883a 	mov	r2,r18
10008e30:	8007883a 	mov	r3,r16
10008e34:	19000017 	ldw	r4,0(r3)
10008e38:	9021883a 	mov	r16,r18
10008e3c:	b82d883a 	mov	r22,r23
10008e40:	11000015 	stw	r4,0(r2)
10008e44:	19000117 	ldw	r4,4(r3)
10008e48:	11000115 	stw	r4,4(r2)
10008e4c:	18c00217 	ldw	r3,8(r3)
10008e50:	10c00215 	stw	r3,8(r2)
10008e54:	b8800117 	ldw	r2,4(r23)
10008e58:	003f6606 	br	10008bf4 <__alt_data_end+0xf8008bf4>
10008e5c:	2445c83a 	sub	r2,r4,r17
10008e60:	b46d883a 	add	r22,r22,r17
10008e64:	10800054 	ori	r2,r2,1
10008e68:	b0800115 	stw	r2,4(r22)
10008e6c:	80bfff17 	ldw	r2,-4(r16)
10008e70:	a809883a 	mov	r4,r21
10008e74:	e5800215 	stw	r22,8(fp)
10008e78:	1080004c 	andi	r2,r2,1
10008e7c:	88a2b03a 	or	r17,r17,r2
10008e80:	847fff15 	stw	r17,-4(r16)
10008e84:	000bf040 	call	1000bf04 <__malloc_unlock>
10008e88:	8025883a 	mov	r18,r16
10008e8c:	003f6606 	br	10008c28 <__alt_data_end+0xf8008c28>
10008e90:	9009883a 	mov	r4,r18
10008e94:	800b883a 	mov	r5,r16
10008e98:	00077f40 	call	100077f4 <memmove>
10008e9c:	003fa206 	br	10008d28 <__alt_data_end+0xf8008d28>
10008ea0:	88800404 	addi	r2,r17,16
10008ea4:	a0bf8716 	blt	r20,r2,10008cc4 <__alt_data_end+0xf8008cc4>
10008ea8:	b8800317 	ldw	r2,12(r23)
10008eac:	b8c00217 	ldw	r3,8(r23)
10008eb0:	99bfff04 	addi	r6,r19,-4
10008eb4:	01000904 	movi	r4,36
10008eb8:	18800315 	stw	r2,12(r3)
10008ebc:	10c00215 	stw	r3,8(r2)
10008ec0:	bc800204 	addi	r18,r23,8
10008ec4:	21806536 	bltu	r4,r6,1000905c <_realloc_r+0x5b0>
10008ec8:	008004c4 	movi	r2,19
10008ecc:	1180592e 	bgeu	r2,r6,10009034 <_realloc_r+0x588>
10008ed0:	80800017 	ldw	r2,0(r16)
10008ed4:	b8800215 	stw	r2,8(r23)
10008ed8:	80800117 	ldw	r2,4(r16)
10008edc:	b8800315 	stw	r2,12(r23)
10008ee0:	008006c4 	movi	r2,27
10008ee4:	11806136 	bltu	r2,r6,1000906c <_realloc_r+0x5c0>
10008ee8:	b8800404 	addi	r2,r23,16
10008eec:	80c00204 	addi	r3,r16,8
10008ef0:	19000017 	ldw	r4,0(r3)
10008ef4:	11000015 	stw	r4,0(r2)
10008ef8:	19000117 	ldw	r4,4(r3)
10008efc:	11000115 	stw	r4,4(r2)
10008f00:	18c00217 	ldw	r3,8(r3)
10008f04:	10c00215 	stw	r3,8(r2)
10008f08:	a447c83a 	sub	r3,r20,r17
10008f0c:	bc45883a 	add	r2,r23,r17
10008f10:	18c00054 	ori	r3,r3,1
10008f14:	10c00115 	stw	r3,4(r2)
10008f18:	b8c00117 	ldw	r3,4(r23)
10008f1c:	e0800215 	stw	r2,8(fp)
10008f20:	a809883a 	mov	r4,r21
10008f24:	1880004c 	andi	r2,r3,1
10008f28:	88a2b03a 	or	r17,r17,r2
10008f2c:	bc400115 	stw	r17,4(r23)
10008f30:	000bf040 	call	1000bf04 <__malloc_unlock>
10008f34:	003f3c06 	br	10008c28 <__alt_data_end+0xf8008c28>
10008f38:	80c00217 	ldw	r3,8(r16)
10008f3c:	90c00215 	stw	r3,8(r18)
10008f40:	80c00317 	ldw	r3,12(r16)
10008f44:	90c00315 	stw	r3,12(r18)
10008f48:	30802426 	beq	r6,r2,10008fdc <_realloc_r+0x530>
10008f4c:	90800404 	addi	r2,r18,16
10008f50:	80c00404 	addi	r3,r16,16
10008f54:	003f6e06 	br	10008d10 <__alt_data_end+0xf8008d10>
10008f58:	953fff17 	ldw	r20,-4(r18)
10008f5c:	00ffff04 	movi	r3,-4
10008f60:	a0e8703a 	and	r20,r20,r3
10008f64:	a4e9883a 	add	r20,r20,r19
10008f68:	003f2206 	br	10008bf4 <__alt_data_end+0xf8008bf4>
10008f6c:	800b883a 	mov	r5,r16
10008f70:	9009883a 	mov	r4,r18
10008f74:	00077f40 	call	100077f4 <memmove>
10008f78:	9021883a 	mov	r16,r18
10008f7c:	b8800117 	ldw	r2,4(r23)
10008f80:	b82d883a 	mov	r22,r23
10008f84:	003f1b06 	br	10008bf4 <__alt_data_end+0xf8008bf4>
10008f88:	9005883a 	mov	r2,r18
10008f8c:	8007883a 	mov	r3,r16
10008f90:	003f9206 	br	10008ddc <__alt_data_end+0xf8008ddc>
10008f94:	800b883a 	mov	r5,r16
10008f98:	9009883a 	mov	r4,r18
10008f9c:	d9c00015 	stw	r7,0(sp)
10008fa0:	00077f40 	call	100077f4 <memmove>
10008fa4:	d9c00017 	ldw	r7,0(sp)
10008fa8:	9021883a 	mov	r16,r18
10008fac:	b8800117 	ldw	r2,4(r23)
10008fb0:	3829883a 	mov	r20,r7
10008fb4:	b82d883a 	mov	r22,r23
10008fb8:	003f0e06 	br	10008bf4 <__alt_data_end+0xf8008bf4>
10008fbc:	80800217 	ldw	r2,8(r16)
10008fc0:	b8800415 	stw	r2,16(r23)
10008fc4:	80800317 	ldw	r2,12(r16)
10008fc8:	b8800515 	stw	r2,20(r23)
10008fcc:	31001226 	beq	r6,r4,10009018 <_realloc_r+0x56c>
10008fd0:	b8800604 	addi	r2,r23,24
10008fd4:	80c00404 	addi	r3,r16,16
10008fd8:	003f9606 	br	10008e34 <__alt_data_end+0xf8008e34>
10008fdc:	81000417 	ldw	r4,16(r16)
10008fe0:	90800604 	addi	r2,r18,24
10008fe4:	80c00604 	addi	r3,r16,24
10008fe8:	91000415 	stw	r4,16(r18)
10008fec:	81000517 	ldw	r4,20(r16)
10008ff0:	91000515 	stw	r4,20(r18)
10008ff4:	003f4606 	br	10008d10 <__alt_data_end+0xf8008d10>
10008ff8:	80800217 	ldw	r2,8(r16)
10008ffc:	b8800415 	stw	r2,16(r23)
10009000:	80800317 	ldw	r2,12(r16)
10009004:	b8800515 	stw	r2,20(r23)
10009008:	31000d26 	beq	r6,r4,10009040 <_realloc_r+0x594>
1000900c:	b8800604 	addi	r2,r23,24
10009010:	80c00404 	addi	r3,r16,16
10009014:	003f7106 	br	10008ddc <__alt_data_end+0xf8008ddc>
10009018:	81000417 	ldw	r4,16(r16)
1000901c:	b8800804 	addi	r2,r23,32
10009020:	80c00604 	addi	r3,r16,24
10009024:	b9000615 	stw	r4,24(r23)
10009028:	81000517 	ldw	r4,20(r16)
1000902c:	b9000715 	stw	r4,28(r23)
10009030:	003f8006 	br	10008e34 <__alt_data_end+0xf8008e34>
10009034:	9005883a 	mov	r2,r18
10009038:	8007883a 	mov	r3,r16
1000903c:	003fac06 	br	10008ef0 <__alt_data_end+0xf8008ef0>
10009040:	81000417 	ldw	r4,16(r16)
10009044:	b8800804 	addi	r2,r23,32
10009048:	80c00604 	addi	r3,r16,24
1000904c:	b9000615 	stw	r4,24(r23)
10009050:	81000517 	ldw	r4,20(r16)
10009054:	b9000715 	stw	r4,28(r23)
10009058:	003f6006 	br	10008ddc <__alt_data_end+0xf8008ddc>
1000905c:	9009883a 	mov	r4,r18
10009060:	800b883a 	mov	r5,r16
10009064:	00077f40 	call	100077f4 <memmove>
10009068:	003fa706 	br	10008f08 <__alt_data_end+0xf8008f08>
1000906c:	80800217 	ldw	r2,8(r16)
10009070:	b8800415 	stw	r2,16(r23)
10009074:	80800317 	ldw	r2,12(r16)
10009078:	b8800515 	stw	r2,20(r23)
1000907c:	31000326 	beq	r6,r4,1000908c <_realloc_r+0x5e0>
10009080:	b8800604 	addi	r2,r23,24
10009084:	80c00404 	addi	r3,r16,16
10009088:	003f9906 	br	10008ef0 <__alt_data_end+0xf8008ef0>
1000908c:	81000417 	ldw	r4,16(r16)
10009090:	b8800804 	addi	r2,r23,32
10009094:	80c00604 	addi	r3,r16,24
10009098:	b9000615 	stw	r4,24(r23)
1000909c:	81000517 	ldw	r4,20(r16)
100090a0:	b9000715 	stw	r4,28(r23)
100090a4:	003f9206 	br	10008ef0 <__alt_data_end+0xf8008ef0>

100090a8 <__isinfd>:
100090a8:	0105c83a 	sub	r2,zero,r4
100090ac:	1108b03a 	or	r4,r2,r4
100090b0:	2004d7fa 	srli	r2,r4,31
100090b4:	00e00034 	movhi	r3,32768
100090b8:	18ffffc4 	addi	r3,r3,-1
100090bc:	28ca703a 	and	r5,r5,r3
100090c0:	1144b03a 	or	r2,r2,r5
100090c4:	00dffc34 	movhi	r3,32752
100090c8:	1885c83a 	sub	r2,r3,r2
100090cc:	0087c83a 	sub	r3,zero,r2
100090d0:	1884b03a 	or	r2,r3,r2
100090d4:	1005d7fa 	srai	r2,r2,31
100090d8:	10800044 	addi	r2,r2,1
100090dc:	f800283a 	ret

100090e0 <__isnand>:
100090e0:	0105c83a 	sub	r2,zero,r4
100090e4:	1108b03a 	or	r4,r2,r4
100090e8:	2004d7fa 	srli	r2,r4,31
100090ec:	00e00034 	movhi	r3,32768
100090f0:	18ffffc4 	addi	r3,r3,-1
100090f4:	28ca703a 	and	r5,r5,r3
100090f8:	1144b03a 	or	r2,r2,r5
100090fc:	00dffc34 	movhi	r3,32752
10009100:	1885c83a 	sub	r2,r3,r2
10009104:	1004d7fa 	srli	r2,r2,31
10009108:	f800283a 	ret

1000910c <_sbrk_r>:
1000910c:	defffd04 	addi	sp,sp,-12
10009110:	dc400115 	stw	r17,4(sp)
10009114:	dc000015 	stw	r16,0(sp)
10009118:	2023883a 	mov	r17,r4
1000911c:	04040074 	movhi	r16,4097
10009120:	84083004 	addi	r16,r16,8384
10009124:	2809883a 	mov	r4,r5
10009128:	dfc00215 	stw	ra,8(sp)
1000912c:	80000015 	stw	zero,0(r16)
10009130:	000c0e80 	call	1000c0e8 <sbrk>
10009134:	00ffffc4 	movi	r3,-1
10009138:	10c00526 	beq	r2,r3,10009150 <_sbrk_r+0x44>
1000913c:	dfc00217 	ldw	ra,8(sp)
10009140:	dc400117 	ldw	r17,4(sp)
10009144:	dc000017 	ldw	r16,0(sp)
10009148:	dec00304 	addi	sp,sp,12
1000914c:	f800283a 	ret
10009150:	80c00017 	ldw	r3,0(r16)
10009154:	183ff926 	beq	r3,zero,1000913c <__alt_data_end+0xf800913c>
10009158:	88c00015 	stw	r3,0(r17)
1000915c:	dfc00217 	ldw	ra,8(sp)
10009160:	dc400117 	ldw	r17,4(sp)
10009164:	dc000017 	ldw	r16,0(sp)
10009168:	dec00304 	addi	sp,sp,12
1000916c:	f800283a 	ret

10009170 <__sread>:
10009170:	defffe04 	addi	sp,sp,-8
10009174:	dc000015 	stw	r16,0(sp)
10009178:	2821883a 	mov	r16,r5
1000917c:	2940038f 	ldh	r5,14(r5)
10009180:	dfc00115 	stw	ra,4(sp)
10009184:	00097780 	call	10009778 <_read_r>
10009188:	10000716 	blt	r2,zero,100091a8 <__sread+0x38>
1000918c:	80c01417 	ldw	r3,80(r16)
10009190:	1887883a 	add	r3,r3,r2
10009194:	80c01415 	stw	r3,80(r16)
10009198:	dfc00117 	ldw	ra,4(sp)
1000919c:	dc000017 	ldw	r16,0(sp)
100091a0:	dec00204 	addi	sp,sp,8
100091a4:	f800283a 	ret
100091a8:	80c0030b 	ldhu	r3,12(r16)
100091ac:	18fbffcc 	andi	r3,r3,61439
100091b0:	80c0030d 	sth	r3,12(r16)
100091b4:	dfc00117 	ldw	ra,4(sp)
100091b8:	dc000017 	ldw	r16,0(sp)
100091bc:	dec00204 	addi	sp,sp,8
100091c0:	f800283a 	ret

100091c4 <__swrite>:
100091c4:	2880030b 	ldhu	r2,12(r5)
100091c8:	defffb04 	addi	sp,sp,-20
100091cc:	dcc00315 	stw	r19,12(sp)
100091d0:	10c0400c 	andi	r3,r2,256
100091d4:	18ffffcc 	andi	r3,r3,65535
100091d8:	18e0001c 	xori	r3,r3,32768
100091dc:	dc800215 	stw	r18,8(sp)
100091e0:	dc400115 	stw	r17,4(sp)
100091e4:	dc000015 	stw	r16,0(sp)
100091e8:	dfc00415 	stw	ra,16(sp)
100091ec:	18e00004 	addi	r3,r3,-32768
100091f0:	2821883a 	mov	r16,r5
100091f4:	2027883a 	mov	r19,r4
100091f8:	3025883a 	mov	r18,r6
100091fc:	3823883a 	mov	r17,r7
10009200:	18000526 	beq	r3,zero,10009218 <__swrite+0x54>
10009204:	2940038f 	ldh	r5,14(r5)
10009208:	000d883a 	mov	r6,zero
1000920c:	01c00084 	movi	r7,2
10009210:	000970c0 	call	1000970c <_lseek_r>
10009214:	8080030b 	ldhu	r2,12(r16)
10009218:	8140038f 	ldh	r5,14(r16)
1000921c:	10bbffcc 	andi	r2,r2,61439
10009220:	9809883a 	mov	r4,r19
10009224:	900d883a 	mov	r6,r18
10009228:	880f883a 	mov	r7,r17
1000922c:	8080030d 	sth	r2,12(r16)
10009230:	dfc00417 	ldw	ra,16(sp)
10009234:	dcc00317 	ldw	r19,12(sp)
10009238:	dc800217 	ldw	r18,8(sp)
1000923c:	dc400117 	ldw	r17,4(sp)
10009240:	dc000017 	ldw	r16,0(sp)
10009244:	dec00504 	addi	sp,sp,20
10009248:	00093541 	jmpi	10009354 <_write_r>

1000924c <__sseek>:
1000924c:	defffe04 	addi	sp,sp,-8
10009250:	dc000015 	stw	r16,0(sp)
10009254:	2821883a 	mov	r16,r5
10009258:	2940038f 	ldh	r5,14(r5)
1000925c:	dfc00115 	stw	ra,4(sp)
10009260:	000970c0 	call	1000970c <_lseek_r>
10009264:	00ffffc4 	movi	r3,-1
10009268:	10c00826 	beq	r2,r3,1000928c <__sseek+0x40>
1000926c:	80c0030b 	ldhu	r3,12(r16)
10009270:	80801415 	stw	r2,80(r16)
10009274:	18c40014 	ori	r3,r3,4096
10009278:	80c0030d 	sth	r3,12(r16)
1000927c:	dfc00117 	ldw	ra,4(sp)
10009280:	dc000017 	ldw	r16,0(sp)
10009284:	dec00204 	addi	sp,sp,8
10009288:	f800283a 	ret
1000928c:	80c0030b 	ldhu	r3,12(r16)
10009290:	18fbffcc 	andi	r3,r3,61439
10009294:	80c0030d 	sth	r3,12(r16)
10009298:	dfc00117 	ldw	ra,4(sp)
1000929c:	dc000017 	ldw	r16,0(sp)
100092a0:	dec00204 	addi	sp,sp,8
100092a4:	f800283a 	ret

100092a8 <__sclose>:
100092a8:	2940038f 	ldh	r5,14(r5)
100092ac:	000948c1 	jmpi	1000948c <_close_r>

100092b0 <strcmp>:
100092b0:	2904b03a 	or	r2,r5,r4
100092b4:	108000cc 	andi	r2,r2,3
100092b8:	1000171e 	bne	r2,zero,10009318 <strcmp+0x68>
100092bc:	20800017 	ldw	r2,0(r4)
100092c0:	28c00017 	ldw	r3,0(r5)
100092c4:	10c0141e 	bne	r2,r3,10009318 <strcmp+0x68>
100092c8:	027fbff4 	movhi	r9,65279
100092cc:	4a7fbfc4 	addi	r9,r9,-257
100092d0:	1247883a 	add	r3,r2,r9
100092d4:	0084303a 	nor	r2,zero,r2
100092d8:	1884703a 	and	r2,r3,r2
100092dc:	02202074 	movhi	r8,32897
100092e0:	42202004 	addi	r8,r8,-32640
100092e4:	1204703a 	and	r2,r2,r8
100092e8:	10000226 	beq	r2,zero,100092f4 <strcmp+0x44>
100092ec:	00001706 	br	1000934c <strcmp+0x9c>
100092f0:	3000161e 	bne	r6,zero,1000934c <strcmp+0x9c>
100092f4:	21000104 	addi	r4,r4,4
100092f8:	20800017 	ldw	r2,0(r4)
100092fc:	29400104 	addi	r5,r5,4
10009300:	28c00017 	ldw	r3,0(r5)
10009304:	124f883a 	add	r7,r2,r9
10009308:	008c303a 	nor	r6,zero,r2
1000930c:	398c703a 	and	r6,r7,r6
10009310:	320c703a 	and	r6,r6,r8
10009314:	10fff626 	beq	r2,r3,100092f0 <__alt_data_end+0xf80092f0>
10009318:	20800007 	ldb	r2,0(r4)
1000931c:	1000051e 	bne	r2,zero,10009334 <strcmp+0x84>
10009320:	00000606 	br	1000933c <strcmp+0x8c>
10009324:	21000044 	addi	r4,r4,1
10009328:	20800007 	ldb	r2,0(r4)
1000932c:	29400044 	addi	r5,r5,1
10009330:	10000226 	beq	r2,zero,1000933c <strcmp+0x8c>
10009334:	28c00007 	ldb	r3,0(r5)
10009338:	10fffa26 	beq	r2,r3,10009324 <__alt_data_end+0xf8009324>
1000933c:	20c00003 	ldbu	r3,0(r4)
10009340:	28800003 	ldbu	r2,0(r5)
10009344:	1885c83a 	sub	r2,r3,r2
10009348:	f800283a 	ret
1000934c:	0005883a 	mov	r2,zero
10009350:	f800283a 	ret

10009354 <_write_r>:
10009354:	defffd04 	addi	sp,sp,-12
10009358:	dc400115 	stw	r17,4(sp)
1000935c:	dc000015 	stw	r16,0(sp)
10009360:	2023883a 	mov	r17,r4
10009364:	04040074 	movhi	r16,4097
10009368:	84083004 	addi	r16,r16,8384
1000936c:	2809883a 	mov	r4,r5
10009370:	300b883a 	mov	r5,r6
10009374:	380d883a 	mov	r6,r7
10009378:	dfc00215 	stw	ra,8(sp)
1000937c:	80000015 	stw	zero,0(r16)
10009380:	000c2180 	call	1000c218 <write>
10009384:	00ffffc4 	movi	r3,-1
10009388:	10c00526 	beq	r2,r3,100093a0 <_write_r+0x4c>
1000938c:	dfc00217 	ldw	ra,8(sp)
10009390:	dc400117 	ldw	r17,4(sp)
10009394:	dc000017 	ldw	r16,0(sp)
10009398:	dec00304 	addi	sp,sp,12
1000939c:	f800283a 	ret
100093a0:	80c00017 	ldw	r3,0(r16)
100093a4:	183ff926 	beq	r3,zero,1000938c <__alt_data_end+0xf800938c>
100093a8:	88c00015 	stw	r3,0(r17)
100093ac:	dfc00217 	ldw	ra,8(sp)
100093b0:	dc400117 	ldw	r17,4(sp)
100093b4:	dc000017 	ldw	r16,0(sp)
100093b8:	dec00304 	addi	sp,sp,12
100093bc:	f800283a 	ret

100093c0 <_calloc_r>:
100093c0:	defffe04 	addi	sp,sp,-8
100093c4:	dc000015 	stw	r16,0(sp)
100093c8:	2021883a 	mov	r16,r4
100093cc:	3009883a 	mov	r4,r6
100093d0:	dfc00115 	stw	ra,4(sp)
100093d4:	000b2bc0 	call	1000b2bc <__mulsi3>
100093d8:	8009883a 	mov	r4,r16
100093dc:	100b883a 	mov	r5,r2
100093e0:	0006e380 	call	10006e38 <_malloc_r>
100093e4:	1021883a 	mov	r16,r2
100093e8:	10000c26 	beq	r2,zero,1000941c <_calloc_r+0x5c>
100093ec:	11bfff17 	ldw	r6,-4(r2)
100093f0:	00ffff04 	movi	r3,-4
100093f4:	00800904 	movi	r2,36
100093f8:	30cc703a 	and	r6,r6,r3
100093fc:	30cd883a 	add	r6,r6,r3
10009400:	11801436 	bltu	r2,r6,10009454 <_calloc_r+0x94>
10009404:	00c004c4 	movi	r3,19
10009408:	19800936 	bltu	r3,r6,10009430 <_calloc_r+0x70>
1000940c:	8005883a 	mov	r2,r16
10009410:	10000015 	stw	zero,0(r2)
10009414:	10000115 	stw	zero,4(r2)
10009418:	10000215 	stw	zero,8(r2)
1000941c:	8005883a 	mov	r2,r16
10009420:	dfc00117 	ldw	ra,4(sp)
10009424:	dc000017 	ldw	r16,0(sp)
10009428:	dec00204 	addi	sp,sp,8
1000942c:	f800283a 	ret
10009430:	80000015 	stw	zero,0(r16)
10009434:	80000115 	stw	zero,4(r16)
10009438:	00c006c4 	movi	r3,27
1000943c:	19800d2e 	bgeu	r3,r6,10009474 <_calloc_r+0xb4>
10009440:	80000215 	stw	zero,8(r16)
10009444:	80000315 	stw	zero,12(r16)
10009448:	30800c26 	beq	r6,r2,1000947c <_calloc_r+0xbc>
1000944c:	80800404 	addi	r2,r16,16
10009450:	003fef06 	br	10009410 <__alt_data_end+0xf8009410>
10009454:	8009883a 	mov	r4,r16
10009458:	000b883a 	mov	r5,zero
1000945c:	00079800 	call	10007980 <memset>
10009460:	8005883a 	mov	r2,r16
10009464:	dfc00117 	ldw	ra,4(sp)
10009468:	dc000017 	ldw	r16,0(sp)
1000946c:	dec00204 	addi	sp,sp,8
10009470:	f800283a 	ret
10009474:	80800204 	addi	r2,r16,8
10009478:	003fe506 	br	10009410 <__alt_data_end+0xf8009410>
1000947c:	80000415 	stw	zero,16(r16)
10009480:	80000515 	stw	zero,20(r16)
10009484:	80800604 	addi	r2,r16,24
10009488:	003fe106 	br	10009410 <__alt_data_end+0xf8009410>

1000948c <_close_r>:
1000948c:	defffd04 	addi	sp,sp,-12
10009490:	dc400115 	stw	r17,4(sp)
10009494:	dc000015 	stw	r16,0(sp)
10009498:	2023883a 	mov	r17,r4
1000949c:	04040074 	movhi	r16,4097
100094a0:	84083004 	addi	r16,r16,8384
100094a4:	2809883a 	mov	r4,r5
100094a8:	dfc00215 	stw	ra,8(sp)
100094ac:	80000015 	stw	zero,0(r16)
100094b0:	000b9700 	call	1000b970 <close>
100094b4:	00ffffc4 	movi	r3,-1
100094b8:	10c00526 	beq	r2,r3,100094d0 <_close_r+0x44>
100094bc:	dfc00217 	ldw	ra,8(sp)
100094c0:	dc400117 	ldw	r17,4(sp)
100094c4:	dc000017 	ldw	r16,0(sp)
100094c8:	dec00304 	addi	sp,sp,12
100094cc:	f800283a 	ret
100094d0:	80c00017 	ldw	r3,0(r16)
100094d4:	183ff926 	beq	r3,zero,100094bc <__alt_data_end+0xf80094bc>
100094d8:	88c00015 	stw	r3,0(r17)
100094dc:	dfc00217 	ldw	ra,8(sp)
100094e0:	dc400117 	ldw	r17,4(sp)
100094e4:	dc000017 	ldw	r16,0(sp)
100094e8:	dec00304 	addi	sp,sp,12
100094ec:	f800283a 	ret

100094f0 <_fclose_r>:
100094f0:	defffc04 	addi	sp,sp,-16
100094f4:	dc400115 	stw	r17,4(sp)
100094f8:	dc000015 	stw	r16,0(sp)
100094fc:	dfc00315 	stw	ra,12(sp)
10009500:	dc800215 	stw	r18,8(sp)
10009504:	2821883a 	mov	r16,r5
10009508:	2023883a 	mov	r17,r4
1000950c:	28003426 	beq	r5,zero,100095e0 <_fclose_r+0xf0>
10009510:	00061240 	call	10006124 <__sfp_lock_acquire>
10009514:	88000226 	beq	r17,zero,10009520 <_fclose_r+0x30>
10009518:	88800e17 	ldw	r2,56(r17)
1000951c:	10003826 	beq	r2,zero,10009600 <_fclose_r+0x110>
10009520:	8080030f 	ldh	r2,12(r16)
10009524:	10002526 	beq	r2,zero,100095bc <_fclose_r+0xcc>
10009528:	8809883a 	mov	r4,r17
1000952c:	800b883a 	mov	r5,r16
10009530:	0005c600 	call	10005c60 <_fflush_r>
10009534:	1025883a 	mov	r18,r2
10009538:	80800b17 	ldw	r2,44(r16)
1000953c:	10000426 	beq	r2,zero,10009550 <_fclose_r+0x60>
10009540:	81400717 	ldw	r5,28(r16)
10009544:	8809883a 	mov	r4,r17
10009548:	103ee83a 	callr	r2
1000954c:	10003516 	blt	r2,zero,10009624 <_fclose_r+0x134>
10009550:	8080030b 	ldhu	r2,12(r16)
10009554:	1080200c 	andi	r2,r2,128
10009558:	10bfffcc 	andi	r2,r2,65535
1000955c:	10a0001c 	xori	r2,r2,32768
10009560:	10a00004 	addi	r2,r2,-32768
10009564:	10002b1e 	bne	r2,zero,10009614 <_fclose_r+0x124>
10009568:	81400c17 	ldw	r5,48(r16)
1000956c:	28000526 	beq	r5,zero,10009584 <_fclose_r+0x94>
10009570:	80801004 	addi	r2,r16,64
10009574:	28800226 	beq	r5,r2,10009580 <_fclose_r+0x90>
10009578:	8809883a 	mov	r4,r17
1000957c:	00062a00 	call	100062a0 <_free_r>
10009580:	80000c15 	stw	zero,48(r16)
10009584:	81401117 	ldw	r5,68(r16)
10009588:	28000326 	beq	r5,zero,10009598 <_fclose_r+0xa8>
1000958c:	8809883a 	mov	r4,r17
10009590:	00062a00 	call	100062a0 <_free_r>
10009594:	80001115 	stw	zero,68(r16)
10009598:	8000030d 	sth	zero,12(r16)
1000959c:	00061280 	call	10006128 <__sfp_lock_release>
100095a0:	9005883a 	mov	r2,r18
100095a4:	dfc00317 	ldw	ra,12(sp)
100095a8:	dc800217 	ldw	r18,8(sp)
100095ac:	dc400117 	ldw	r17,4(sp)
100095b0:	dc000017 	ldw	r16,0(sp)
100095b4:	dec00404 	addi	sp,sp,16
100095b8:	f800283a 	ret
100095bc:	00061280 	call	10006128 <__sfp_lock_release>
100095c0:	0025883a 	mov	r18,zero
100095c4:	9005883a 	mov	r2,r18
100095c8:	dfc00317 	ldw	ra,12(sp)
100095cc:	dc800217 	ldw	r18,8(sp)
100095d0:	dc400117 	ldw	r17,4(sp)
100095d4:	dc000017 	ldw	r16,0(sp)
100095d8:	dec00404 	addi	sp,sp,16
100095dc:	f800283a 	ret
100095e0:	0025883a 	mov	r18,zero
100095e4:	9005883a 	mov	r2,r18
100095e8:	dfc00317 	ldw	ra,12(sp)
100095ec:	dc800217 	ldw	r18,8(sp)
100095f0:	dc400117 	ldw	r17,4(sp)
100095f4:	dc000017 	ldw	r16,0(sp)
100095f8:	dec00404 	addi	sp,sp,16
100095fc:	f800283a 	ret
10009600:	8809883a 	mov	r4,r17
10009604:	0005f1c0 	call	10005f1c <__sinit>
10009608:	8080030f 	ldh	r2,12(r16)
1000960c:	103fc61e 	bne	r2,zero,10009528 <__alt_data_end+0xf8009528>
10009610:	003fea06 	br	100095bc <__alt_data_end+0xf80095bc>
10009614:	81400417 	ldw	r5,16(r16)
10009618:	8809883a 	mov	r4,r17
1000961c:	00062a00 	call	100062a0 <_free_r>
10009620:	003fd106 	br	10009568 <__alt_data_end+0xf8009568>
10009624:	04bfffc4 	movi	r18,-1
10009628:	003fc906 	br	10009550 <__alt_data_end+0xf8009550>

1000962c <fclose>:
1000962c:	00840074 	movhi	r2,4097
10009630:	10818404 	addi	r2,r2,1552
10009634:	200b883a 	mov	r5,r4
10009638:	11000017 	ldw	r4,0(r2)
1000963c:	00094f01 	jmpi	100094f0 <_fclose_r>

10009640 <_fstat_r>:
10009640:	defffd04 	addi	sp,sp,-12
10009644:	dc400115 	stw	r17,4(sp)
10009648:	dc000015 	stw	r16,0(sp)
1000964c:	2023883a 	mov	r17,r4
10009650:	04040074 	movhi	r16,4097
10009654:	84083004 	addi	r16,r16,8384
10009658:	2809883a 	mov	r4,r5
1000965c:	300b883a 	mov	r5,r6
10009660:	dfc00215 	stw	ra,8(sp)
10009664:	80000015 	stw	zero,0(r16)
10009668:	000bab80 	call	1000bab8 <fstat>
1000966c:	00ffffc4 	movi	r3,-1
10009670:	10c00526 	beq	r2,r3,10009688 <_fstat_r+0x48>
10009674:	dfc00217 	ldw	ra,8(sp)
10009678:	dc400117 	ldw	r17,4(sp)
1000967c:	dc000017 	ldw	r16,0(sp)
10009680:	dec00304 	addi	sp,sp,12
10009684:	f800283a 	ret
10009688:	80c00017 	ldw	r3,0(r16)
1000968c:	183ff926 	beq	r3,zero,10009674 <__alt_data_end+0xf8009674>
10009690:	88c00015 	stw	r3,0(r17)
10009694:	dfc00217 	ldw	ra,8(sp)
10009698:	dc400117 	ldw	r17,4(sp)
1000969c:	dc000017 	ldw	r16,0(sp)
100096a0:	dec00304 	addi	sp,sp,12
100096a4:	f800283a 	ret

100096a8 <_isatty_r>:
100096a8:	defffd04 	addi	sp,sp,-12
100096ac:	dc400115 	stw	r17,4(sp)
100096b0:	dc000015 	stw	r16,0(sp)
100096b4:	2023883a 	mov	r17,r4
100096b8:	04040074 	movhi	r16,4097
100096bc:	84083004 	addi	r16,r16,8384
100096c0:	2809883a 	mov	r4,r5
100096c4:	dfc00215 	stw	ra,8(sp)
100096c8:	80000015 	stw	zero,0(r16)
100096cc:	000bbb80 	call	1000bbb8 <isatty>
100096d0:	00ffffc4 	movi	r3,-1
100096d4:	10c00526 	beq	r2,r3,100096ec <_isatty_r+0x44>
100096d8:	dfc00217 	ldw	ra,8(sp)
100096dc:	dc400117 	ldw	r17,4(sp)
100096e0:	dc000017 	ldw	r16,0(sp)
100096e4:	dec00304 	addi	sp,sp,12
100096e8:	f800283a 	ret
100096ec:	80c00017 	ldw	r3,0(r16)
100096f0:	183ff926 	beq	r3,zero,100096d8 <__alt_data_end+0xf80096d8>
100096f4:	88c00015 	stw	r3,0(r17)
100096f8:	dfc00217 	ldw	ra,8(sp)
100096fc:	dc400117 	ldw	r17,4(sp)
10009700:	dc000017 	ldw	r16,0(sp)
10009704:	dec00304 	addi	sp,sp,12
10009708:	f800283a 	ret

1000970c <_lseek_r>:
1000970c:	defffd04 	addi	sp,sp,-12
10009710:	dc400115 	stw	r17,4(sp)
10009714:	dc000015 	stw	r16,0(sp)
10009718:	2023883a 	mov	r17,r4
1000971c:	04040074 	movhi	r16,4097
10009720:	84083004 	addi	r16,r16,8384
10009724:	2809883a 	mov	r4,r5
10009728:	300b883a 	mov	r5,r6
1000972c:	380d883a 	mov	r6,r7
10009730:	dfc00215 	stw	ra,8(sp)
10009734:	80000015 	stw	zero,0(r16)
10009738:	000bd980 	call	1000bd98 <lseek>
1000973c:	00ffffc4 	movi	r3,-1
10009740:	10c00526 	beq	r2,r3,10009758 <_lseek_r+0x4c>
10009744:	dfc00217 	ldw	ra,8(sp)
10009748:	dc400117 	ldw	r17,4(sp)
1000974c:	dc000017 	ldw	r16,0(sp)
10009750:	dec00304 	addi	sp,sp,12
10009754:	f800283a 	ret
10009758:	80c00017 	ldw	r3,0(r16)
1000975c:	183ff926 	beq	r3,zero,10009744 <__alt_data_end+0xf8009744>
10009760:	88c00015 	stw	r3,0(r17)
10009764:	dfc00217 	ldw	ra,8(sp)
10009768:	dc400117 	ldw	r17,4(sp)
1000976c:	dc000017 	ldw	r16,0(sp)
10009770:	dec00304 	addi	sp,sp,12
10009774:	f800283a 	ret

10009778 <_read_r>:
10009778:	defffd04 	addi	sp,sp,-12
1000977c:	dc400115 	stw	r17,4(sp)
10009780:	dc000015 	stw	r16,0(sp)
10009784:	2023883a 	mov	r17,r4
10009788:	04040074 	movhi	r16,4097
1000978c:	84083004 	addi	r16,r16,8384
10009790:	2809883a 	mov	r4,r5
10009794:	300b883a 	mov	r5,r6
10009798:	380d883a 	mov	r6,r7
1000979c:	dfc00215 	stw	ra,8(sp)
100097a0:	80000015 	stw	zero,0(r16)
100097a4:	000bf740 	call	1000bf74 <read>
100097a8:	00ffffc4 	movi	r3,-1
100097ac:	10c00526 	beq	r2,r3,100097c4 <_read_r+0x4c>
100097b0:	dfc00217 	ldw	ra,8(sp)
100097b4:	dc400117 	ldw	r17,4(sp)
100097b8:	dc000017 	ldw	r16,0(sp)
100097bc:	dec00304 	addi	sp,sp,12
100097c0:	f800283a 	ret
100097c4:	80c00017 	ldw	r3,0(r16)
100097c8:	183ff926 	beq	r3,zero,100097b0 <__alt_data_end+0xf80097b0>
100097cc:	88c00015 	stw	r3,0(r17)
100097d0:	dfc00217 	ldw	ra,8(sp)
100097d4:	dc400117 	ldw	r17,4(sp)
100097d8:	dc000017 	ldw	r16,0(sp)
100097dc:	dec00304 	addi	sp,sp,12
100097e0:	f800283a 	ret

100097e4 <__udivdi3>:
100097e4:	defff504 	addi	sp,sp,-44
100097e8:	dd000515 	stw	r20,20(sp)
100097ec:	dcc00415 	stw	r19,16(sp)
100097f0:	dc800315 	stw	r18,12(sp)
100097f4:	dc400215 	stw	r17,8(sp)
100097f8:	dc000115 	stw	r16,4(sp)
100097fc:	dfc00a15 	stw	ra,40(sp)
10009800:	df000915 	stw	fp,36(sp)
10009804:	ddc00815 	stw	r23,32(sp)
10009808:	dd800715 	stw	r22,28(sp)
1000980c:	dd400615 	stw	r21,24(sp)
10009810:	2025883a 	mov	r18,r4
10009814:	2823883a 	mov	r17,r5
10009818:	3021883a 	mov	r16,r6
1000981c:	2027883a 	mov	r19,r4
10009820:	2829883a 	mov	r20,r5
10009824:	3800451e 	bne	r7,zero,1000993c <__udivdi3+0x158>
10009828:	2980652e 	bgeu	r5,r6,100099c0 <__udivdi3+0x1dc>
1000982c:	00bfffd4 	movui	r2,65535
10009830:	1180b436 	bltu	r2,r6,10009b04 <__udivdi3+0x320>
10009834:	00803fc4 	movi	r2,255
10009838:	11816636 	bltu	r2,r6,10009dd4 <__udivdi3+0x5f0>
1000983c:	0005883a 	mov	r2,zero
10009840:	0007883a 	mov	r3,zero
10009844:	3084d83a 	srl	r2,r6,r2
10009848:	01040074 	movhi	r4,4097
1000984c:	213aaf04 	addi	r4,r4,-5444
10009850:	2085883a 	add	r2,r4,r2
10009854:	10800003 	ldbu	r2,0(r2)
10009858:	10c7883a 	add	r3,r2,r3
1000985c:	00800804 	movi	r2,32
10009860:	10c5c83a 	sub	r2,r2,r3
10009864:	10000526 	beq	r2,zero,1000987c <__udivdi3+0x98>
10009868:	88a2983a 	sll	r17,r17,r2
1000986c:	90c6d83a 	srl	r3,r18,r3
10009870:	30a0983a 	sll	r16,r6,r2
10009874:	90a6983a 	sll	r19,r18,r2
10009878:	88e8b03a 	or	r20,r17,r3
1000987c:	8022d43a 	srli	r17,r16,16
10009880:	a009883a 	mov	r4,r20
10009884:	857fffcc 	andi	r21,r16,65535
10009888:	880b883a 	mov	r5,r17
1000988c:	000b2b40 	call	1000b2b4 <__umodsi3>
10009890:	a009883a 	mov	r4,r20
10009894:	880b883a 	mov	r5,r17
10009898:	102d883a 	mov	r22,r2
1000989c:	000b2ac0 	call	1000b2ac <__udivsi3>
100098a0:	1009883a 	mov	r4,r2
100098a4:	a80b883a 	mov	r5,r21
100098a8:	1025883a 	mov	r18,r2
100098ac:	000b2bc0 	call	1000b2bc <__mulsi3>
100098b0:	1009883a 	mov	r4,r2
100098b4:	b006943a 	slli	r3,r22,16
100098b8:	9804d43a 	srli	r2,r19,16
100098bc:	1886b03a 	or	r3,r3,r2
100098c0:	1900052e 	bgeu	r3,r4,100098d8 <__udivdi3+0xf4>
100098c4:	1c07883a 	add	r3,r3,r16
100098c8:	90bfffc4 	addi	r2,r18,-1
100098cc:	1c000136 	bltu	r3,r16,100098d4 <__udivdi3+0xf0>
100098d0:	19015536 	bltu	r3,r4,10009e28 <__udivdi3+0x644>
100098d4:	1025883a 	mov	r18,r2
100098d8:	1929c83a 	sub	r20,r3,r4
100098dc:	880b883a 	mov	r5,r17
100098e0:	a009883a 	mov	r4,r20
100098e4:	000b2b40 	call	1000b2b4 <__umodsi3>
100098e8:	102d883a 	mov	r22,r2
100098ec:	880b883a 	mov	r5,r17
100098f0:	a009883a 	mov	r4,r20
100098f4:	b02c943a 	slli	r22,r22,16
100098f8:	000b2ac0 	call	1000b2ac <__udivsi3>
100098fc:	1009883a 	mov	r4,r2
10009900:	a80b883a 	mov	r5,r21
10009904:	9cffffcc 	andi	r19,r19,65535
10009908:	1023883a 	mov	r17,r2
1000990c:	b4e6b03a 	or	r19,r22,r19
10009910:	000b2bc0 	call	1000b2bc <__mulsi3>
10009914:	9880052e 	bgeu	r19,r2,1000992c <__udivdi3+0x148>
10009918:	9c27883a 	add	r19,r19,r16
1000991c:	88ffffc4 	addi	r3,r17,-1
10009920:	9c011436 	bltu	r19,r16,10009d74 <__udivdi3+0x590>
10009924:	9881132e 	bgeu	r19,r2,10009d74 <__udivdi3+0x590>
10009928:	8c7fff84 	addi	r17,r17,-2
1000992c:	9004943a 	slli	r2,r18,16
10009930:	0007883a 	mov	r3,zero
10009934:	8884b03a 	or	r2,r17,r2
10009938:	00001506 	br	10009990 <__udivdi3+0x1ac>
1000993c:	29c06a36 	bltu	r5,r7,10009ae8 <__udivdi3+0x304>
10009940:	00bfffd4 	movui	r2,65535
10009944:	11c06a2e 	bgeu	r2,r7,10009af0 <__udivdi3+0x30c>
10009948:	00804034 	movhi	r2,256
1000994c:	10bfffc4 	addi	r2,r2,-1
10009950:	11c11436 	bltu	r2,r7,10009da4 <__udivdi3+0x5c0>
10009954:	00c00404 	movi	r3,16
10009958:	180b883a 	mov	r5,r3
1000995c:	38c6d83a 	srl	r3,r7,r3
10009960:	01040074 	movhi	r4,4097
10009964:	213aaf04 	addi	r4,r4,-5444
10009968:	04000804 	movi	r16,32
1000996c:	20c7883a 	add	r3,r4,r3
10009970:	18800003 	ldbu	r2,0(r3)
10009974:	1145883a 	add	r2,r2,r5
10009978:	80a1c83a 	sub	r16,r16,r2
1000997c:	80006e1e 	bne	r16,zero,10009b38 <__udivdi3+0x354>
10009980:	0007883a 	mov	r3,zero
10009984:	3c406a36 	bltu	r7,r17,10009b30 <__udivdi3+0x34c>
10009988:	9180692e 	bgeu	r18,r6,10009b30 <__udivdi3+0x34c>
1000998c:	0005883a 	mov	r2,zero
10009990:	dfc00a17 	ldw	ra,40(sp)
10009994:	df000917 	ldw	fp,36(sp)
10009998:	ddc00817 	ldw	r23,32(sp)
1000999c:	dd800717 	ldw	r22,28(sp)
100099a0:	dd400617 	ldw	r21,24(sp)
100099a4:	dd000517 	ldw	r20,20(sp)
100099a8:	dcc00417 	ldw	r19,16(sp)
100099ac:	dc800317 	ldw	r18,12(sp)
100099b0:	dc400217 	ldw	r17,8(sp)
100099b4:	dc000117 	ldw	r16,4(sp)
100099b8:	dec00b04 	addi	sp,sp,44
100099bc:	f800283a 	ret
100099c0:	3000041e 	bne	r6,zero,100099d4 <__udivdi3+0x1f0>
100099c4:	01000044 	movi	r4,1
100099c8:	000b883a 	mov	r5,zero
100099cc:	000b2ac0 	call	1000b2ac <__udivsi3>
100099d0:	1021883a 	mov	r16,r2
100099d4:	00bfffd4 	movui	r2,65535
100099d8:	1400502e 	bgeu	r2,r16,10009b1c <__udivdi3+0x338>
100099dc:	00804034 	movhi	r2,256
100099e0:	10bfffc4 	addi	r2,r2,-1
100099e4:	1400f536 	bltu	r2,r16,10009dbc <__udivdi3+0x5d8>
100099e8:	00800404 	movi	r2,16
100099ec:	1007883a 	mov	r3,r2
100099f0:	8084d83a 	srl	r2,r16,r2
100099f4:	01040074 	movhi	r4,4097
100099f8:	213aaf04 	addi	r4,r4,-5444
100099fc:	2085883a 	add	r2,r4,r2
10009a00:	10800003 	ldbu	r2,0(r2)
10009a04:	10c7883a 	add	r3,r2,r3
10009a08:	00800804 	movi	r2,32
10009a0c:	10c5c83a 	sub	r2,r2,r3
10009a10:	1000a01e 	bne	r2,zero,10009c94 <__udivdi3+0x4b0>
10009a14:	8028d43a 	srli	r20,r16,16
10009a18:	8c23c83a 	sub	r17,r17,r16
10009a1c:	857fffcc 	andi	r21,r16,65535
10009a20:	00c00044 	movi	r3,1
10009a24:	8809883a 	mov	r4,r17
10009a28:	a00b883a 	mov	r5,r20
10009a2c:	d8c00015 	stw	r3,0(sp)
10009a30:	000b2b40 	call	1000b2b4 <__umodsi3>
10009a34:	8809883a 	mov	r4,r17
10009a38:	a00b883a 	mov	r5,r20
10009a3c:	102d883a 	mov	r22,r2
10009a40:	000b2ac0 	call	1000b2ac <__udivsi3>
10009a44:	1009883a 	mov	r4,r2
10009a48:	a80b883a 	mov	r5,r21
10009a4c:	1025883a 	mov	r18,r2
10009a50:	000b2bc0 	call	1000b2bc <__mulsi3>
10009a54:	1009883a 	mov	r4,r2
10009a58:	b00c943a 	slli	r6,r22,16
10009a5c:	9804d43a 	srli	r2,r19,16
10009a60:	d8c00017 	ldw	r3,0(sp)
10009a64:	308cb03a 	or	r6,r6,r2
10009a68:	3100052e 	bgeu	r6,r4,10009a80 <__udivdi3+0x29c>
10009a6c:	340d883a 	add	r6,r6,r16
10009a70:	90bfffc4 	addi	r2,r18,-1
10009a74:	34000136 	bltu	r6,r16,10009a7c <__udivdi3+0x298>
10009a78:	3100e836 	bltu	r6,r4,10009e1c <__udivdi3+0x638>
10009a7c:	1025883a 	mov	r18,r2
10009a80:	3123c83a 	sub	r17,r6,r4
10009a84:	8809883a 	mov	r4,r17
10009a88:	a00b883a 	mov	r5,r20
10009a8c:	d8c00015 	stw	r3,0(sp)
10009a90:	000b2b40 	call	1000b2b4 <__umodsi3>
10009a94:	102d883a 	mov	r22,r2
10009a98:	8809883a 	mov	r4,r17
10009a9c:	a00b883a 	mov	r5,r20
10009aa0:	b02c943a 	slli	r22,r22,16
10009aa4:	000b2ac0 	call	1000b2ac <__udivsi3>
10009aa8:	1009883a 	mov	r4,r2
10009aac:	a80b883a 	mov	r5,r21
10009ab0:	9cffffcc 	andi	r19,r19,65535
10009ab4:	1023883a 	mov	r17,r2
10009ab8:	b4e6b03a 	or	r19,r22,r19
10009abc:	000b2bc0 	call	1000b2bc <__mulsi3>
10009ac0:	d8c00017 	ldw	r3,0(sp)
10009ac4:	9880052e 	bgeu	r19,r2,10009adc <__udivdi3+0x2f8>
10009ac8:	9c27883a 	add	r19,r19,r16
10009acc:	893fffc4 	addi	r4,r17,-1
10009ad0:	9c00aa36 	bltu	r19,r16,10009d7c <__udivdi3+0x598>
10009ad4:	9880a92e 	bgeu	r19,r2,10009d7c <__udivdi3+0x598>
10009ad8:	8c7fff84 	addi	r17,r17,-2
10009adc:	9004943a 	slli	r2,r18,16
10009ae0:	8884b03a 	or	r2,r17,r2
10009ae4:	003faa06 	br	10009990 <__alt_data_end+0xf8009990>
10009ae8:	0007883a 	mov	r3,zero
10009aec:	003fa706 	br	1000998c <__alt_data_end+0xf800998c>
10009af0:	00803fc4 	movi	r2,255
10009af4:	11c0ae36 	bltu	r2,r7,10009db0 <__udivdi3+0x5cc>
10009af8:	0007883a 	mov	r3,zero
10009afc:	000b883a 	mov	r5,zero
10009b00:	003f9606 	br	1000995c <__alt_data_end+0xf800995c>
10009b04:	00804034 	movhi	r2,256
10009b08:	10bfffc4 	addi	r2,r2,-1
10009b0c:	1180ae36 	bltu	r2,r6,10009dc8 <__udivdi3+0x5e4>
10009b10:	00800404 	movi	r2,16
10009b14:	1007883a 	mov	r3,r2
10009b18:	003f4a06 	br	10009844 <__alt_data_end+0xf8009844>
10009b1c:	00803fc4 	movi	r2,255
10009b20:	1400af36 	bltu	r2,r16,10009de0 <__udivdi3+0x5fc>
10009b24:	0005883a 	mov	r2,zero
10009b28:	0007883a 	mov	r3,zero
10009b2c:	003fb006 	br	100099f0 <__alt_data_end+0xf80099f0>
10009b30:	00800044 	movi	r2,1
10009b34:	003f9606 	br	10009990 <__alt_data_end+0xf8009990>
10009b38:	3c0e983a 	sll	r7,r7,r16
10009b3c:	3086d83a 	srl	r3,r6,r2
10009b40:	88aed83a 	srl	r23,r17,r2
10009b44:	9084d83a 	srl	r2,r18,r2
10009b48:	38e6b03a 	or	r19,r7,r3
10009b4c:	9828d43a 	srli	r20,r19,16
10009b50:	8c22983a 	sll	r17,r17,r16
10009b54:	b809883a 	mov	r4,r23
10009b58:	a00b883a 	mov	r5,r20
10009b5c:	342a983a 	sll	r21,r6,r16
10009b60:	88a2b03a 	or	r17,r17,r2
10009b64:	000b2b40 	call	1000b2b4 <__umodsi3>
10009b68:	b809883a 	mov	r4,r23
10009b6c:	a00b883a 	mov	r5,r20
10009b70:	1039883a 	mov	fp,r2
10009b74:	9dbfffcc 	andi	r22,r19,65535
10009b78:	000b2ac0 	call	1000b2ac <__udivsi3>
10009b7c:	1009883a 	mov	r4,r2
10009b80:	b00b883a 	mov	r5,r22
10009b84:	102f883a 	mov	r23,r2
10009b88:	000b2bc0 	call	1000b2bc <__mulsi3>
10009b8c:	1009883a 	mov	r4,r2
10009b90:	e00e943a 	slli	r7,fp,16
10009b94:	8804d43a 	srli	r2,r17,16
10009b98:	388eb03a 	or	r7,r7,r2
10009b9c:	3900042e 	bgeu	r7,r4,10009bb0 <__udivdi3+0x3cc>
10009ba0:	3ccf883a 	add	r7,r7,r19
10009ba4:	b8bfffc4 	addi	r2,r23,-1
10009ba8:	3cc0942e 	bgeu	r7,r19,10009dfc <__udivdi3+0x618>
10009bac:	102f883a 	mov	r23,r2
10009bb0:	3939c83a 	sub	fp,r7,r4
10009bb4:	a00b883a 	mov	r5,r20
10009bb8:	e009883a 	mov	r4,fp
10009bbc:	000b2b40 	call	1000b2b4 <__umodsi3>
10009bc0:	a00b883a 	mov	r5,r20
10009bc4:	e009883a 	mov	r4,fp
10009bc8:	d8800015 	stw	r2,0(sp)
10009bcc:	000b2ac0 	call	1000b2ac <__udivsi3>
10009bd0:	1009883a 	mov	r4,r2
10009bd4:	b00b883a 	mov	r5,r22
10009bd8:	1029883a 	mov	r20,r2
10009bdc:	000b2bc0 	call	1000b2bc <__mulsi3>
10009be0:	d8c00017 	ldw	r3,0(sp)
10009be4:	8c7fffcc 	andi	r17,r17,65535
10009be8:	1806943a 	slli	r3,r3,16
10009bec:	1c46b03a 	or	r3,r3,r17
10009bf0:	1880042e 	bgeu	r3,r2,10009c04 <__udivdi3+0x420>
10009bf4:	1cc7883a 	add	r3,r3,r19
10009bf8:	a13fffc4 	addi	r4,r20,-1
10009bfc:	1cc07b2e 	bgeu	r3,r19,10009dec <__udivdi3+0x608>
10009c00:	2029883a 	mov	r20,r4
10009c04:	b82e943a 	slli	r23,r23,16
10009c08:	a822d43a 	srli	r17,r21,16
10009c0c:	ad7fffcc 	andi	r21,r21,65535
10009c10:	a5e8b03a 	or	r20,r20,r23
10009c14:	a5bfffcc 	andi	r22,r20,65535
10009c18:	b009883a 	mov	r4,r22
10009c1c:	a80b883a 	mov	r5,r21
10009c20:	18afc83a 	sub	r23,r3,r2
10009c24:	a026d43a 	srli	r19,r20,16
10009c28:	000b2bc0 	call	1000b2bc <__mulsi3>
10009c2c:	b009883a 	mov	r4,r22
10009c30:	880b883a 	mov	r5,r17
10009c34:	1039883a 	mov	fp,r2
10009c38:	000b2bc0 	call	1000b2bc <__mulsi3>
10009c3c:	a80b883a 	mov	r5,r21
10009c40:	9809883a 	mov	r4,r19
10009c44:	102d883a 	mov	r22,r2
10009c48:	000b2bc0 	call	1000b2bc <__mulsi3>
10009c4c:	9809883a 	mov	r4,r19
10009c50:	880b883a 	mov	r5,r17
10009c54:	102b883a 	mov	r21,r2
10009c58:	000b2bc0 	call	1000b2bc <__mulsi3>
10009c5c:	100b883a 	mov	r5,r2
10009c60:	e004d43a 	srli	r2,fp,16
10009c64:	ad89883a 	add	r4,r21,r22
10009c68:	2089883a 	add	r4,r4,r2
10009c6c:	2540022e 	bgeu	r4,r21,10009c78 <__udivdi3+0x494>
10009c70:	00800074 	movhi	r2,1
10009c74:	288b883a 	add	r5,r5,r2
10009c78:	2004d43a 	srli	r2,r4,16
10009c7c:	288b883a 	add	r5,r5,r2
10009c80:	b9404536 	bltu	r23,r5,10009d98 <__udivdi3+0x5b4>
10009c84:	b9403f26 	beq	r23,r5,10009d84 <__udivdi3+0x5a0>
10009c88:	a005883a 	mov	r2,r20
10009c8c:	0007883a 	mov	r3,zero
10009c90:	003f3f06 	br	10009990 <__alt_data_end+0xf8009990>
10009c94:	80a0983a 	sll	r16,r16,r2
10009c98:	88eed83a 	srl	r23,r17,r3
10009c9c:	90c6d83a 	srl	r3,r18,r3
10009ca0:	8028d43a 	srli	r20,r16,16
10009ca4:	88a2983a 	sll	r17,r17,r2
10009ca8:	b809883a 	mov	r4,r23
10009cac:	a00b883a 	mov	r5,r20
10009cb0:	88ecb03a 	or	r22,r17,r3
10009cb4:	90a6983a 	sll	r19,r18,r2
10009cb8:	000b2b40 	call	1000b2b4 <__umodsi3>
10009cbc:	b809883a 	mov	r4,r23
10009cc0:	a00b883a 	mov	r5,r20
10009cc4:	1023883a 	mov	r17,r2
10009cc8:	857fffcc 	andi	r21,r16,65535
10009ccc:	000b2ac0 	call	1000b2ac <__udivsi3>
10009cd0:	1009883a 	mov	r4,r2
10009cd4:	a80b883a 	mov	r5,r21
10009cd8:	102f883a 	mov	r23,r2
10009cdc:	000b2bc0 	call	1000b2bc <__mulsi3>
10009ce0:	1009883a 	mov	r4,r2
10009ce4:	880a943a 	slli	r5,r17,16
10009ce8:	b004d43a 	srli	r2,r22,16
10009cec:	288ab03a 	or	r5,r5,r2
10009cf0:	2900062e 	bgeu	r5,r4,10009d0c <__udivdi3+0x528>
10009cf4:	2c0b883a 	add	r5,r5,r16
10009cf8:	b8bfffc4 	addi	r2,r23,-1
10009cfc:	2c004536 	bltu	r5,r16,10009e14 <__udivdi3+0x630>
10009d00:	2900442e 	bgeu	r5,r4,10009e14 <__udivdi3+0x630>
10009d04:	bdffff84 	addi	r23,r23,-2
10009d08:	2c0b883a 	add	r5,r5,r16
10009d0c:	2925c83a 	sub	r18,r5,r4
10009d10:	9009883a 	mov	r4,r18
10009d14:	a00b883a 	mov	r5,r20
10009d18:	000b2b40 	call	1000b2b4 <__umodsi3>
10009d1c:	1023883a 	mov	r17,r2
10009d20:	9009883a 	mov	r4,r18
10009d24:	a00b883a 	mov	r5,r20
10009d28:	8822943a 	slli	r17,r17,16
10009d2c:	000b2ac0 	call	1000b2ac <__udivsi3>
10009d30:	1009883a 	mov	r4,r2
10009d34:	a80b883a 	mov	r5,r21
10009d38:	b5bfffcc 	andi	r22,r22,65535
10009d3c:	1025883a 	mov	r18,r2
10009d40:	8da2b03a 	or	r17,r17,r22
10009d44:	000b2bc0 	call	1000b2bc <__mulsi3>
10009d48:	8880062e 	bgeu	r17,r2,10009d64 <__udivdi3+0x580>
10009d4c:	8c23883a 	add	r17,r17,r16
10009d50:	90ffffc4 	addi	r3,r18,-1
10009d54:	8c002d36 	bltu	r17,r16,10009e0c <__udivdi3+0x628>
10009d58:	88802c2e 	bgeu	r17,r2,10009e0c <__udivdi3+0x628>
10009d5c:	94bfff84 	addi	r18,r18,-2
10009d60:	8c23883a 	add	r17,r17,r16
10009d64:	b806943a 	slli	r3,r23,16
10009d68:	88a3c83a 	sub	r17,r17,r2
10009d6c:	90c6b03a 	or	r3,r18,r3
10009d70:	003f2c06 	br	10009a24 <__alt_data_end+0xf8009a24>
10009d74:	1823883a 	mov	r17,r3
10009d78:	003eec06 	br	1000992c <__alt_data_end+0xf800992c>
10009d7c:	2023883a 	mov	r17,r4
10009d80:	003f5606 	br	10009adc <__alt_data_end+0xf8009adc>
10009d84:	2008943a 	slli	r4,r4,16
10009d88:	9420983a 	sll	r16,r18,r16
10009d8c:	e73fffcc 	andi	fp,fp,65535
10009d90:	2709883a 	add	r4,r4,fp
10009d94:	813fbc2e 	bgeu	r16,r4,10009c88 <__alt_data_end+0xf8009c88>
10009d98:	a0bfffc4 	addi	r2,r20,-1
10009d9c:	0007883a 	mov	r3,zero
10009da0:	003efb06 	br	10009990 <__alt_data_end+0xf8009990>
10009da4:	00c00604 	movi	r3,24
10009da8:	180b883a 	mov	r5,r3
10009dac:	003eeb06 	br	1000995c <__alt_data_end+0xf800995c>
10009db0:	00c00204 	movi	r3,8
10009db4:	180b883a 	mov	r5,r3
10009db8:	003ee806 	br	1000995c <__alt_data_end+0xf800995c>
10009dbc:	00800604 	movi	r2,24
10009dc0:	1007883a 	mov	r3,r2
10009dc4:	003f0a06 	br	100099f0 <__alt_data_end+0xf80099f0>
10009dc8:	00800604 	movi	r2,24
10009dcc:	1007883a 	mov	r3,r2
10009dd0:	003e9c06 	br	10009844 <__alt_data_end+0xf8009844>
10009dd4:	00800204 	movi	r2,8
10009dd8:	1007883a 	mov	r3,r2
10009ddc:	003e9906 	br	10009844 <__alt_data_end+0xf8009844>
10009de0:	00800204 	movi	r2,8
10009de4:	1007883a 	mov	r3,r2
10009de8:	003f0106 	br	100099f0 <__alt_data_end+0xf80099f0>
10009dec:	18bf842e 	bgeu	r3,r2,10009c00 <__alt_data_end+0xf8009c00>
10009df0:	a53fff84 	addi	r20,r20,-2
10009df4:	1cc7883a 	add	r3,r3,r19
10009df8:	003f8206 	br	10009c04 <__alt_data_end+0xf8009c04>
10009dfc:	393f6b2e 	bgeu	r7,r4,10009bac <__alt_data_end+0xf8009bac>
10009e00:	bdffff84 	addi	r23,r23,-2
10009e04:	3ccf883a 	add	r7,r7,r19
10009e08:	003f6906 	br	10009bb0 <__alt_data_end+0xf8009bb0>
10009e0c:	1825883a 	mov	r18,r3
10009e10:	003fd406 	br	10009d64 <__alt_data_end+0xf8009d64>
10009e14:	102f883a 	mov	r23,r2
10009e18:	003fbc06 	br	10009d0c <__alt_data_end+0xf8009d0c>
10009e1c:	94bfff84 	addi	r18,r18,-2
10009e20:	340d883a 	add	r6,r6,r16
10009e24:	003f1606 	br	10009a80 <__alt_data_end+0xf8009a80>
10009e28:	94bfff84 	addi	r18,r18,-2
10009e2c:	1c07883a 	add	r3,r3,r16
10009e30:	003ea906 	br	100098d8 <__alt_data_end+0xf80098d8>

10009e34 <__umoddi3>:
10009e34:	defff304 	addi	sp,sp,-52
10009e38:	dd000715 	stw	r20,28(sp)
10009e3c:	dcc00615 	stw	r19,24(sp)
10009e40:	dc800515 	stw	r18,20(sp)
10009e44:	dc400415 	stw	r17,16(sp)
10009e48:	dc000315 	stw	r16,12(sp)
10009e4c:	dfc00c15 	stw	ra,48(sp)
10009e50:	df000b15 	stw	fp,44(sp)
10009e54:	ddc00a15 	stw	r23,40(sp)
10009e58:	dd800915 	stw	r22,36(sp)
10009e5c:	dd400815 	stw	r21,32(sp)
10009e60:	2025883a 	mov	r18,r4
10009e64:	2823883a 	mov	r17,r5
10009e68:	3021883a 	mov	r16,r6
10009e6c:	2027883a 	mov	r19,r4
10009e70:	2829883a 	mov	r20,r5
10009e74:	38003a1e 	bne	r7,zero,10009f60 <__umoddi3+0x12c>
10009e78:	2980522e 	bgeu	r5,r6,10009fc4 <__umoddi3+0x190>
10009e7c:	00bfffd4 	movui	r2,65535
10009e80:	1180a436 	bltu	r2,r6,1000a114 <__umoddi3+0x2e0>
10009e84:	00803fc4 	movi	r2,255
10009e88:	11816036 	bltu	r2,r6,1000a40c <__umoddi3+0x5d8>
10009e8c:	0005883a 	mov	r2,zero
10009e90:	0009883a 	mov	r4,zero
10009e94:	3084d83a 	srl	r2,r6,r2
10009e98:	00c40074 	movhi	r3,4097
10009e9c:	18faaf04 	addi	r3,r3,-5444
10009ea0:	05400804 	movi	r21,32
10009ea4:	1885883a 	add	r2,r3,r2
10009ea8:	10800003 	ldbu	r2,0(r2)
10009eac:	1109883a 	add	r4,r2,r4
10009eb0:	a92bc83a 	sub	r21,r21,r4
10009eb4:	a8010e26 	beq	r21,zero,1000a2f0 <__umoddi3+0x4bc>
10009eb8:	8d62983a 	sll	r17,r17,r21
10009ebc:	9108d83a 	srl	r4,r18,r4
10009ec0:	3560983a 	sll	r16,r6,r21
10009ec4:	9566983a 	sll	r19,r18,r21
10009ec8:	8928b03a 	or	r20,r17,r4
10009ecc:	8022d43a 	srli	r17,r16,16
10009ed0:	a009883a 	mov	r4,r20
10009ed4:	84bfffcc 	andi	r18,r16,65535
10009ed8:	880b883a 	mov	r5,r17
10009edc:	000b2b40 	call	1000b2b4 <__umodsi3>
10009ee0:	a009883a 	mov	r4,r20
10009ee4:	880b883a 	mov	r5,r17
10009ee8:	102d883a 	mov	r22,r2
10009eec:	000b2ac0 	call	1000b2ac <__udivsi3>
10009ef0:	1009883a 	mov	r4,r2
10009ef4:	900b883a 	mov	r5,r18
10009ef8:	000b2bc0 	call	1000b2bc <__mulsi3>
10009efc:	1009883a 	mov	r4,r2
10009f00:	b006943a 	slli	r3,r22,16
10009f04:	9804d43a 	srli	r2,r19,16
10009f08:	1886b03a 	or	r3,r3,r2
10009f0c:	1900042e 	bgeu	r3,r4,10009f20 <__umoddi3+0xec>
10009f10:	1c07883a 	add	r3,r3,r16
10009f14:	1c000236 	bltu	r3,r16,10009f20 <__umoddi3+0xec>
10009f18:	1900012e 	bgeu	r3,r4,10009f20 <__umoddi3+0xec>
10009f1c:	1c07883a 	add	r3,r3,r16
10009f20:	1929c83a 	sub	r20,r3,r4
10009f24:	a009883a 	mov	r4,r20
10009f28:	880b883a 	mov	r5,r17
10009f2c:	000b2b40 	call	1000b2b4 <__umodsi3>
10009f30:	102d883a 	mov	r22,r2
10009f34:	a009883a 	mov	r4,r20
10009f38:	880b883a 	mov	r5,r17
10009f3c:	b02c943a 	slli	r22,r22,16
10009f40:	000b2ac0 	call	1000b2ac <__udivsi3>
10009f44:	1009883a 	mov	r4,r2
10009f48:	900b883a 	mov	r5,r18
10009f4c:	9cffffcc 	andi	r19,r19,65535
10009f50:	000b2bc0 	call	1000b2bc <__mulsi3>
10009f54:	b4e6b03a 	or	r19,r22,r19
10009f58:	9880572e 	bgeu	r19,r2,1000a0b8 <__umoddi3+0x284>
10009f5c:	00005206 	br	1000a0a8 <__umoddi3+0x274>
10009f60:	29c05936 	bltu	r5,r7,1000a0c8 <__umoddi3+0x294>
10009f64:	00bfffd4 	movui	r2,65535
10009f68:	11c0652e 	bgeu	r2,r7,1000a100 <__umoddi3+0x2cc>
10009f6c:	00804034 	movhi	r2,256
10009f70:	10bfffc4 	addi	r2,r2,-1
10009f74:	11c11936 	bltu	r2,r7,1000a3dc <__umoddi3+0x5a8>
10009f78:	00c00404 	movi	r3,16
10009f7c:	1827883a 	mov	r19,r3
10009f80:	38c6d83a 	srl	r3,r7,r3
10009f84:	01040074 	movhi	r4,4097
10009f88:	213aaf04 	addi	r4,r4,-5444
10009f8c:	04000804 	movi	r16,32
10009f90:	20c7883a 	add	r3,r4,r3
10009f94:	18800003 	ldbu	r2,0(r3)
10009f98:	14e7883a 	add	r19,r2,r19
10009f9c:	84e1c83a 	sub	r16,r16,r19
10009fa0:	8000671e 	bne	r16,zero,1000a140 <__umoddi3+0x30c>
10009fa4:	3c400136 	bltu	r7,r17,10009fac <__umoddi3+0x178>
10009fa8:	91812536 	bltu	r18,r6,1000a440 <__umoddi3+0x60c>
10009fac:	9185c83a 	sub	r2,r18,r6
10009fb0:	89e3c83a 	sub	r17,r17,r7
10009fb4:	90a5803a 	cmpltu	r18,r18,r2
10009fb8:	8ca9c83a 	sub	r20,r17,r18
10009fbc:	a007883a 	mov	r3,r20
10009fc0:	00004306 	br	1000a0d0 <__umoddi3+0x29c>
10009fc4:	3000041e 	bne	r6,zero,10009fd8 <__umoddi3+0x1a4>
10009fc8:	01000044 	movi	r4,1
10009fcc:	000b883a 	mov	r5,zero
10009fd0:	000b2ac0 	call	1000b2ac <__udivsi3>
10009fd4:	1021883a 	mov	r16,r2
10009fd8:	00bfffd4 	movui	r2,65535
10009fdc:	1400532e 	bgeu	r2,r16,1000a12c <__umoddi3+0x2f8>
10009fe0:	00804034 	movhi	r2,256
10009fe4:	10bfffc4 	addi	r2,r2,-1
10009fe8:	14010536 	bltu	r2,r16,1000a400 <__umoddi3+0x5cc>
10009fec:	00800404 	movi	r2,16
10009ff0:	1007883a 	mov	r3,r2
10009ff4:	8084d83a 	srl	r2,r16,r2
10009ff8:	01040074 	movhi	r4,4097
10009ffc:	213aaf04 	addi	r4,r4,-5444
1000a000:	05400804 	movi	r21,32
1000a004:	2085883a 	add	r2,r4,r2
1000a008:	10800003 	ldbu	r2,0(r2)
1000a00c:	10c7883a 	add	r3,r2,r3
1000a010:	a8ebc83a 	sub	r21,r21,r3
1000a014:	a800b81e 	bne	r21,zero,1000a2f8 <__umoddi3+0x4c4>
1000a018:	8028d43a 	srli	r20,r16,16
1000a01c:	8c23c83a 	sub	r17,r17,r16
1000a020:	85bfffcc 	andi	r22,r16,65535
1000a024:	8809883a 	mov	r4,r17
1000a028:	a00b883a 	mov	r5,r20
1000a02c:	000b2b40 	call	1000b2b4 <__umodsi3>
1000a030:	8809883a 	mov	r4,r17
1000a034:	a00b883a 	mov	r5,r20
1000a038:	1025883a 	mov	r18,r2
1000a03c:	000b2ac0 	call	1000b2ac <__udivsi3>
1000a040:	1009883a 	mov	r4,r2
1000a044:	b00b883a 	mov	r5,r22
1000a048:	000b2bc0 	call	1000b2bc <__mulsi3>
1000a04c:	1009883a 	mov	r4,r2
1000a050:	9006943a 	slli	r3,r18,16
1000a054:	9804d43a 	srli	r2,r19,16
1000a058:	1886b03a 	or	r3,r3,r2
1000a05c:	1900032e 	bgeu	r3,r4,1000a06c <__umoddi3+0x238>
1000a060:	1c07883a 	add	r3,r3,r16
1000a064:	1c000136 	bltu	r3,r16,1000a06c <__umoddi3+0x238>
1000a068:	1900f336 	bltu	r3,r4,1000a438 <__umoddi3+0x604>
1000a06c:	1923c83a 	sub	r17,r3,r4
1000a070:	8809883a 	mov	r4,r17
1000a074:	a00b883a 	mov	r5,r20
1000a078:	000b2b40 	call	1000b2b4 <__umodsi3>
1000a07c:	102f883a 	mov	r23,r2
1000a080:	8809883a 	mov	r4,r17
1000a084:	a00b883a 	mov	r5,r20
1000a088:	b82e943a 	slli	r23,r23,16
1000a08c:	000b2ac0 	call	1000b2ac <__udivsi3>
1000a090:	1009883a 	mov	r4,r2
1000a094:	b00b883a 	mov	r5,r22
1000a098:	9cffffcc 	andi	r19,r19,65535
1000a09c:	000b2bc0 	call	1000b2bc <__mulsi3>
1000a0a0:	bce6b03a 	or	r19,r23,r19
1000a0a4:	9880042e 	bgeu	r19,r2,1000a0b8 <__umoddi3+0x284>
1000a0a8:	9c27883a 	add	r19,r19,r16
1000a0ac:	9c000236 	bltu	r19,r16,1000a0b8 <__umoddi3+0x284>
1000a0b0:	9880012e 	bgeu	r19,r2,1000a0b8 <__umoddi3+0x284>
1000a0b4:	9c27883a 	add	r19,r19,r16
1000a0b8:	9885c83a 	sub	r2,r19,r2
1000a0bc:	1544d83a 	srl	r2,r2,r21
1000a0c0:	0007883a 	mov	r3,zero
1000a0c4:	00000206 	br	1000a0d0 <__umoddi3+0x29c>
1000a0c8:	2005883a 	mov	r2,r4
1000a0cc:	2807883a 	mov	r3,r5
1000a0d0:	dfc00c17 	ldw	ra,48(sp)
1000a0d4:	df000b17 	ldw	fp,44(sp)
1000a0d8:	ddc00a17 	ldw	r23,40(sp)
1000a0dc:	dd800917 	ldw	r22,36(sp)
1000a0e0:	dd400817 	ldw	r21,32(sp)
1000a0e4:	dd000717 	ldw	r20,28(sp)
1000a0e8:	dcc00617 	ldw	r19,24(sp)
1000a0ec:	dc800517 	ldw	r18,20(sp)
1000a0f0:	dc400417 	ldw	r17,16(sp)
1000a0f4:	dc000317 	ldw	r16,12(sp)
1000a0f8:	dec00d04 	addi	sp,sp,52
1000a0fc:	f800283a 	ret
1000a100:	00803fc4 	movi	r2,255
1000a104:	11c0b236 	bltu	r2,r7,1000a3d0 <__umoddi3+0x59c>
1000a108:	0007883a 	mov	r3,zero
1000a10c:	0027883a 	mov	r19,zero
1000a110:	003f9b06 	br	10009f80 <__alt_data_end+0xf8009f80>
1000a114:	00804034 	movhi	r2,256
1000a118:	10bfffc4 	addi	r2,r2,-1
1000a11c:	1180b236 	bltu	r2,r6,1000a3e8 <__umoddi3+0x5b4>
1000a120:	00800404 	movi	r2,16
1000a124:	1009883a 	mov	r4,r2
1000a128:	003f5a06 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a12c:	00803fc4 	movi	r2,255
1000a130:	1400b036 	bltu	r2,r16,1000a3f4 <__umoddi3+0x5c0>
1000a134:	0005883a 	mov	r2,zero
1000a138:	0007883a 	mov	r3,zero
1000a13c:	003fad06 	br	10009ff4 <__alt_data_end+0xf8009ff4>
1000a140:	34c4d83a 	srl	r2,r6,r19
1000a144:	3c0e983a 	sll	r7,r7,r16
1000a148:	8cf8d83a 	srl	fp,r17,r19
1000a14c:	8c22983a 	sll	r17,r17,r16
1000a150:	38a8b03a 	or	r20,r7,r2
1000a154:	a02ad43a 	srli	r21,r20,16
1000a158:	94c4d83a 	srl	r2,r18,r19
1000a15c:	e009883a 	mov	r4,fp
1000a160:	a80b883a 	mov	r5,r21
1000a164:	342c983a 	sll	r22,r6,r16
1000a168:	88a2b03a 	or	r17,r17,r2
1000a16c:	000b2b40 	call	1000b2b4 <__umodsi3>
1000a170:	e009883a 	mov	r4,fp
1000a174:	a80b883a 	mov	r5,r21
1000a178:	a5ffffcc 	andi	r23,r20,65535
1000a17c:	d8800215 	stw	r2,8(sp)
1000a180:	000b2ac0 	call	1000b2ac <__udivsi3>
1000a184:	1009883a 	mov	r4,r2
1000a188:	b80b883a 	mov	r5,r23
1000a18c:	1039883a 	mov	fp,r2
1000a190:	000b2bc0 	call	1000b2bc <__mulsi3>
1000a194:	d8c00217 	ldw	r3,8(sp)
1000a198:	1009883a 	mov	r4,r2
1000a19c:	8804d43a 	srli	r2,r17,16
1000a1a0:	1806943a 	slli	r3,r3,16
1000a1a4:	9424983a 	sll	r18,r18,r16
1000a1a8:	1886b03a 	or	r3,r3,r2
1000a1ac:	1900042e 	bgeu	r3,r4,1000a1c0 <__umoddi3+0x38c>
1000a1b0:	1d07883a 	add	r3,r3,r20
1000a1b4:	e0bfffc4 	addi	r2,fp,-1
1000a1b8:	1d009b2e 	bgeu	r3,r20,1000a428 <__umoddi3+0x5f4>
1000a1bc:	1039883a 	mov	fp,r2
1000a1c0:	1907c83a 	sub	r3,r3,r4
1000a1c4:	1809883a 	mov	r4,r3
1000a1c8:	a80b883a 	mov	r5,r21
1000a1cc:	d8c00215 	stw	r3,8(sp)
1000a1d0:	000b2b40 	call	1000b2b4 <__umodsi3>
1000a1d4:	d8c00217 	ldw	r3,8(sp)
1000a1d8:	a80b883a 	mov	r5,r21
1000a1dc:	d8800015 	stw	r2,0(sp)
1000a1e0:	1809883a 	mov	r4,r3
1000a1e4:	000b2ac0 	call	1000b2ac <__udivsi3>
1000a1e8:	1009883a 	mov	r4,r2
1000a1ec:	b80b883a 	mov	r5,r23
1000a1f0:	102b883a 	mov	r21,r2
1000a1f4:	000b2bc0 	call	1000b2bc <__mulsi3>
1000a1f8:	d9c00017 	ldw	r7,0(sp)
1000a1fc:	8c7fffcc 	andi	r17,r17,65535
1000a200:	380e943a 	slli	r7,r7,16
1000a204:	3c4eb03a 	or	r7,r7,r17
1000a208:	3880042e 	bgeu	r7,r2,1000a21c <__umoddi3+0x3e8>
1000a20c:	3d0f883a 	add	r7,r7,r20
1000a210:	a8ffffc4 	addi	r3,r21,-1
1000a214:	3d00802e 	bgeu	r7,r20,1000a418 <__umoddi3+0x5e4>
1000a218:	182b883a 	mov	r21,r3
1000a21c:	e038943a 	slli	fp,fp,16
1000a220:	b010d43a 	srli	r8,r22,16
1000a224:	b1bfffcc 	andi	r6,r22,65535
1000a228:	af2ab03a 	or	r21,r21,fp
1000a22c:	a82ed43a 	srli	r23,r21,16
1000a230:	ad7fffcc 	andi	r21,r21,65535
1000a234:	300b883a 	mov	r5,r6
1000a238:	a809883a 	mov	r4,r21
1000a23c:	38a3c83a 	sub	r17,r7,r2
1000a240:	d9800115 	stw	r6,4(sp)
1000a244:	da000015 	stw	r8,0(sp)
1000a248:	000b2bc0 	call	1000b2bc <__mulsi3>
1000a24c:	da000017 	ldw	r8,0(sp)
1000a250:	a809883a 	mov	r4,r21
1000a254:	1039883a 	mov	fp,r2
1000a258:	400b883a 	mov	r5,r8
1000a25c:	da000215 	stw	r8,8(sp)
1000a260:	000b2bc0 	call	1000b2bc <__mulsi3>
1000a264:	d9800117 	ldw	r6,4(sp)
1000a268:	b809883a 	mov	r4,r23
1000a26c:	d8800015 	stw	r2,0(sp)
1000a270:	300b883a 	mov	r5,r6
1000a274:	000b2bc0 	call	1000b2bc <__mulsi3>
1000a278:	d8c00217 	ldw	r3,8(sp)
1000a27c:	b809883a 	mov	r4,r23
1000a280:	102b883a 	mov	r21,r2
1000a284:	180b883a 	mov	r5,r3
1000a288:	000b2bc0 	call	1000b2bc <__mulsi3>
1000a28c:	d9c00017 	ldw	r7,0(sp)
1000a290:	1007883a 	mov	r3,r2
1000a294:	e004d43a 	srli	r2,fp,16
1000a298:	a9c9883a 	add	r4,r21,r7
1000a29c:	2089883a 	add	r4,r4,r2
1000a2a0:	2540022e 	bgeu	r4,r21,1000a2ac <__umoddi3+0x478>
1000a2a4:	00800074 	movhi	r2,1
1000a2a8:	1887883a 	add	r3,r3,r2
1000a2ac:	2004d43a 	srli	r2,r4,16
1000a2b0:	2008943a 	slli	r4,r4,16
1000a2b4:	e73fffcc 	andi	fp,fp,65535
1000a2b8:	1887883a 	add	r3,r3,r2
1000a2bc:	2709883a 	add	r4,r4,fp
1000a2c0:	88c03d36 	bltu	r17,r3,1000a3b8 <__umoddi3+0x584>
1000a2c4:	88c06126 	beq	r17,r3,1000a44c <__umoddi3+0x618>
1000a2c8:	88c7c83a 	sub	r3,r17,r3
1000a2cc:	202d883a 	mov	r22,r4
1000a2d0:	95adc83a 	sub	r22,r18,r22
1000a2d4:	95a5803a 	cmpltu	r18,r18,r22
1000a2d8:	1c87c83a 	sub	r3,r3,r18
1000a2dc:	1cc4983a 	sll	r2,r3,r19
1000a2e0:	b42cd83a 	srl	r22,r22,r16
1000a2e4:	1c06d83a 	srl	r3,r3,r16
1000a2e8:	1584b03a 	or	r2,r2,r22
1000a2ec:	003f7806 	br	1000a0d0 <__alt_data_end+0xf800a0d0>
1000a2f0:	002b883a 	mov	r21,zero
1000a2f4:	003ef506 	br	10009ecc <__alt_data_end+0xf8009ecc>
1000a2f8:	8560983a 	sll	r16,r16,r21
1000a2fc:	88e6d83a 	srl	r19,r17,r3
1000a300:	90c6d83a 	srl	r3,r18,r3
1000a304:	8028d43a 	srli	r20,r16,16
1000a308:	8d62983a 	sll	r17,r17,r21
1000a30c:	9809883a 	mov	r4,r19
1000a310:	a00b883a 	mov	r5,r20
1000a314:	88eeb03a 	or	r23,r17,r3
1000a318:	000b2b40 	call	1000b2b4 <__umodsi3>
1000a31c:	9809883a 	mov	r4,r19
1000a320:	a00b883a 	mov	r5,r20
1000a324:	1023883a 	mov	r17,r2
1000a328:	85bfffcc 	andi	r22,r16,65535
1000a32c:	000b2ac0 	call	1000b2ac <__udivsi3>
1000a330:	1009883a 	mov	r4,r2
1000a334:	b00b883a 	mov	r5,r22
1000a338:	000b2bc0 	call	1000b2bc <__mulsi3>
1000a33c:	1007883a 	mov	r3,r2
1000a340:	8808943a 	slli	r4,r17,16
1000a344:	b804d43a 	srli	r2,r23,16
1000a348:	9566983a 	sll	r19,r18,r21
1000a34c:	2088b03a 	or	r4,r4,r2
1000a350:	20c0042e 	bgeu	r4,r3,1000a364 <__umoddi3+0x530>
1000a354:	2409883a 	add	r4,r4,r16
1000a358:	24000236 	bltu	r4,r16,1000a364 <__umoddi3+0x530>
1000a35c:	20c0012e 	bgeu	r4,r3,1000a364 <__umoddi3+0x530>
1000a360:	2409883a 	add	r4,r4,r16
1000a364:	20e5c83a 	sub	r18,r4,r3
1000a368:	9009883a 	mov	r4,r18
1000a36c:	a00b883a 	mov	r5,r20
1000a370:	000b2b40 	call	1000b2b4 <__umodsi3>
1000a374:	1023883a 	mov	r17,r2
1000a378:	9009883a 	mov	r4,r18
1000a37c:	a00b883a 	mov	r5,r20
1000a380:	8822943a 	slli	r17,r17,16
1000a384:	000b2ac0 	call	1000b2ac <__udivsi3>
1000a388:	1009883a 	mov	r4,r2
1000a38c:	b00b883a 	mov	r5,r22
1000a390:	bdffffcc 	andi	r23,r23,65535
1000a394:	000b2bc0 	call	1000b2bc <__mulsi3>
1000a398:	8de2b03a 	or	r17,r17,r23
1000a39c:	8880042e 	bgeu	r17,r2,1000a3b0 <__umoddi3+0x57c>
1000a3a0:	8c23883a 	add	r17,r17,r16
1000a3a4:	8c000236 	bltu	r17,r16,1000a3b0 <__umoddi3+0x57c>
1000a3a8:	8880012e 	bgeu	r17,r2,1000a3b0 <__umoddi3+0x57c>
1000a3ac:	8c23883a 	add	r17,r17,r16
1000a3b0:	88a3c83a 	sub	r17,r17,r2
1000a3b4:	003f1b06 	br	1000a024 <__alt_data_end+0xf800a024>
1000a3b8:	25adc83a 	sub	r22,r4,r22
1000a3bc:	1d07c83a 	sub	r3,r3,r20
1000a3c0:	2589803a 	cmpltu	r4,r4,r22
1000a3c4:	1907c83a 	sub	r3,r3,r4
1000a3c8:	88c7c83a 	sub	r3,r17,r3
1000a3cc:	003fc006 	br	1000a2d0 <__alt_data_end+0xf800a2d0>
1000a3d0:	00c00204 	movi	r3,8
1000a3d4:	1827883a 	mov	r19,r3
1000a3d8:	003ee906 	br	10009f80 <__alt_data_end+0xf8009f80>
1000a3dc:	00c00604 	movi	r3,24
1000a3e0:	1827883a 	mov	r19,r3
1000a3e4:	003ee606 	br	10009f80 <__alt_data_end+0xf8009f80>
1000a3e8:	00800604 	movi	r2,24
1000a3ec:	1009883a 	mov	r4,r2
1000a3f0:	003ea806 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a3f4:	00800204 	movi	r2,8
1000a3f8:	1007883a 	mov	r3,r2
1000a3fc:	003efd06 	br	10009ff4 <__alt_data_end+0xf8009ff4>
1000a400:	00800604 	movi	r2,24
1000a404:	1007883a 	mov	r3,r2
1000a408:	003efa06 	br	10009ff4 <__alt_data_end+0xf8009ff4>
1000a40c:	00800204 	movi	r2,8
1000a410:	1009883a 	mov	r4,r2
1000a414:	003e9f06 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a418:	38bf7f2e 	bgeu	r7,r2,1000a218 <__alt_data_end+0xf800a218>
1000a41c:	ad7fff84 	addi	r21,r21,-2
1000a420:	3d0f883a 	add	r7,r7,r20
1000a424:	003f7d06 	br	1000a21c <__alt_data_end+0xf800a21c>
1000a428:	193f642e 	bgeu	r3,r4,1000a1bc <__alt_data_end+0xf800a1bc>
1000a42c:	e73fff84 	addi	fp,fp,-2
1000a430:	1d07883a 	add	r3,r3,r20
1000a434:	003f6206 	br	1000a1c0 <__alt_data_end+0xf800a1c0>
1000a438:	1c07883a 	add	r3,r3,r16
1000a43c:	003f0b06 	br	1000a06c <__alt_data_end+0xf800a06c>
1000a440:	9005883a 	mov	r2,r18
1000a444:	a007883a 	mov	r3,r20
1000a448:	003f2106 	br	1000a0d0 <__alt_data_end+0xf800a0d0>
1000a44c:	913fda36 	bltu	r18,r4,1000a3b8 <__alt_data_end+0xf800a3b8>
1000a450:	202d883a 	mov	r22,r4
1000a454:	0007883a 	mov	r3,zero
1000a458:	003f9d06 	br	1000a2d0 <__alt_data_end+0xf800a2d0>

1000a45c <_fpadd_parts>:
1000a45c:	2005883a 	mov	r2,r4
1000a460:	21000017 	ldw	r4,0(r4)
1000a464:	01c00044 	movi	r7,1
1000a468:	3900622e 	bgeu	r7,r4,1000a5f4 <_fpadd_parts+0x198>
1000a46c:	28c00017 	ldw	r3,0(r5)
1000a470:	38c05f2e 	bgeu	r7,r3,1000a5f0 <_fpadd_parts+0x194>
1000a474:	01c00104 	movi	r7,4
1000a478:	21c0c626 	beq	r4,r7,1000a794 <_fpadd_parts+0x338>
1000a47c:	19c05c26 	beq	r3,r7,1000a5f0 <_fpadd_parts+0x194>
1000a480:	01c00084 	movi	r7,2
1000a484:	19c06b26 	beq	r3,r7,1000a634 <_fpadd_parts+0x1d8>
1000a488:	21c05926 	beq	r4,r7,1000a5f0 <_fpadd_parts+0x194>
1000a48c:	11c00217 	ldw	r7,8(r2)
1000a490:	2ac00217 	ldw	r11,8(r5)
1000a494:	13000317 	ldw	r12,12(r2)
1000a498:	13400417 	ldw	r13,16(r2)
1000a49c:	3ac9c83a 	sub	r4,r7,r11
1000a4a0:	2a000317 	ldw	r8,12(r5)
1000a4a4:	2a400417 	ldw	r9,16(r5)
1000a4a8:	2015883a 	mov	r10,r4
1000a4ac:	20007516 	blt	r4,zero,1000a684 <_fpadd_parts+0x228>
1000a4b0:	00c00fc4 	movi	r3,63
1000a4b4:	1a805016 	blt	r3,r10,1000a5f8 <_fpadd_parts+0x19c>
1000a4b8:	0100870e 	bge	zero,r4,1000a6d8 <_fpadd_parts+0x27c>
1000a4bc:	50fff804 	addi	r3,r10,-32
1000a4c0:	18009916 	blt	r3,zero,1000a728 <_fpadd_parts+0x2cc>
1000a4c4:	48d6d83a 	srl	r11,r9,r3
1000a4c8:	001d883a 	mov	r14,zero
1000a4cc:	18009e16 	blt	r3,zero,1000a748 <_fpadd_parts+0x2ec>
1000a4d0:	01000044 	movi	r4,1
1000a4d4:	20c6983a 	sll	r3,r4,r3
1000a4d8:	0015883a 	mov	r10,zero
1000a4dc:	513fffc4 	addi	r4,r10,-1
1000a4e0:	2295403a 	cmpgeu	r10,r4,r10
1000a4e4:	1a87c83a 	sub	r3,r3,r10
1000a4e8:	1a52703a 	and	r9,r3,r9
1000a4ec:	2210703a 	and	r8,r4,r8
1000a4f0:	4250b03a 	or	r8,r8,r9
1000a4f4:	4010c03a 	cmpne	r8,r8,zero
1000a4f8:	42d0b03a 	or	r8,r8,r11
1000a4fc:	7013883a 	mov	r9,r14
1000a500:	11000117 	ldw	r4,4(r2)
1000a504:	28800117 	ldw	r2,4(r5)
1000a508:	20804126 	beq	r4,r2,1000a610 <_fpadd_parts+0x1b4>
1000a50c:	20006326 	beq	r4,zero,1000a69c <_fpadd_parts+0x240>
1000a510:	4305c83a 	sub	r2,r8,r12
1000a514:	4091803a 	cmpltu	r8,r8,r2
1000a518:	4b47c83a 	sub	r3,r9,r13
1000a51c:	1a07c83a 	sub	r3,r3,r8
1000a520:	18006316 	blt	r3,zero,1000a6b0 <_fpadd_parts+0x254>
1000a524:	30000115 	stw	zero,4(r6)
1000a528:	31c00215 	stw	r7,8(r6)
1000a52c:	30800315 	stw	r2,12(r6)
1000a530:	30c00415 	stw	r3,16(r6)
1000a534:	11ffffc4 	addi	r7,r2,-1
1000a538:	388b403a 	cmpgeu	r5,r7,r2
1000a53c:	194bc83a 	sub	r5,r3,r5
1000a540:	01040034 	movhi	r4,4096
1000a544:	213fffc4 	addi	r4,r4,-1
1000a548:	21401736 	bltu	r4,r5,1000a5a8 <_fpadd_parts+0x14c>
1000a54c:	29008226 	beq	r5,r4,1000a758 <_fpadd_parts+0x2fc>
1000a550:	31400217 	ldw	r5,8(r6)
1000a554:	02840034 	movhi	r10,4096
1000a558:	52bfffc4 	addi	r10,r10,-1
1000a55c:	033fff84 	movi	r12,-2
1000a560:	297fffc4 	addi	r5,r5,-1
1000a564:	00000106 	br	1000a56c <_fpadd_parts+0x110>
1000a568:	3a804a26 	beq	r7,r10,1000a694 <_fpadd_parts+0x238>
1000a56c:	1089883a 	add	r4,r2,r2
1000a570:	2091803a 	cmpltu	r8,r4,r2
1000a574:	18c7883a 	add	r3,r3,r3
1000a578:	227fffc4 	addi	r9,r4,-1
1000a57c:	40d1883a 	add	r8,r8,r3
1000a580:	490f403a 	cmpgeu	r7,r9,r4
1000a584:	41cfc83a 	sub	r7,r8,r7
1000a588:	2817883a 	mov	r11,r5
1000a58c:	2005883a 	mov	r2,r4
1000a590:	4007883a 	mov	r3,r8
1000a594:	297fffc4 	addi	r5,r5,-1
1000a598:	51fff32e 	bgeu	r10,r7,1000a568 <__alt_data_end+0xf800a568>
1000a59c:	31000315 	stw	r4,12(r6)
1000a5a0:	32000415 	stw	r8,16(r6)
1000a5a4:	32c00215 	stw	r11,8(r6)
1000a5a8:	010000c4 	movi	r4,3
1000a5ac:	31000015 	stw	r4,0(r6)
1000a5b0:	01080034 	movhi	r4,8192
1000a5b4:	213fffc4 	addi	r4,r4,-1
1000a5b8:	20c00b2e 	bgeu	r4,r3,1000a5e8 <_fpadd_parts+0x18c>
1000a5bc:	180e97fa 	slli	r7,r3,31
1000a5c0:	1008d07a 	srli	r4,r2,1
1000a5c4:	31400217 	ldw	r5,8(r6)
1000a5c8:	1806d07a 	srli	r3,r3,1
1000a5cc:	1080004c 	andi	r2,r2,1
1000a5d0:	3908b03a 	or	r4,r7,r4
1000a5d4:	1108b03a 	or	r4,r2,r4
1000a5d8:	29400044 	addi	r5,r5,1
1000a5dc:	31000315 	stw	r4,12(r6)
1000a5e0:	30c00415 	stw	r3,16(r6)
1000a5e4:	31400215 	stw	r5,8(r6)
1000a5e8:	3005883a 	mov	r2,r6
1000a5ec:	f800283a 	ret
1000a5f0:	2805883a 	mov	r2,r5
1000a5f4:	f800283a 	ret
1000a5f8:	59c01e0e 	bge	r11,r7,1000a674 <_fpadd_parts+0x218>
1000a5fc:	11000117 	ldw	r4,4(r2)
1000a600:	28800117 	ldw	r2,4(r5)
1000a604:	0011883a 	mov	r8,zero
1000a608:	0013883a 	mov	r9,zero
1000a60c:	20bfbf1e 	bne	r4,r2,1000a50c <__alt_data_end+0xf800a50c>
1000a610:	4305883a 	add	r2,r8,r12
1000a614:	1207803a 	cmpltu	r3,r2,r8
1000a618:	4b53883a 	add	r9,r9,r13
1000a61c:	1a47883a 	add	r3,r3,r9
1000a620:	31000115 	stw	r4,4(r6)
1000a624:	31c00215 	stw	r7,8(r6)
1000a628:	30800315 	stw	r2,12(r6)
1000a62c:	30c00415 	stw	r3,16(r6)
1000a630:	003fdd06 	br	1000a5a8 <__alt_data_end+0xf800a5a8>
1000a634:	20ffef1e 	bne	r4,r3,1000a5f4 <__alt_data_end+0xf800a5f4>
1000a638:	31000015 	stw	r4,0(r6)
1000a63c:	10c00117 	ldw	r3,4(r2)
1000a640:	30c00115 	stw	r3,4(r6)
1000a644:	10c00217 	ldw	r3,8(r2)
1000a648:	11000117 	ldw	r4,4(r2)
1000a64c:	29400117 	ldw	r5,4(r5)
1000a650:	30c00215 	stw	r3,8(r6)
1000a654:	10c00317 	ldw	r3,12(r2)
1000a658:	2908703a 	and	r4,r5,r4
1000a65c:	30c00315 	stw	r3,12(r6)
1000a660:	10c00417 	ldw	r3,16(r2)
1000a664:	31000115 	stw	r4,4(r6)
1000a668:	3005883a 	mov	r2,r6
1000a66c:	30c00415 	stw	r3,16(r6)
1000a670:	f800283a 	ret
1000a674:	580f883a 	mov	r7,r11
1000a678:	0019883a 	mov	r12,zero
1000a67c:	001b883a 	mov	r13,zero
1000a680:	003f9f06 	br	1000a500 <__alt_data_end+0xf800a500>
1000a684:	0115c83a 	sub	r10,zero,r4
1000a688:	00c00fc4 	movi	r3,63
1000a68c:	1abfda16 	blt	r3,r10,1000a5f8 <__alt_data_end+0xf800a5f8>
1000a690:	003f8906 	br	1000a4b8 <__alt_data_end+0xf800a4b8>
1000a694:	627fb52e 	bgeu	r12,r9,1000a56c <__alt_data_end+0xf800a56c>
1000a698:	003fc006 	br	1000a59c <__alt_data_end+0xf800a59c>
1000a69c:	6205c83a 	sub	r2,r12,r8
1000a6a0:	6099803a 	cmpltu	r12,r12,r2
1000a6a4:	6a47c83a 	sub	r3,r13,r9
1000a6a8:	1b07c83a 	sub	r3,r3,r12
1000a6ac:	183f9d0e 	bge	r3,zero,1000a524 <__alt_data_end+0xf800a524>
1000a6b0:	0085c83a 	sub	r2,zero,r2
1000a6b4:	1008c03a 	cmpne	r4,r2,zero
1000a6b8:	00c7c83a 	sub	r3,zero,r3
1000a6bc:	1907c83a 	sub	r3,r3,r4
1000a6c0:	01000044 	movi	r4,1
1000a6c4:	31000115 	stw	r4,4(r6)
1000a6c8:	31c00215 	stw	r7,8(r6)
1000a6cc:	30800315 	stw	r2,12(r6)
1000a6d0:	30c00415 	stw	r3,16(r6)
1000a6d4:	003f9706 	br	1000a534 <__alt_data_end+0xf800a534>
1000a6d8:	203f8926 	beq	r4,zero,1000a500 <__alt_data_end+0xf800a500>
1000a6dc:	50fff804 	addi	r3,r10,-32
1000a6e0:	3a8f883a 	add	r7,r7,r10
1000a6e4:	18002316 	blt	r3,zero,1000a774 <_fpadd_parts+0x318>
1000a6e8:	68d6d83a 	srl	r11,r13,r3
1000a6ec:	001d883a 	mov	r14,zero
1000a6f0:	18001c16 	blt	r3,zero,1000a764 <_fpadd_parts+0x308>
1000a6f4:	01000044 	movi	r4,1
1000a6f8:	20c6983a 	sll	r3,r4,r3
1000a6fc:	0015883a 	mov	r10,zero
1000a700:	513fffc4 	addi	r4,r10,-1
1000a704:	2295403a 	cmpgeu	r10,r4,r10
1000a708:	1a87c83a 	sub	r3,r3,r10
1000a70c:	1b5a703a 	and	r13,r3,r13
1000a710:	2318703a 	and	r12,r4,r12
1000a714:	6358b03a 	or	r12,r12,r13
1000a718:	6018c03a 	cmpne	r12,r12,zero
1000a71c:	62d8b03a 	or	r12,r12,r11
1000a720:	701b883a 	mov	r13,r14
1000a724:	003f7606 	br	1000a500 <__alt_data_end+0xf800a500>
1000a728:	4808907a 	slli	r4,r9,1
1000a72c:	02c007c4 	movi	r11,31
1000a730:	5a97c83a 	sub	r11,r11,r10
1000a734:	22c8983a 	sll	r4,r4,r11
1000a738:	4296d83a 	srl	r11,r8,r10
1000a73c:	4a9cd83a 	srl	r14,r9,r10
1000a740:	22d6b03a 	or	r11,r4,r11
1000a744:	003f6106 	br	1000a4cc <__alt_data_end+0xf800a4cc>
1000a748:	00c00044 	movi	r3,1
1000a74c:	1a94983a 	sll	r10,r3,r10
1000a750:	0007883a 	mov	r3,zero
1000a754:	003f6106 	br	1000a4dc <__alt_data_end+0xf800a4dc>
1000a758:	013fff84 	movi	r4,-2
1000a75c:	21ff7c2e 	bgeu	r4,r7,1000a550 <__alt_data_end+0xf800a550>
1000a760:	003f9106 	br	1000a5a8 <__alt_data_end+0xf800a5a8>
1000a764:	00c00044 	movi	r3,1
1000a768:	1a94983a 	sll	r10,r3,r10
1000a76c:	0007883a 	mov	r3,zero
1000a770:	003fe306 	br	1000a700 <__alt_data_end+0xf800a700>
1000a774:	6816907a 	slli	r11,r13,1
1000a778:	010007c4 	movi	r4,31
1000a77c:	2289c83a 	sub	r4,r4,r10
1000a780:	5908983a 	sll	r4,r11,r4
1000a784:	6296d83a 	srl	r11,r12,r10
1000a788:	6a9cd83a 	srl	r14,r13,r10
1000a78c:	22d6b03a 	or	r11,r4,r11
1000a790:	003fd706 	br	1000a6f0 <__alt_data_end+0xf800a6f0>
1000a794:	193f971e 	bne	r3,r4,1000a5f4 <__alt_data_end+0xf800a5f4>
1000a798:	11000117 	ldw	r4,4(r2)
1000a79c:	28c00117 	ldw	r3,4(r5)
1000a7a0:	20ff9426 	beq	r4,r3,1000a5f4 <__alt_data_end+0xf800a5f4>
1000a7a4:	00840074 	movhi	r2,4097
1000a7a8:	10baaa04 	addi	r2,r2,-5464
1000a7ac:	f800283a 	ret

1000a7b0 <__adddf3>:
1000a7b0:	deffec04 	addi	sp,sp,-80
1000a7b4:	d9001115 	stw	r4,68(sp)
1000a7b8:	d9401215 	stw	r5,72(sp)
1000a7bc:	d9001104 	addi	r4,sp,68
1000a7c0:	d9400a04 	addi	r5,sp,40
1000a7c4:	dfc01315 	stw	ra,76(sp)
1000a7c8:	d9c01015 	stw	r7,64(sp)
1000a7cc:	d9800f15 	stw	r6,60(sp)
1000a7d0:	000b6c40 	call	1000b6c4 <__unpack_d>
1000a7d4:	d9000f04 	addi	r4,sp,60
1000a7d8:	d9400504 	addi	r5,sp,20
1000a7dc:	000b6c40 	call	1000b6c4 <__unpack_d>
1000a7e0:	d9000a04 	addi	r4,sp,40
1000a7e4:	d9400504 	addi	r5,sp,20
1000a7e8:	d80d883a 	mov	r6,sp
1000a7ec:	000a45c0 	call	1000a45c <_fpadd_parts>
1000a7f0:	1009883a 	mov	r4,r2
1000a7f4:	000b4a00 	call	1000b4a0 <__pack_d>
1000a7f8:	dfc01317 	ldw	ra,76(sp)
1000a7fc:	dec01404 	addi	sp,sp,80
1000a800:	f800283a 	ret

1000a804 <__subdf3>:
1000a804:	deffec04 	addi	sp,sp,-80
1000a808:	d9001115 	stw	r4,68(sp)
1000a80c:	d9401215 	stw	r5,72(sp)
1000a810:	d9001104 	addi	r4,sp,68
1000a814:	d9400a04 	addi	r5,sp,40
1000a818:	dfc01315 	stw	ra,76(sp)
1000a81c:	d9c01015 	stw	r7,64(sp)
1000a820:	d9800f15 	stw	r6,60(sp)
1000a824:	000b6c40 	call	1000b6c4 <__unpack_d>
1000a828:	d9000f04 	addi	r4,sp,60
1000a82c:	d9400504 	addi	r5,sp,20
1000a830:	000b6c40 	call	1000b6c4 <__unpack_d>
1000a834:	d8800617 	ldw	r2,24(sp)
1000a838:	d9000a04 	addi	r4,sp,40
1000a83c:	d9400504 	addi	r5,sp,20
1000a840:	d80d883a 	mov	r6,sp
1000a844:	1080005c 	xori	r2,r2,1
1000a848:	d8800615 	stw	r2,24(sp)
1000a84c:	000a45c0 	call	1000a45c <_fpadd_parts>
1000a850:	1009883a 	mov	r4,r2
1000a854:	000b4a00 	call	1000b4a0 <__pack_d>
1000a858:	dfc01317 	ldw	ra,76(sp)
1000a85c:	dec01404 	addi	sp,sp,80
1000a860:	f800283a 	ret

1000a864 <__muldf3>:
1000a864:	deffe404 	addi	sp,sp,-112
1000a868:	d9001115 	stw	r4,68(sp)
1000a86c:	d9401215 	stw	r5,72(sp)
1000a870:	d9001104 	addi	r4,sp,68
1000a874:	d9400a04 	addi	r5,sp,40
1000a878:	dfc01b15 	stw	ra,108(sp)
1000a87c:	d9800f15 	stw	r6,60(sp)
1000a880:	d9c01015 	stw	r7,64(sp)
1000a884:	ddc01a15 	stw	r23,104(sp)
1000a888:	dd801915 	stw	r22,100(sp)
1000a88c:	dd401815 	stw	r21,96(sp)
1000a890:	dd001715 	stw	r20,92(sp)
1000a894:	dcc01615 	stw	r19,88(sp)
1000a898:	dc801515 	stw	r18,84(sp)
1000a89c:	dc401415 	stw	r17,80(sp)
1000a8a0:	dc001315 	stw	r16,76(sp)
1000a8a4:	000b6c40 	call	1000b6c4 <__unpack_d>
1000a8a8:	d9000f04 	addi	r4,sp,60
1000a8ac:	d9400504 	addi	r5,sp,20
1000a8b0:	000b6c40 	call	1000b6c4 <__unpack_d>
1000a8b4:	d8c00a17 	ldw	r3,40(sp)
1000a8b8:	00800044 	movi	r2,1
1000a8bc:	10c01136 	bltu	r2,r3,1000a904 <__muldf3+0xa0>
1000a8c0:	d8c00b17 	ldw	r3,44(sp)
1000a8c4:	d8800617 	ldw	r2,24(sp)
1000a8c8:	d9000a04 	addi	r4,sp,40
1000a8cc:	1884c03a 	cmpne	r2,r3,r2
1000a8d0:	d8800b15 	stw	r2,44(sp)
1000a8d4:	000b4a00 	call	1000b4a0 <__pack_d>
1000a8d8:	dfc01b17 	ldw	ra,108(sp)
1000a8dc:	ddc01a17 	ldw	r23,104(sp)
1000a8e0:	dd801917 	ldw	r22,100(sp)
1000a8e4:	dd401817 	ldw	r21,96(sp)
1000a8e8:	dd001717 	ldw	r20,92(sp)
1000a8ec:	dcc01617 	ldw	r19,88(sp)
1000a8f0:	dc801517 	ldw	r18,84(sp)
1000a8f4:	dc401417 	ldw	r17,80(sp)
1000a8f8:	dc001317 	ldw	r16,76(sp)
1000a8fc:	dec01c04 	addi	sp,sp,112
1000a900:	f800283a 	ret
1000a904:	d9000517 	ldw	r4,20(sp)
1000a908:	11000636 	bltu	r2,r4,1000a924 <__muldf3+0xc0>
1000a90c:	d8800617 	ldw	r2,24(sp)
1000a910:	d8c00b17 	ldw	r3,44(sp)
1000a914:	d9000504 	addi	r4,sp,20
1000a918:	1884c03a 	cmpne	r2,r3,r2
1000a91c:	d8800615 	stw	r2,24(sp)
1000a920:	003fec06 	br	1000a8d4 <__alt_data_end+0xf800a8d4>
1000a924:	00800104 	movi	r2,4
1000a928:	1880051e 	bne	r3,r2,1000a940 <__muldf3+0xdc>
1000a92c:	00800084 	movi	r2,2
1000a930:	20bfe31e 	bne	r4,r2,1000a8c0 <__alt_data_end+0xf800a8c0>
1000a934:	01040074 	movhi	r4,4097
1000a938:	213aaa04 	addi	r4,r4,-5464
1000a93c:	003fe506 	br	1000a8d4 <__alt_data_end+0xf800a8d4>
1000a940:	2080031e 	bne	r4,r2,1000a950 <__muldf3+0xec>
1000a944:	00800084 	movi	r2,2
1000a948:	18bffa26 	beq	r3,r2,1000a934 <__alt_data_end+0xf800a934>
1000a94c:	003fef06 	br	1000a90c <__alt_data_end+0xf800a90c>
1000a950:	00800084 	movi	r2,2
1000a954:	18bfda26 	beq	r3,r2,1000a8c0 <__alt_data_end+0xf800a8c0>
1000a958:	20bfec26 	beq	r4,r2,1000a90c <__alt_data_end+0xf800a90c>
1000a95c:	dc000d17 	ldw	r16,52(sp)
1000a960:	dd000817 	ldw	r20,32(sp)
1000a964:	dc800917 	ldw	r18,36(sp)
1000a968:	8009883a 	mov	r4,r16
1000a96c:	000b883a 	mov	r5,zero
1000a970:	a00d883a 	mov	r6,r20
1000a974:	000f883a 	mov	r7,zero
1000a978:	000b2e40 	call	1000b2e4 <__muldi3>
1000a97c:	dc400e17 	ldw	r17,56(sp)
1000a980:	9009883a 	mov	r4,r18
1000a984:	800d883a 	mov	r6,r16
1000a988:	000b883a 	mov	r5,zero
1000a98c:	000f883a 	mov	r7,zero
1000a990:	102f883a 	mov	r23,r2
1000a994:	1827883a 	mov	r19,r3
1000a998:	000b2e40 	call	1000b2e4 <__muldi3>
1000a99c:	900d883a 	mov	r6,r18
1000a9a0:	8809883a 	mov	r4,r17
1000a9a4:	000b883a 	mov	r5,zero
1000a9a8:	000f883a 	mov	r7,zero
1000a9ac:	102b883a 	mov	r21,r2
1000a9b0:	1821883a 	mov	r16,r3
1000a9b4:	000b2e40 	call	1000b2e4 <__muldi3>
1000a9b8:	8809883a 	mov	r4,r17
1000a9bc:	000b883a 	mov	r5,zero
1000a9c0:	a00d883a 	mov	r6,r20
1000a9c4:	000f883a 	mov	r7,zero
1000a9c8:	102d883a 	mov	r22,r2
1000a9cc:	1825883a 	mov	r18,r3
1000a9d0:	000b2e40 	call	1000b2e4 <__muldi3>
1000a9d4:	154b883a 	add	r5,r2,r21
1000a9d8:	2889803a 	cmpltu	r4,r5,r2
1000a9dc:	1c07883a 	add	r3,r3,r16
1000a9e0:	20c9883a 	add	r4,r4,r3
1000a9e4:	24004b36 	bltu	r4,r16,1000ab14 <__muldf3+0x2b0>
1000a9e8:	8100011e 	bne	r16,r4,1000a9f0 <__muldf3+0x18c>
1000a9ec:	2d404936 	bltu	r5,r21,1000ab14 <__muldf3+0x2b0>
1000a9f0:	0011883a 	mov	r8,zero
1000a9f4:	0007883a 	mov	r3,zero
1000a9f8:	2ccb883a 	add	r5,r5,r19
1000a9fc:	b80d883a 	mov	r6,r23
1000aa00:	2cc0012e 	bgeu	r5,r19,1000aa08 <__muldf3+0x1a4>
1000aa04:	02000044 	movi	r8,1
1000aa08:	258f883a 	add	r7,r4,r22
1000aa0c:	3909803a 	cmpltu	r4,r7,r4
1000aa10:	da400c17 	ldw	r9,48(sp)
1000aa14:	2489883a 	add	r4,r4,r18
1000aa18:	d8800717 	ldw	r2,28(sp)
1000aa1c:	20c9883a 	add	r4,r4,r3
1000aa20:	da800b17 	ldw	r10,44(sp)
1000aa24:	d8c00617 	ldw	r3,24(sp)
1000aa28:	3a11883a 	add	r8,r7,r8
1000aa2c:	4885883a 	add	r2,r9,r2
1000aa30:	50c6c03a 	cmpne	r3,r10,r3
1000aa34:	41cf803a 	cmpltu	r7,r8,r7
1000aa38:	12400104 	addi	r9,r2,4
1000aa3c:	d8c00115 	stw	r3,4(sp)
1000aa40:	3909883a 	add	r4,r7,r4
1000aa44:	da400215 	stw	r9,8(sp)
1000aa48:	03480034 	movhi	r13,8192
1000aa4c:	6b7fffc4 	addi	r13,r13,-1
1000aa50:	4007883a 	mov	r3,r8
1000aa54:	6900102e 	bgeu	r13,r4,1000aa98 <__muldf3+0x234>
1000aa58:	10800144 	addi	r2,r2,5
1000aa5c:	180ed07a 	srli	r7,r3,1
1000aa60:	18c0004c 	andi	r3,r3,1
1000aa64:	201097fa 	slli	r8,r4,31
1000aa68:	281697fa 	slli	r11,r5,31
1000aa6c:	2008d07a 	srli	r4,r4,1
1000aa70:	3014d07a 	srli	r10,r6,1
1000aa74:	2812d07a 	srli	r9,r5,1
1000aa78:	1019883a 	mov	r12,r2
1000aa7c:	18000226 	beq	r3,zero,1000aa88 <__muldf3+0x224>
1000aa80:	5a8cb03a 	or	r6,r11,r10
1000aa84:	49600034 	orhi	r5,r9,32768
1000aa88:	41c6b03a 	or	r3,r8,r7
1000aa8c:	10800044 	addi	r2,r2,1
1000aa90:	693ff236 	bltu	r13,r4,1000aa5c <__alt_data_end+0xf800aa5c>
1000aa94:	db000215 	stw	r12,8(sp)
1000aa98:	03440034 	movhi	r13,4096
1000aa9c:	6b7fffc4 	addi	r13,r13,-1
1000aaa0:	69001336 	bltu	r13,r4,1000aaf0 <__muldf3+0x28c>
1000aaa4:	d8800217 	ldw	r2,8(sp)
1000aaa8:	10bfffc4 	addi	r2,r2,-1
1000aaac:	18d3883a 	add	r9,r3,r3
1000aab0:	48c7803a 	cmpltu	r3,r9,r3
1000aab4:	2109883a 	add	r4,r4,r4
1000aab8:	190f883a 	add	r7,r3,r4
1000aabc:	3191883a 	add	r8,r6,r6
1000aac0:	4197803a 	cmpltu	r11,r8,r6
1000aac4:	2955883a 	add	r10,r5,r5
1000aac8:	1019883a 	mov	r12,r2
1000aacc:	4807883a 	mov	r3,r9
1000aad0:	3809883a 	mov	r4,r7
1000aad4:	2800010e 	bge	r5,zero,1000aadc <__muldf3+0x278>
1000aad8:	48c00054 	ori	r3,r9,1
1000aadc:	400d883a 	mov	r6,r8
1000aae0:	5a8b883a 	add	r5,r11,r10
1000aae4:	10bfffc4 	addi	r2,r2,-1
1000aae8:	69fff02e 	bgeu	r13,r7,1000aaac <__alt_data_end+0xf800aaac>
1000aaec:	db000215 	stw	r12,8(sp)
1000aaf0:	18803fcc 	andi	r2,r3,255
1000aaf4:	01c02004 	movi	r7,128
1000aaf8:	11c00926 	beq	r2,r7,1000ab20 <__muldf3+0x2bc>
1000aafc:	008000c4 	movi	r2,3
1000ab00:	d9000415 	stw	r4,16(sp)
1000ab04:	d8c00315 	stw	r3,12(sp)
1000ab08:	d8800015 	stw	r2,0(sp)
1000ab0c:	d809883a 	mov	r4,sp
1000ab10:	003f7006 	br	1000a8d4 <__alt_data_end+0xf800a8d4>
1000ab14:	0011883a 	mov	r8,zero
1000ab18:	00c00044 	movi	r3,1
1000ab1c:	003fb606 	br	1000a9f8 <__alt_data_end+0xf800a9f8>
1000ab20:	19c0400c 	andi	r7,r3,256
1000ab24:	383ff51e 	bne	r7,zero,1000aafc <__alt_data_end+0xf800aafc>
1000ab28:	314ab03a 	or	r5,r6,r5
1000ab2c:	283ff326 	beq	r5,zero,1000aafc <__alt_data_end+0xf800aafc>
1000ab30:	1885883a 	add	r2,r3,r2
1000ab34:	10cb803a 	cmpltu	r5,r2,r3
1000ab38:	00ffc004 	movi	r3,-256
1000ab3c:	10c6703a 	and	r3,r2,r3
1000ab40:	2909883a 	add	r4,r5,r4
1000ab44:	003fed06 	br	1000aafc <__alt_data_end+0xf800aafc>

1000ab48 <__divdf3>:
1000ab48:	defff104 	addi	sp,sp,-60
1000ab4c:	d9000c15 	stw	r4,48(sp)
1000ab50:	d9400d15 	stw	r5,52(sp)
1000ab54:	d9000c04 	addi	r4,sp,48
1000ab58:	d9400504 	addi	r5,sp,20
1000ab5c:	dfc00e15 	stw	ra,56(sp)
1000ab60:	d9800a15 	stw	r6,40(sp)
1000ab64:	d9c00b15 	stw	r7,44(sp)
1000ab68:	000b6c40 	call	1000b6c4 <__unpack_d>
1000ab6c:	d9000a04 	addi	r4,sp,40
1000ab70:	d80b883a 	mov	r5,sp
1000ab74:	000b6c40 	call	1000b6c4 <__unpack_d>
1000ab78:	d8c00517 	ldw	r3,20(sp)
1000ab7c:	00800044 	movi	r2,1
1000ab80:	10c00536 	bltu	r2,r3,1000ab98 <__divdf3+0x50>
1000ab84:	d9000504 	addi	r4,sp,20
1000ab88:	000b4a00 	call	1000b4a0 <__pack_d>
1000ab8c:	dfc00e17 	ldw	ra,56(sp)
1000ab90:	dec00f04 	addi	sp,sp,60
1000ab94:	f800283a 	ret
1000ab98:	d9000017 	ldw	r4,0(sp)
1000ab9c:	11000536 	bltu	r2,r4,1000abb4 <__divdf3+0x6c>
1000aba0:	d809883a 	mov	r4,sp
1000aba4:	000b4a00 	call	1000b4a0 <__pack_d>
1000aba8:	dfc00e17 	ldw	ra,56(sp)
1000abac:	dec00f04 	addi	sp,sp,60
1000abb0:	f800283a 	ret
1000abb4:	d9800617 	ldw	r6,24(sp)
1000abb8:	d9400117 	ldw	r5,4(sp)
1000abbc:	00800104 	movi	r2,4
1000abc0:	314af03a 	xor	r5,r6,r5
1000abc4:	d9400615 	stw	r5,24(sp)
1000abc8:	18800226 	beq	r3,r2,1000abd4 <__divdf3+0x8c>
1000abcc:	01400084 	movi	r5,2
1000abd0:	1940041e 	bne	r3,r5,1000abe4 <__divdf3+0x9c>
1000abd4:	193feb1e 	bne	r3,r4,1000ab84 <__alt_data_end+0xf800ab84>
1000abd8:	01040074 	movhi	r4,4097
1000abdc:	213aaa04 	addi	r4,r4,-5464
1000abe0:	003fe906 	br	1000ab88 <__alt_data_end+0xf800ab88>
1000abe4:	20803326 	beq	r4,r2,1000acb4 <__divdf3+0x16c>
1000abe8:	21403726 	beq	r4,r5,1000acc8 <__divdf3+0x180>
1000abec:	d8800217 	ldw	r2,8(sp)
1000abf0:	d9000717 	ldw	r4,28(sp)
1000abf4:	d8c00917 	ldw	r3,36(sp)
1000abf8:	da000417 	ldw	r8,16(sp)
1000abfc:	2089c83a 	sub	r4,r4,r2
1000ac00:	d9000715 	stw	r4,28(sp)
1000ac04:	d8800817 	ldw	r2,32(sp)
1000ac08:	dbc00317 	ldw	r15,12(sp)
1000ac0c:	1a000236 	bltu	r3,r8,1000ac18 <__divdf3+0xd0>
1000ac10:	40c0081e 	bne	r8,r3,1000ac34 <__divdf3+0xec>
1000ac14:	13c0072e 	bgeu	r2,r15,1000ac34 <__divdf3+0xec>
1000ac18:	108b883a 	add	r5,r2,r2
1000ac1c:	288d803a 	cmpltu	r6,r5,r2
1000ac20:	18c7883a 	add	r3,r3,r3
1000ac24:	213fffc4 	addi	r4,r4,-1
1000ac28:	2805883a 	mov	r2,r5
1000ac2c:	30c7883a 	add	r3,r6,r3
1000ac30:	d9000715 	stw	r4,28(sp)
1000ac34:	01400f44 	movi	r5,61
1000ac38:	000f883a 	mov	r7,zero
1000ac3c:	01040034 	movhi	r4,4096
1000ac40:	0019883a 	mov	r12,zero
1000ac44:	001b883a 	mov	r13,zero
1000ac48:	201697fa 	slli	r11,r4,31
1000ac4c:	3814d07a 	srli	r10,r7,1
1000ac50:	297fffc4 	addi	r5,r5,-1
1000ac54:	1a000936 	bltu	r3,r8,1000ac7c <__divdf3+0x134>
1000ac58:	13cdc83a 	sub	r6,r2,r15
1000ac5c:	1193803a 	cmpltu	r9,r2,r6
1000ac60:	1a1dc83a 	sub	r14,r3,r8
1000ac64:	40c0011e 	bne	r8,r3,1000ac6c <__divdf3+0x124>
1000ac68:	13c00436 	bltu	r2,r15,1000ac7c <__divdf3+0x134>
1000ac6c:	3005883a 	mov	r2,r6
1000ac70:	7247c83a 	sub	r3,r14,r9
1000ac74:	61d8b03a 	or	r12,r12,r7
1000ac78:	691ab03a 	or	r13,r13,r4
1000ac7c:	108d883a 	add	r6,r2,r2
1000ac80:	3093803a 	cmpltu	r9,r6,r2
1000ac84:	18c7883a 	add	r3,r3,r3
1000ac88:	5a8eb03a 	or	r7,r11,r10
1000ac8c:	2008d07a 	srli	r4,r4,1
1000ac90:	3005883a 	mov	r2,r6
1000ac94:	48c7883a 	add	r3,r9,r3
1000ac98:	283feb1e 	bne	r5,zero,1000ac48 <__alt_data_end+0xf800ac48>
1000ac9c:	61003fcc 	andi	r4,r12,255
1000aca0:	01402004 	movi	r5,128
1000aca4:	21400b26 	beq	r4,r5,1000acd4 <__divdf3+0x18c>
1000aca8:	db000815 	stw	r12,32(sp)
1000acac:	db400915 	stw	r13,36(sp)
1000acb0:	003fb406 	br	1000ab84 <__alt_data_end+0xf800ab84>
1000acb4:	d8000815 	stw	zero,32(sp)
1000acb8:	d8000915 	stw	zero,36(sp)
1000acbc:	d8000715 	stw	zero,28(sp)
1000acc0:	d9000504 	addi	r4,sp,20
1000acc4:	003fb006 	br	1000ab88 <__alt_data_end+0xf800ab88>
1000acc8:	d8800515 	stw	r2,20(sp)
1000accc:	d9000504 	addi	r4,sp,20
1000acd0:	003fad06 	br	1000ab88 <__alt_data_end+0xf800ab88>
1000acd4:	6140400c 	andi	r5,r12,256
1000acd8:	283ff31e 	bne	r5,zero,1000aca8 <__alt_data_end+0xf800aca8>
1000acdc:	30c4b03a 	or	r2,r6,r3
1000ace0:	103ff126 	beq	r2,zero,1000aca8 <__alt_data_end+0xf800aca8>
1000ace4:	6109883a 	add	r4,r12,r4
1000ace8:	2305803a 	cmpltu	r2,r4,r12
1000acec:	033fc004 	movi	r12,-256
1000acf0:	2318703a 	and	r12,r4,r12
1000acf4:	135b883a 	add	r13,r2,r13
1000acf8:	003feb06 	br	1000aca8 <__alt_data_end+0xf800aca8>

1000acfc <__eqdf2>:
1000acfc:	defff104 	addi	sp,sp,-60
1000ad00:	d9000c15 	stw	r4,48(sp)
1000ad04:	d9400d15 	stw	r5,52(sp)
1000ad08:	d9000c04 	addi	r4,sp,48
1000ad0c:	d9400504 	addi	r5,sp,20
1000ad10:	dfc00e15 	stw	ra,56(sp)
1000ad14:	d9800a15 	stw	r6,40(sp)
1000ad18:	d9c00b15 	stw	r7,44(sp)
1000ad1c:	000b6c40 	call	1000b6c4 <__unpack_d>
1000ad20:	d9000a04 	addi	r4,sp,40
1000ad24:	d80b883a 	mov	r5,sp
1000ad28:	000b6c40 	call	1000b6c4 <__unpack_d>
1000ad2c:	d8c00517 	ldw	r3,20(sp)
1000ad30:	00800044 	movi	r2,1
1000ad34:	10c0052e 	bgeu	r2,r3,1000ad4c <__eqdf2+0x50>
1000ad38:	d8c00017 	ldw	r3,0(sp)
1000ad3c:	10c0032e 	bgeu	r2,r3,1000ad4c <__eqdf2+0x50>
1000ad40:	d9000504 	addi	r4,sp,20
1000ad44:	d80b883a 	mov	r5,sp
1000ad48:	000b7c80 	call	1000b7c8 <__fpcmp_parts_d>
1000ad4c:	dfc00e17 	ldw	ra,56(sp)
1000ad50:	dec00f04 	addi	sp,sp,60
1000ad54:	f800283a 	ret

1000ad58 <__nedf2>:
1000ad58:	defff104 	addi	sp,sp,-60
1000ad5c:	d9000c15 	stw	r4,48(sp)
1000ad60:	d9400d15 	stw	r5,52(sp)
1000ad64:	d9000c04 	addi	r4,sp,48
1000ad68:	d9400504 	addi	r5,sp,20
1000ad6c:	dfc00e15 	stw	ra,56(sp)
1000ad70:	d9800a15 	stw	r6,40(sp)
1000ad74:	d9c00b15 	stw	r7,44(sp)
1000ad78:	000b6c40 	call	1000b6c4 <__unpack_d>
1000ad7c:	d9000a04 	addi	r4,sp,40
1000ad80:	d80b883a 	mov	r5,sp
1000ad84:	000b6c40 	call	1000b6c4 <__unpack_d>
1000ad88:	d8c00517 	ldw	r3,20(sp)
1000ad8c:	00800044 	movi	r2,1
1000ad90:	10c0052e 	bgeu	r2,r3,1000ada8 <__nedf2+0x50>
1000ad94:	d8c00017 	ldw	r3,0(sp)
1000ad98:	10c0032e 	bgeu	r2,r3,1000ada8 <__nedf2+0x50>
1000ad9c:	d9000504 	addi	r4,sp,20
1000ada0:	d80b883a 	mov	r5,sp
1000ada4:	000b7c80 	call	1000b7c8 <__fpcmp_parts_d>
1000ada8:	dfc00e17 	ldw	ra,56(sp)
1000adac:	dec00f04 	addi	sp,sp,60
1000adb0:	f800283a 	ret

1000adb4 <__gtdf2>:
1000adb4:	defff104 	addi	sp,sp,-60
1000adb8:	d9000c15 	stw	r4,48(sp)
1000adbc:	d9400d15 	stw	r5,52(sp)
1000adc0:	d9000c04 	addi	r4,sp,48
1000adc4:	d9400504 	addi	r5,sp,20
1000adc8:	dfc00e15 	stw	ra,56(sp)
1000adcc:	d9800a15 	stw	r6,40(sp)
1000add0:	d9c00b15 	stw	r7,44(sp)
1000add4:	000b6c40 	call	1000b6c4 <__unpack_d>
1000add8:	d9000a04 	addi	r4,sp,40
1000addc:	d80b883a 	mov	r5,sp
1000ade0:	000b6c40 	call	1000b6c4 <__unpack_d>
1000ade4:	d8c00517 	ldw	r3,20(sp)
1000ade8:	00800044 	movi	r2,1
1000adec:	10c0082e 	bgeu	r2,r3,1000ae10 <__gtdf2+0x5c>
1000adf0:	d8c00017 	ldw	r3,0(sp)
1000adf4:	10c0062e 	bgeu	r2,r3,1000ae10 <__gtdf2+0x5c>
1000adf8:	d9000504 	addi	r4,sp,20
1000adfc:	d80b883a 	mov	r5,sp
1000ae00:	000b7c80 	call	1000b7c8 <__fpcmp_parts_d>
1000ae04:	dfc00e17 	ldw	ra,56(sp)
1000ae08:	dec00f04 	addi	sp,sp,60
1000ae0c:	f800283a 	ret
1000ae10:	00bfffc4 	movi	r2,-1
1000ae14:	003ffb06 	br	1000ae04 <__alt_data_end+0xf800ae04>

1000ae18 <__gedf2>:
1000ae18:	defff104 	addi	sp,sp,-60
1000ae1c:	d9000c15 	stw	r4,48(sp)
1000ae20:	d9400d15 	stw	r5,52(sp)
1000ae24:	d9000c04 	addi	r4,sp,48
1000ae28:	d9400504 	addi	r5,sp,20
1000ae2c:	dfc00e15 	stw	ra,56(sp)
1000ae30:	d9800a15 	stw	r6,40(sp)
1000ae34:	d9c00b15 	stw	r7,44(sp)
1000ae38:	000b6c40 	call	1000b6c4 <__unpack_d>
1000ae3c:	d9000a04 	addi	r4,sp,40
1000ae40:	d80b883a 	mov	r5,sp
1000ae44:	000b6c40 	call	1000b6c4 <__unpack_d>
1000ae48:	d8c00517 	ldw	r3,20(sp)
1000ae4c:	00800044 	movi	r2,1
1000ae50:	10c0082e 	bgeu	r2,r3,1000ae74 <__gedf2+0x5c>
1000ae54:	d8c00017 	ldw	r3,0(sp)
1000ae58:	10c0062e 	bgeu	r2,r3,1000ae74 <__gedf2+0x5c>
1000ae5c:	d9000504 	addi	r4,sp,20
1000ae60:	d80b883a 	mov	r5,sp
1000ae64:	000b7c80 	call	1000b7c8 <__fpcmp_parts_d>
1000ae68:	dfc00e17 	ldw	ra,56(sp)
1000ae6c:	dec00f04 	addi	sp,sp,60
1000ae70:	f800283a 	ret
1000ae74:	00bfffc4 	movi	r2,-1
1000ae78:	003ffb06 	br	1000ae68 <__alt_data_end+0xf800ae68>

1000ae7c <__ltdf2>:
1000ae7c:	defff104 	addi	sp,sp,-60
1000ae80:	d9000c15 	stw	r4,48(sp)
1000ae84:	d9400d15 	stw	r5,52(sp)
1000ae88:	d9000c04 	addi	r4,sp,48
1000ae8c:	d9400504 	addi	r5,sp,20
1000ae90:	dfc00e15 	stw	ra,56(sp)
1000ae94:	d9800a15 	stw	r6,40(sp)
1000ae98:	d9c00b15 	stw	r7,44(sp)
1000ae9c:	000b6c40 	call	1000b6c4 <__unpack_d>
1000aea0:	d9000a04 	addi	r4,sp,40
1000aea4:	d80b883a 	mov	r5,sp
1000aea8:	000b6c40 	call	1000b6c4 <__unpack_d>
1000aeac:	d8c00517 	ldw	r3,20(sp)
1000aeb0:	00800044 	movi	r2,1
1000aeb4:	10c0052e 	bgeu	r2,r3,1000aecc <__ltdf2+0x50>
1000aeb8:	d8c00017 	ldw	r3,0(sp)
1000aebc:	10c0032e 	bgeu	r2,r3,1000aecc <__ltdf2+0x50>
1000aec0:	d9000504 	addi	r4,sp,20
1000aec4:	d80b883a 	mov	r5,sp
1000aec8:	000b7c80 	call	1000b7c8 <__fpcmp_parts_d>
1000aecc:	dfc00e17 	ldw	ra,56(sp)
1000aed0:	dec00f04 	addi	sp,sp,60
1000aed4:	f800283a 	ret

1000aed8 <__floatsidf>:
1000aed8:	2004d7fa 	srli	r2,r4,31
1000aedc:	defff904 	addi	sp,sp,-28
1000aee0:	00c000c4 	movi	r3,3
1000aee4:	dfc00615 	stw	ra,24(sp)
1000aee8:	dc000515 	stw	r16,20(sp)
1000aeec:	d8c00015 	stw	r3,0(sp)
1000aef0:	d8800115 	stw	r2,4(sp)
1000aef4:	2000081e 	bne	r4,zero,1000af18 <__floatsidf+0x40>
1000aef8:	00800084 	movi	r2,2
1000aefc:	d8800015 	stw	r2,0(sp)
1000af00:	d809883a 	mov	r4,sp
1000af04:	000b4a00 	call	1000b4a0 <__pack_d>
1000af08:	dfc00617 	ldw	ra,24(sp)
1000af0c:	dc000517 	ldw	r16,20(sp)
1000af10:	dec00704 	addi	sp,sp,28
1000af14:	f800283a 	ret
1000af18:	00c00f04 	movi	r3,60
1000af1c:	d8c00215 	stw	r3,8(sp)
1000af20:	10000f1e 	bne	r2,zero,1000af60 <__floatsidf+0x88>
1000af24:	2021883a 	mov	r16,r4
1000af28:	8009883a 	mov	r4,r16
1000af2c:	000b3f40 	call	1000b3f4 <__clzsi2>
1000af30:	11000744 	addi	r4,r2,29
1000af34:	0100110e 	bge	zero,r4,1000af7c <__floatsidf+0xa4>
1000af38:	10ffff44 	addi	r3,r2,-3
1000af3c:	18001216 	blt	r3,zero,1000af88 <__floatsidf+0xb0>
1000af40:	80c6983a 	sll	r3,r16,r3
1000af44:	0009883a 	mov	r4,zero
1000af48:	014007c4 	movi	r5,31
1000af4c:	2885c83a 	sub	r2,r5,r2
1000af50:	d9000315 	stw	r4,12(sp)
1000af54:	d8c00415 	stw	r3,16(sp)
1000af58:	d8800215 	stw	r2,8(sp)
1000af5c:	003fe806 	br	1000af00 <__alt_data_end+0xf800af00>
1000af60:	00a00034 	movhi	r2,32768
1000af64:	20800e26 	beq	r4,r2,1000afa0 <__floatsidf+0xc8>
1000af68:	0121c83a 	sub	r16,zero,r4
1000af6c:	8009883a 	mov	r4,r16
1000af70:	000b3f40 	call	1000b3f4 <__clzsi2>
1000af74:	11000744 	addi	r4,r2,29
1000af78:	013fef16 	blt	zero,r4,1000af38 <__alt_data_end+0xf800af38>
1000af7c:	dc000315 	stw	r16,12(sp)
1000af80:	d8000415 	stw	zero,16(sp)
1000af84:	003fde06 	br	1000af00 <__alt_data_end+0xf800af00>
1000af88:	800ad07a 	srli	r5,r16,1
1000af8c:	00c007c4 	movi	r3,31
1000af90:	1907c83a 	sub	r3,r3,r4
1000af94:	28c6d83a 	srl	r3,r5,r3
1000af98:	8108983a 	sll	r4,r16,r4
1000af9c:	003fea06 	br	1000af48 <__alt_data_end+0xf800af48>
1000afa0:	0005883a 	mov	r2,zero
1000afa4:	00f07834 	movhi	r3,49632
1000afa8:	003fd706 	br	1000af08 <__alt_data_end+0xf800af08>

1000afac <__fixdfsi>:
1000afac:	defff804 	addi	sp,sp,-32
1000afb0:	d9000515 	stw	r4,20(sp)
1000afb4:	d9400615 	stw	r5,24(sp)
1000afb8:	d9000504 	addi	r4,sp,20
1000afbc:	d80b883a 	mov	r5,sp
1000afc0:	dfc00715 	stw	ra,28(sp)
1000afc4:	000b6c40 	call	1000b6c4 <__unpack_d>
1000afc8:	d8800017 	ldw	r2,0(sp)
1000afcc:	00c00084 	movi	r3,2
1000afd0:	10c01c26 	beq	r2,r3,1000b044 <__fixdfsi+0x98>
1000afd4:	00c00044 	movi	r3,1
1000afd8:	18801a2e 	bgeu	r3,r2,1000b044 <__fixdfsi+0x98>
1000afdc:	00c00104 	movi	r3,4
1000afe0:	10c01126 	beq	r2,r3,1000b028 <__fixdfsi+0x7c>
1000afe4:	d8800217 	ldw	r2,8(sp)
1000afe8:	10001616 	blt	r2,zero,1000b044 <__fixdfsi+0x98>
1000afec:	00c00784 	movi	r3,30
1000aff0:	18800d16 	blt	r3,r2,1000b028 <__fixdfsi+0x7c>
1000aff4:	00c00f04 	movi	r3,60
1000aff8:	1885c83a 	sub	r2,r3,r2
1000affc:	10fff804 	addi	r3,r2,-32
1000b000:	d9400317 	ldw	r5,12(sp)
1000b004:	d9000417 	ldw	r4,16(sp)
1000b008:	18001216 	blt	r3,zero,1000b054 <__fixdfsi+0xa8>
1000b00c:	20c4d83a 	srl	r2,r4,r3
1000b010:	d8c00117 	ldw	r3,4(sp)
1000b014:	18000826 	beq	r3,zero,1000b038 <__fixdfsi+0x8c>
1000b018:	0085c83a 	sub	r2,zero,r2
1000b01c:	dfc00717 	ldw	ra,28(sp)
1000b020:	dec00804 	addi	sp,sp,32
1000b024:	f800283a 	ret
1000b028:	d8800117 	ldw	r2,4(sp)
1000b02c:	00e00034 	movhi	r3,32768
1000b030:	1005003a 	cmpeq	r2,r2,zero
1000b034:	1885c83a 	sub	r2,r3,r2
1000b038:	dfc00717 	ldw	ra,28(sp)
1000b03c:	dec00804 	addi	sp,sp,32
1000b040:	f800283a 	ret
1000b044:	0005883a 	mov	r2,zero
1000b048:	dfc00717 	ldw	ra,28(sp)
1000b04c:	dec00804 	addi	sp,sp,32
1000b050:	f800283a 	ret
1000b054:	2008907a 	slli	r4,r4,1
1000b058:	018007c4 	movi	r6,31
1000b05c:	308dc83a 	sub	r6,r6,r2
1000b060:	2188983a 	sll	r4,r4,r6
1000b064:	2884d83a 	srl	r2,r5,r2
1000b068:	2084b03a 	or	r2,r4,r2
1000b06c:	003fe806 	br	1000b010 <__alt_data_end+0xf800b010>

1000b070 <__floatunsidf>:
1000b070:	defff904 	addi	sp,sp,-28
1000b074:	dc000515 	stw	r16,20(sp)
1000b078:	dfc00615 	stw	ra,24(sp)
1000b07c:	d8000115 	stw	zero,4(sp)
1000b080:	2021883a 	mov	r16,r4
1000b084:	20001726 	beq	r4,zero,1000b0e4 <__floatunsidf+0x74>
1000b088:	008000c4 	movi	r2,3
1000b08c:	d8800015 	stw	r2,0(sp)
1000b090:	00800f04 	movi	r2,60
1000b094:	d8800215 	stw	r2,8(sp)
1000b098:	000b3f40 	call	1000b3f4 <__clzsi2>
1000b09c:	10c00744 	addi	r3,r2,29
1000b0a0:	18001816 	blt	r3,zero,1000b104 <__floatunsidf+0x94>
1000b0a4:	18002d26 	beq	r3,zero,1000b15c <__floatunsidf+0xec>
1000b0a8:	113fff44 	addi	r4,r2,-3
1000b0ac:	20002e16 	blt	r4,zero,1000b168 <__floatunsidf+0xf8>
1000b0b0:	8108983a 	sll	r4,r16,r4
1000b0b4:	0021883a 	mov	r16,zero
1000b0b8:	014007c4 	movi	r5,31
1000b0bc:	2885c83a 	sub	r2,r5,r2
1000b0c0:	dc000315 	stw	r16,12(sp)
1000b0c4:	d9000415 	stw	r4,16(sp)
1000b0c8:	d8800215 	stw	r2,8(sp)
1000b0cc:	d809883a 	mov	r4,sp
1000b0d0:	000b4a00 	call	1000b4a0 <__pack_d>
1000b0d4:	dfc00617 	ldw	ra,24(sp)
1000b0d8:	dc000517 	ldw	r16,20(sp)
1000b0dc:	dec00704 	addi	sp,sp,28
1000b0e0:	f800283a 	ret
1000b0e4:	00800084 	movi	r2,2
1000b0e8:	d809883a 	mov	r4,sp
1000b0ec:	d8800015 	stw	r2,0(sp)
1000b0f0:	000b4a00 	call	1000b4a0 <__pack_d>
1000b0f4:	dfc00617 	ldw	ra,24(sp)
1000b0f8:	dc000517 	ldw	r16,20(sp)
1000b0fc:	dec00704 	addi	sp,sp,28
1000b100:	f800283a 	ret
1000b104:	00c7c83a 	sub	r3,zero,r3
1000b108:	193ff804 	addi	r4,r3,-32
1000b10c:	20001c16 	blt	r4,zero,1000b180 <__floatunsidf+0x110>
1000b110:	000b883a 	mov	r5,zero
1000b114:	2009d7fa 	srai	r4,r4,31
1000b118:	80c6d83a 	srl	r3,r16,r3
1000b11c:	297fffc4 	addi	r5,r5,-1
1000b120:	2c20703a 	and	r16,r5,r16
1000b124:	8020c03a 	cmpne	r16,r16,zero
1000b128:	1906703a 	and	r3,r3,r4
1000b12c:	010007c4 	movi	r4,31
1000b130:	80c6b03a 	or	r3,r16,r3
1000b134:	2085c83a 	sub	r2,r4,r2
1000b138:	d809883a 	mov	r4,sp
1000b13c:	d8c00315 	stw	r3,12(sp)
1000b140:	d8000415 	stw	zero,16(sp)
1000b144:	d8800215 	stw	r2,8(sp)
1000b148:	000b4a00 	call	1000b4a0 <__pack_d>
1000b14c:	dfc00617 	ldw	ra,24(sp)
1000b150:	dc000517 	ldw	r16,20(sp)
1000b154:	dec00704 	addi	sp,sp,28
1000b158:	f800283a 	ret
1000b15c:	dc000315 	stw	r16,12(sp)
1000b160:	d8000415 	stw	zero,16(sp)
1000b164:	003fd906 	br	1000b0cc <__alt_data_end+0xf800b0cc>
1000b168:	800ad07a 	srli	r5,r16,1
1000b16c:	010007c4 	movi	r4,31
1000b170:	20c9c83a 	sub	r4,r4,r3
1000b174:	2908d83a 	srl	r4,r5,r4
1000b178:	80e0983a 	sll	r16,r16,r3
1000b17c:	003fce06 	br	1000b0b8 <__alt_data_end+0xf800b0b8>
1000b180:	01400044 	movi	r5,1
1000b184:	28ca983a 	sll	r5,r5,r3
1000b188:	003fe206 	br	1000b114 <__alt_data_end+0xf800b114>

1000b18c <udivmodsi4>:
1000b18c:	2005883a 	mov	r2,r4
1000b190:	2900182e 	bgeu	r5,r4,1000b1f4 <udivmodsi4+0x68>
1000b194:	28001716 	blt	r5,zero,1000b1f4 <udivmodsi4+0x68>
1000b198:	01000804 	movi	r4,32
1000b19c:	00c00044 	movi	r3,1
1000b1a0:	00000206 	br	1000b1ac <udivmodsi4+0x20>
1000b1a4:	20001126 	beq	r4,zero,1000b1ec <udivmodsi4+0x60>
1000b1a8:	28000516 	blt	r5,zero,1000b1c0 <udivmodsi4+0x34>
1000b1ac:	294b883a 	add	r5,r5,r5
1000b1b0:	213fffc4 	addi	r4,r4,-1
1000b1b4:	18c7883a 	add	r3,r3,r3
1000b1b8:	28bffa36 	bltu	r5,r2,1000b1a4 <__alt_data_end+0xf800b1a4>
1000b1bc:	18000b26 	beq	r3,zero,1000b1ec <udivmodsi4+0x60>
1000b1c0:	0009883a 	mov	r4,zero
1000b1c4:	11400236 	bltu	r2,r5,1000b1d0 <udivmodsi4+0x44>
1000b1c8:	1145c83a 	sub	r2,r2,r5
1000b1cc:	20c8b03a 	or	r4,r4,r3
1000b1d0:	1806d07a 	srli	r3,r3,1
1000b1d4:	280ad07a 	srli	r5,r5,1
1000b1d8:	183ffa1e 	bne	r3,zero,1000b1c4 <__alt_data_end+0xf800b1c4>
1000b1dc:	3000021e 	bne	r6,zero,1000b1e8 <udivmodsi4+0x5c>
1000b1e0:	2005883a 	mov	r2,r4
1000b1e4:	f800283a 	ret
1000b1e8:	f800283a 	ret
1000b1ec:	0009883a 	mov	r4,zero
1000b1f0:	003ffa06 	br	1000b1dc <__alt_data_end+0xf800b1dc>
1000b1f4:	00c00044 	movi	r3,1
1000b1f8:	0009883a 	mov	r4,zero
1000b1fc:	003ff106 	br	1000b1c4 <__alt_data_end+0xf800b1c4>

1000b200 <__divsi3>:
1000b200:	defffe04 	addi	sp,sp,-8
1000b204:	dfc00115 	stw	ra,4(sp)
1000b208:	dc000015 	stw	r16,0(sp)
1000b20c:	20000a16 	blt	r4,zero,1000b238 <__divsi3+0x38>
1000b210:	0021883a 	mov	r16,zero
1000b214:	28000b16 	blt	r5,zero,1000b244 <__divsi3+0x44>
1000b218:	000d883a 	mov	r6,zero
1000b21c:	000b18c0 	call	1000b18c <udivmodsi4>
1000b220:	80000126 	beq	r16,zero,1000b228 <__divsi3+0x28>
1000b224:	0085c83a 	sub	r2,zero,r2
1000b228:	dfc00117 	ldw	ra,4(sp)
1000b22c:	dc000017 	ldw	r16,0(sp)
1000b230:	dec00204 	addi	sp,sp,8
1000b234:	f800283a 	ret
1000b238:	0109c83a 	sub	r4,zero,r4
1000b23c:	04000044 	movi	r16,1
1000b240:	283ff50e 	bge	r5,zero,1000b218 <__alt_data_end+0xf800b218>
1000b244:	014bc83a 	sub	r5,zero,r5
1000b248:	8400005c 	xori	r16,r16,1
1000b24c:	003ff206 	br	1000b218 <__alt_data_end+0xf800b218>

1000b250 <__modsi3>:
1000b250:	deffff04 	addi	sp,sp,-4
1000b254:	dfc00015 	stw	ra,0(sp)
1000b258:	20000516 	blt	r4,zero,1000b270 <__modsi3+0x20>
1000b25c:	28000c16 	blt	r5,zero,1000b290 <__modsi3+0x40>
1000b260:	01800044 	movi	r6,1
1000b264:	dfc00017 	ldw	ra,0(sp)
1000b268:	dec00104 	addi	sp,sp,4
1000b26c:	000b18c1 	jmpi	1000b18c <udivmodsi4>
1000b270:	0109c83a 	sub	r4,zero,r4
1000b274:	28000b16 	blt	r5,zero,1000b2a4 <__modsi3+0x54>
1000b278:	01800044 	movi	r6,1
1000b27c:	000b18c0 	call	1000b18c <udivmodsi4>
1000b280:	0085c83a 	sub	r2,zero,r2
1000b284:	dfc00017 	ldw	ra,0(sp)
1000b288:	dec00104 	addi	sp,sp,4
1000b28c:	f800283a 	ret
1000b290:	014bc83a 	sub	r5,zero,r5
1000b294:	01800044 	movi	r6,1
1000b298:	dfc00017 	ldw	ra,0(sp)
1000b29c:	dec00104 	addi	sp,sp,4
1000b2a0:	000b18c1 	jmpi	1000b18c <udivmodsi4>
1000b2a4:	014bc83a 	sub	r5,zero,r5
1000b2a8:	003ff306 	br	1000b278 <__alt_data_end+0xf800b278>

1000b2ac <__udivsi3>:
1000b2ac:	000d883a 	mov	r6,zero
1000b2b0:	000b18c1 	jmpi	1000b18c <udivmodsi4>

1000b2b4 <__umodsi3>:
1000b2b4:	01800044 	movi	r6,1
1000b2b8:	000b18c1 	jmpi	1000b18c <udivmodsi4>

1000b2bc <__mulsi3>:
1000b2bc:	0005883a 	mov	r2,zero
1000b2c0:	20000726 	beq	r4,zero,1000b2e0 <__mulsi3+0x24>
1000b2c4:	20c0004c 	andi	r3,r4,1
1000b2c8:	2008d07a 	srli	r4,r4,1
1000b2cc:	18000126 	beq	r3,zero,1000b2d4 <__mulsi3+0x18>
1000b2d0:	1145883a 	add	r2,r2,r5
1000b2d4:	294b883a 	add	r5,r5,r5
1000b2d8:	203ffa1e 	bne	r4,zero,1000b2c4 <__alt_data_end+0xf800b2c4>
1000b2dc:	f800283a 	ret
1000b2e0:	f800283a 	ret

1000b2e4 <__muldi3>:
1000b2e4:	defff604 	addi	sp,sp,-40
1000b2e8:	dd400515 	stw	r21,20(sp)
1000b2ec:	dd000415 	stw	r20,16(sp)
1000b2f0:	257fffcc 	andi	r21,r4,65535
1000b2f4:	353fffcc 	andi	r20,r6,65535
1000b2f8:	dcc00315 	stw	r19,12(sp)
1000b2fc:	3026d43a 	srli	r19,r6,16
1000b300:	dd800615 	stw	r22,24(sp)
1000b304:	dc800215 	stw	r18,8(sp)
1000b308:	dc400115 	stw	r17,4(sp)
1000b30c:	2024d43a 	srli	r18,r4,16
1000b310:	2023883a 	mov	r17,r4
1000b314:	282d883a 	mov	r22,r5
1000b318:	a009883a 	mov	r4,r20
1000b31c:	a80b883a 	mov	r5,r21
1000b320:	dfc00915 	stw	ra,36(sp)
1000b324:	df000815 	stw	fp,32(sp)
1000b328:	ddc00715 	stw	r23,28(sp)
1000b32c:	3839883a 	mov	fp,r7
1000b330:	dc000015 	stw	r16,0(sp)
1000b334:	3021883a 	mov	r16,r6
1000b338:	000b2bc0 	call	1000b2bc <__mulsi3>
1000b33c:	a80b883a 	mov	r5,r21
1000b340:	9809883a 	mov	r4,r19
1000b344:	102f883a 	mov	r23,r2
1000b348:	000b2bc0 	call	1000b2bc <__mulsi3>
1000b34c:	a009883a 	mov	r4,r20
1000b350:	900b883a 	mov	r5,r18
1000b354:	102b883a 	mov	r21,r2
1000b358:	000b2bc0 	call	1000b2bc <__mulsi3>
1000b35c:	9809883a 	mov	r4,r19
1000b360:	900b883a 	mov	r5,r18
1000b364:	1029883a 	mov	r20,r2
1000b368:	000b2bc0 	call	1000b2bc <__mulsi3>
1000b36c:	1007883a 	mov	r3,r2
1000b370:	b804d43a 	srli	r2,r23,16
1000b374:	a549883a 	add	r4,r20,r21
1000b378:	2089883a 	add	r4,r4,r2
1000b37c:	2500022e 	bgeu	r4,r20,1000b388 <__muldi3+0xa4>
1000b380:	00800074 	movhi	r2,1
1000b384:	1887883a 	add	r3,r3,r2
1000b388:	200cd43a 	srli	r6,r4,16
1000b38c:	2004943a 	slli	r2,r4,16
1000b390:	e00b883a 	mov	r5,fp
1000b394:	8809883a 	mov	r4,r17
1000b398:	bdffffcc 	andi	r23,r23,65535
1000b39c:	19a3883a 	add	r17,r3,r6
1000b3a0:	15ef883a 	add	r23,r2,r23
1000b3a4:	000b2bc0 	call	1000b2bc <__mulsi3>
1000b3a8:	8009883a 	mov	r4,r16
1000b3ac:	b00b883a 	mov	r5,r22
1000b3b0:	1025883a 	mov	r18,r2
1000b3b4:	000b2bc0 	call	1000b2bc <__mulsi3>
1000b3b8:	9085883a 	add	r2,r18,r2
1000b3bc:	1447883a 	add	r3,r2,r17
1000b3c0:	b805883a 	mov	r2,r23
1000b3c4:	dfc00917 	ldw	ra,36(sp)
1000b3c8:	df000817 	ldw	fp,32(sp)
1000b3cc:	ddc00717 	ldw	r23,28(sp)
1000b3d0:	dd800617 	ldw	r22,24(sp)
1000b3d4:	dd400517 	ldw	r21,20(sp)
1000b3d8:	dd000417 	ldw	r20,16(sp)
1000b3dc:	dcc00317 	ldw	r19,12(sp)
1000b3e0:	dc800217 	ldw	r18,8(sp)
1000b3e4:	dc400117 	ldw	r17,4(sp)
1000b3e8:	dc000017 	ldw	r16,0(sp)
1000b3ec:	dec00a04 	addi	sp,sp,40
1000b3f0:	f800283a 	ret

1000b3f4 <__clzsi2>:
1000b3f4:	00bfffd4 	movui	r2,65535
1000b3f8:	11000b36 	bltu	r2,r4,1000b428 <__clzsi2+0x34>
1000b3fc:	00803fc4 	movi	r2,255
1000b400:	11001e2e 	bgeu	r2,r4,1000b47c <__clzsi2+0x88>
1000b404:	00c00204 	movi	r3,8
1000b408:	20c8d83a 	srl	r4,r4,r3
1000b40c:	00c40074 	movhi	r3,4097
1000b410:	18faaf04 	addi	r3,r3,-5444
1000b414:	00800604 	movi	r2,24
1000b418:	1909883a 	add	r4,r3,r4
1000b41c:	20c00003 	ldbu	r3,0(r4)
1000b420:	10c5c83a 	sub	r2,r2,r3
1000b424:	f800283a 	ret
1000b428:	00804034 	movhi	r2,256
1000b42c:	10bfffc4 	addi	r2,r2,-1
1000b430:	11000936 	bltu	r2,r4,1000b458 <__clzsi2+0x64>
1000b434:	00800404 	movi	r2,16
1000b438:	1007883a 	mov	r3,r2
1000b43c:	20c8d83a 	srl	r4,r4,r3
1000b440:	00c40074 	movhi	r3,4097
1000b444:	18faaf04 	addi	r3,r3,-5444
1000b448:	1909883a 	add	r4,r3,r4
1000b44c:	20c00003 	ldbu	r3,0(r4)
1000b450:	10c5c83a 	sub	r2,r2,r3
1000b454:	f800283a 	ret
1000b458:	00c00604 	movi	r3,24
1000b45c:	20c8d83a 	srl	r4,r4,r3
1000b460:	00c40074 	movhi	r3,4097
1000b464:	18faaf04 	addi	r3,r3,-5444
1000b468:	00800204 	movi	r2,8
1000b46c:	1909883a 	add	r4,r3,r4
1000b470:	20c00003 	ldbu	r3,0(r4)
1000b474:	10c5c83a 	sub	r2,r2,r3
1000b478:	f800283a 	ret
1000b47c:	0007883a 	mov	r3,zero
1000b480:	20c8d83a 	srl	r4,r4,r3
1000b484:	00c40074 	movhi	r3,4097
1000b488:	18faaf04 	addi	r3,r3,-5444
1000b48c:	00800804 	movi	r2,32
1000b490:	1909883a 	add	r4,r3,r4
1000b494:	20c00003 	ldbu	r3,0(r4)
1000b498:	10c5c83a 	sub	r2,r2,r3
1000b49c:	f800283a 	ret

1000b4a0 <__pack_d>:
1000b4a0:	20800017 	ldw	r2,0(r4)
1000b4a4:	defff804 	addi	sp,sp,-32
1000b4a8:	dcc00315 	stw	r19,12(sp)
1000b4ac:	dc800215 	stw	r18,8(sp)
1000b4b0:	dfc00715 	stw	ra,28(sp)
1000b4b4:	dd800615 	stw	r22,24(sp)
1000b4b8:	dd400515 	stw	r21,20(sp)
1000b4bc:	dd000415 	stw	r20,16(sp)
1000b4c0:	dc400115 	stw	r17,4(sp)
1000b4c4:	dc000015 	stw	r16,0(sp)
1000b4c8:	04800044 	movi	r18,1
1000b4cc:	24400317 	ldw	r17,12(r4)
1000b4d0:	24000417 	ldw	r16,16(r4)
1000b4d4:	24c00117 	ldw	r19,4(r4)
1000b4d8:	9080422e 	bgeu	r18,r2,1000b5e4 <__pack_d+0x144>
1000b4dc:	00c00104 	movi	r3,4
1000b4e0:	10c03c26 	beq	r2,r3,1000b5d4 <__pack_d+0x134>
1000b4e4:	00c00084 	movi	r3,2
1000b4e8:	10c01926 	beq	r2,r3,1000b550 <__pack_d+0xb0>
1000b4ec:	8c04b03a 	or	r2,r17,r16
1000b4f0:	10001726 	beq	r2,zero,1000b550 <__pack_d+0xb0>
1000b4f4:	21000217 	ldw	r4,8(r4)
1000b4f8:	00bf0084 	movi	r2,-1022
1000b4fc:	20804016 	blt	r4,r2,1000b600 <__pack_d+0x160>
1000b500:	0080ffc4 	movi	r2,1023
1000b504:	11003316 	blt	r2,r4,1000b5d4 <__pack_d+0x134>
1000b508:	88803fcc 	andi	r2,r17,255
1000b50c:	00c02004 	movi	r3,128
1000b510:	10c02926 	beq	r2,r3,1000b5b8 <__pack_d+0x118>
1000b514:	88801fc4 	addi	r2,r17,127
1000b518:	1463803a 	cmpltu	r17,r2,r17
1000b51c:	8c21883a 	add	r16,r17,r16
1000b520:	1023883a 	mov	r17,r2
1000b524:	00880034 	movhi	r2,8192
1000b528:	10bfffc4 	addi	r2,r2,-1
1000b52c:	14001c36 	bltu	r2,r16,1000b5a0 <__pack_d+0x100>
1000b530:	2100ffc4 	addi	r4,r4,1023
1000b534:	8006963a 	slli	r3,r16,24
1000b538:	8804d23a 	srli	r2,r17,8
1000b53c:	8020913a 	slli	r16,r16,4
1000b540:	2101ffcc 	andi	r4,r4,2047
1000b544:	1884b03a 	or	r2,r3,r2
1000b548:	8020d33a 	srli	r16,r16,12
1000b54c:	00000306 	br	1000b55c <__pack_d+0xbc>
1000b550:	0009883a 	mov	r4,zero
1000b554:	0005883a 	mov	r2,zero
1000b558:	0021883a 	mov	r16,zero
1000b55c:	2008953a 	slli	r4,r4,20
1000b560:	982697fa 	slli	r19,r19,31
1000b564:	00c00434 	movhi	r3,16
1000b568:	18ffffc4 	addi	r3,r3,-1
1000b56c:	80e0703a 	and	r16,r16,r3
1000b570:	8106b03a 	or	r3,r16,r4
1000b574:	1cc6b03a 	or	r3,r3,r19
1000b578:	dfc00717 	ldw	ra,28(sp)
1000b57c:	dd800617 	ldw	r22,24(sp)
1000b580:	dd400517 	ldw	r21,20(sp)
1000b584:	dd000417 	ldw	r20,16(sp)
1000b588:	dcc00317 	ldw	r19,12(sp)
1000b58c:	dc800217 	ldw	r18,8(sp)
1000b590:	dc400117 	ldw	r17,4(sp)
1000b594:	dc000017 	ldw	r16,0(sp)
1000b598:	dec00804 	addi	sp,sp,32
1000b59c:	f800283a 	ret
1000b5a0:	800697fa 	slli	r3,r16,31
1000b5a4:	8804d07a 	srli	r2,r17,1
1000b5a8:	21010004 	addi	r4,r4,1024
1000b5ac:	8020d07a 	srli	r16,r16,1
1000b5b0:	18a2b03a 	or	r17,r3,r2
1000b5b4:	003fdf06 	br	1000b534 <__alt_data_end+0xf800b534>
1000b5b8:	88c0400c 	andi	r3,r17,256
1000b5bc:	183fd926 	beq	r3,zero,1000b524 <__alt_data_end+0xf800b524>
1000b5c0:	8885883a 	add	r2,r17,r2
1000b5c4:	1463803a 	cmpltu	r17,r2,r17
1000b5c8:	8c21883a 	add	r16,r17,r16
1000b5cc:	1023883a 	mov	r17,r2
1000b5d0:	003fd406 	br	1000b524 <__alt_data_end+0xf800b524>
1000b5d4:	0101ffc4 	movi	r4,2047
1000b5d8:	0005883a 	mov	r2,zero
1000b5dc:	0021883a 	mov	r16,zero
1000b5e0:	003fde06 	br	1000b55c <__alt_data_end+0xf800b55c>
1000b5e4:	84000234 	orhi	r16,r16,8
1000b5e8:	00c00434 	movhi	r3,16
1000b5ec:	18ffffc4 	addi	r3,r3,-1
1000b5f0:	8805883a 	mov	r2,r17
1000b5f4:	80e0703a 	and	r16,r16,r3
1000b5f8:	0101ffc4 	movi	r4,2047
1000b5fc:	003fd706 	br	1000b55c <__alt_data_end+0xf800b55c>
1000b600:	1129c83a 	sub	r20,r2,r4
1000b604:	00800e04 	movi	r2,56
1000b608:	15002716 	blt	r2,r20,1000b6a8 <__pack_d+0x208>
1000b60c:	800b883a 	mov	r5,r16
1000b610:	a00d883a 	mov	r6,r20
1000b614:	8809883a 	mov	r4,r17
1000b618:	000b8980 	call	1000b898 <__lshrdi3>
1000b61c:	9009883a 	mov	r4,r18
1000b620:	000b883a 	mov	r5,zero
1000b624:	a00d883a 	mov	r6,r20
1000b628:	102d883a 	mov	r22,r2
1000b62c:	182b883a 	mov	r21,r3
1000b630:	000b8dc0 	call	1000b8dc <__ashldi3>
1000b634:	1009003a 	cmpeq	r4,r2,zero
1000b638:	1907c83a 	sub	r3,r3,r4
1000b63c:	10bfffc4 	addi	r2,r2,-1
1000b640:	1c20703a 	and	r16,r3,r16
1000b644:	1444703a 	and	r2,r2,r17
1000b648:	1404b03a 	or	r2,r2,r16
1000b64c:	1004c03a 	cmpne	r2,r2,zero
1000b650:	1584b03a 	or	r2,r2,r22
1000b654:	11003fcc 	andi	r4,r2,255
1000b658:	01402004 	movi	r5,128
1000b65c:	a807883a 	mov	r3,r21
1000b660:	2140131e 	bne	r4,r5,1000b6b0 <__pack_d+0x210>
1000b664:	1140400c 	andi	r5,r2,256
1000b668:	28000426 	beq	r5,zero,1000b67c <__pack_d+0x1dc>
1000b66c:	1109883a 	add	r4,r2,r4
1000b670:	2085803a 	cmpltu	r2,r4,r2
1000b674:	1547883a 	add	r3,r2,r21
1000b678:	2005883a 	mov	r2,r4
1000b67c:	1808963a 	slli	r4,r3,24
1000b680:	1004d23a 	srli	r2,r2,8
1000b684:	1820913a 	slli	r16,r3,4
1000b688:	01440034 	movhi	r5,4096
1000b68c:	297fffc4 	addi	r5,r5,-1
1000b690:	2084b03a 	or	r2,r4,r2
1000b694:	8020d33a 	srli	r16,r16,12
1000b698:	01000044 	movi	r4,1
1000b69c:	28ffaf36 	bltu	r5,r3,1000b55c <__alt_data_end+0xf800b55c>
1000b6a0:	0009883a 	mov	r4,zero
1000b6a4:	003fad06 	br	1000b55c <__alt_data_end+0xf800b55c>
1000b6a8:	0005883a 	mov	r2,zero
1000b6ac:	0007883a 	mov	r3,zero
1000b6b0:	11001fc4 	addi	r4,r2,127
1000b6b4:	2085803a 	cmpltu	r2,r4,r2
1000b6b8:	10c7883a 	add	r3,r2,r3
1000b6bc:	2005883a 	mov	r2,r4
1000b6c0:	003fee06 	br	1000b67c <__alt_data_end+0xf800b67c>

1000b6c4 <__unpack_d>:
1000b6c4:	21800117 	ldw	r6,4(r4)
1000b6c8:	20c00017 	ldw	r3,0(r4)
1000b6cc:	3004d7fa 	srli	r2,r6,31
1000b6d0:	3008d53a 	srli	r4,r6,20
1000b6d4:	28800115 	stw	r2,4(r5)
1000b6d8:	2101ffcc 	andi	r4,r4,2047
1000b6dc:	00800434 	movhi	r2,16
1000b6e0:	10bfffc4 	addi	r2,r2,-1
1000b6e4:	3084703a 	and	r2,r6,r2
1000b6e8:	20001a1e 	bne	r4,zero,1000b754 <__unpack_d+0x90>
1000b6ec:	1888b03a 	or	r4,r3,r2
1000b6f0:	20002626 	beq	r4,zero,1000b78c <__unpack_d+0xc8>
1000b6f4:	1808d63a 	srli	r4,r3,24
1000b6f8:	1004923a 	slli	r2,r2,8
1000b6fc:	01bf0084 	movi	r6,-1022
1000b700:	29800215 	stw	r6,8(r5)
1000b704:	2084b03a 	or	r2,r4,r2
1000b708:	010000c4 	movi	r4,3
1000b70c:	29000015 	stw	r4,0(r5)
1000b710:	02040034 	movhi	r8,4096
1000b714:	423fffc4 	addi	r8,r8,-1
1000b718:	1806923a 	slli	r3,r3,8
1000b71c:	40801836 	bltu	r8,r2,1000b780 <__unpack_d+0xbc>
1000b720:	013f0044 	movi	r4,-1023
1000b724:	18cd883a 	add	r6,r3,r3
1000b728:	30c7803a 	cmpltu	r3,r6,r3
1000b72c:	1085883a 	add	r2,r2,r2
1000b730:	1885883a 	add	r2,r3,r2
1000b734:	200f883a 	mov	r7,r4
1000b738:	3007883a 	mov	r3,r6
1000b73c:	213fffc4 	addi	r4,r4,-1
1000b740:	40bff82e 	bgeu	r8,r2,1000b724 <__alt_data_end+0xf800b724>
1000b744:	29c00215 	stw	r7,8(r5)
1000b748:	28c00315 	stw	r3,12(r5)
1000b74c:	28800415 	stw	r2,16(r5)
1000b750:	f800283a 	ret
1000b754:	01c1ffc4 	movi	r7,2047
1000b758:	21c00f26 	beq	r4,r7,1000b798 <__unpack_d+0xd4>
1000b75c:	180cd63a 	srli	r6,r3,24
1000b760:	1004923a 	slli	r2,r2,8
1000b764:	213f0044 	addi	r4,r4,-1023
1000b768:	1806923a 	slli	r3,r3,8
1000b76c:	3084b03a 	or	r2,r6,r2
1000b770:	29000215 	stw	r4,8(r5)
1000b774:	010000c4 	movi	r4,3
1000b778:	10840034 	orhi	r2,r2,4096
1000b77c:	29000015 	stw	r4,0(r5)
1000b780:	28c00315 	stw	r3,12(r5)
1000b784:	28800415 	stw	r2,16(r5)
1000b788:	f800283a 	ret
1000b78c:	00800084 	movi	r2,2
1000b790:	28800015 	stw	r2,0(r5)
1000b794:	f800283a 	ret
1000b798:	1888b03a 	or	r4,r3,r2
1000b79c:	20000526 	beq	r4,zero,1000b7b4 <__unpack_d+0xf0>
1000b7a0:	3180022c 	andhi	r6,r6,8
1000b7a4:	30000626 	beq	r6,zero,1000b7c0 <__unpack_d+0xfc>
1000b7a8:	01000044 	movi	r4,1
1000b7ac:	29000015 	stw	r4,0(r5)
1000b7b0:	003ff306 	br	1000b780 <__alt_data_end+0xf800b780>
1000b7b4:	00800104 	movi	r2,4
1000b7b8:	28800015 	stw	r2,0(r5)
1000b7bc:	f800283a 	ret
1000b7c0:	28000015 	stw	zero,0(r5)
1000b7c4:	003fee06 	br	1000b780 <__alt_data_end+0xf800b780>

1000b7c8 <__fpcmp_parts_d>:
1000b7c8:	20c00017 	ldw	r3,0(r4)
1000b7cc:	00800044 	movi	r2,1
1000b7d0:	10c0142e 	bgeu	r2,r3,1000b824 <__fpcmp_parts_d+0x5c>
1000b7d4:	29800017 	ldw	r6,0(r5)
1000b7d8:	1180122e 	bgeu	r2,r6,1000b824 <__fpcmp_parts_d+0x5c>
1000b7dc:	01c00104 	movi	r7,4
1000b7e0:	19c02826 	beq	r3,r7,1000b884 <__fpcmp_parts_d+0xbc>
1000b7e4:	31c00926 	beq	r6,r7,1000b80c <__fpcmp_parts_d+0x44>
1000b7e8:	01c00084 	movi	r7,2
1000b7ec:	19c00626 	beq	r3,r7,1000b808 <__fpcmp_parts_d+0x40>
1000b7f0:	31c00a26 	beq	r6,r7,1000b81c <__fpcmp_parts_d+0x54>
1000b7f4:	20c00117 	ldw	r3,4(r4)
1000b7f8:	29800117 	ldw	r6,4(r5)
1000b7fc:	19800b26 	beq	r3,r6,1000b82c <__fpcmp_parts_d+0x64>
1000b800:	1800041e 	bne	r3,zero,1000b814 <__fpcmp_parts_d+0x4c>
1000b804:	f800283a 	ret
1000b808:	30c01a26 	beq	r6,r3,1000b874 <__fpcmp_parts_d+0xac>
1000b80c:	28800117 	ldw	r2,4(r5)
1000b810:	1000041e 	bne	r2,zero,1000b824 <__fpcmp_parts_d+0x5c>
1000b814:	00bfffc4 	movi	r2,-1
1000b818:	f800283a 	ret
1000b81c:	20800117 	ldw	r2,4(r4)
1000b820:	103ffc1e 	bne	r2,zero,1000b814 <__alt_data_end+0xf800b814>
1000b824:	00800044 	movi	r2,1
1000b828:	f800283a 	ret
1000b82c:	21c00217 	ldw	r7,8(r4)
1000b830:	29800217 	ldw	r6,8(r5)
1000b834:	31c0020e 	bge	r6,r7,1000b840 <__fpcmp_parts_d+0x78>
1000b838:	183ff61e 	bne	r3,zero,1000b814 <__alt_data_end+0xf800b814>
1000b83c:	f800283a 	ret
1000b840:	39800a16 	blt	r7,r6,1000b86c <__fpcmp_parts_d+0xa4>
1000b844:	20800417 	ldw	r2,16(r4)
1000b848:	29800417 	ldw	r6,16(r5)
1000b84c:	21c00317 	ldw	r7,12(r4)
1000b850:	29000317 	ldw	r4,12(r5)
1000b854:	30800936 	bltu	r6,r2,1000b87c <__fpcmp_parts_d+0xb4>
1000b858:	1180011e 	bne	r2,r6,1000b860 <__fpcmp_parts_d+0x98>
1000b85c:	21c00736 	bltu	r4,r7,1000b87c <__fpcmp_parts_d+0xb4>
1000b860:	11800236 	bltu	r2,r6,1000b86c <__fpcmp_parts_d+0xa4>
1000b864:	3080031e 	bne	r6,r2,1000b874 <__fpcmp_parts_d+0xac>
1000b868:	3900022e 	bgeu	r7,r4,1000b874 <__fpcmp_parts_d+0xac>
1000b86c:	183fe926 	beq	r3,zero,1000b814 <__alt_data_end+0xf800b814>
1000b870:	003fec06 	br	1000b824 <__alt_data_end+0xf800b824>
1000b874:	0005883a 	mov	r2,zero
1000b878:	f800283a 	ret
1000b87c:	183fe926 	beq	r3,zero,1000b824 <__alt_data_end+0xf800b824>
1000b880:	003fe406 	br	1000b814 <__alt_data_end+0xf800b814>
1000b884:	30ffe51e 	bne	r6,r3,1000b81c <__alt_data_end+0xf800b81c>
1000b888:	28c00117 	ldw	r3,4(r5)
1000b88c:	20800117 	ldw	r2,4(r4)
1000b890:	1885c83a 	sub	r2,r3,r2
1000b894:	f800283a 	ret

1000b898 <__lshrdi3>:
1000b898:	2005883a 	mov	r2,r4
1000b89c:	2807883a 	mov	r3,r5
1000b8a0:	30000826 	beq	r6,zero,1000b8c4 <__lshrdi3+0x2c>
1000b8a4:	01000804 	movi	r4,32
1000b8a8:	2189c83a 	sub	r4,r4,r6
1000b8ac:	0100060e 	bge	zero,r4,1000b8c8 <__lshrdi3+0x30>
1000b8b0:	1184d83a 	srl	r2,r2,r6
1000b8b4:	2908983a 	sll	r4,r5,r4
1000b8b8:	298cd83a 	srl	r6,r5,r6
1000b8bc:	2084b03a 	or	r2,r4,r2
1000b8c0:	3007883a 	mov	r3,r6
1000b8c4:	f800283a 	ret
1000b8c8:	0105c83a 	sub	r2,zero,r4
1000b8cc:	000d883a 	mov	r6,zero
1000b8d0:	2884d83a 	srl	r2,r5,r2
1000b8d4:	3007883a 	mov	r3,r6
1000b8d8:	003ffa06 	br	1000b8c4 <__alt_data_end+0xf800b8c4>

1000b8dc <__ashldi3>:
1000b8dc:	2005883a 	mov	r2,r4
1000b8e0:	2807883a 	mov	r3,r5
1000b8e4:	30000826 	beq	r6,zero,1000b908 <__ashldi3+0x2c>
1000b8e8:	01000804 	movi	r4,32
1000b8ec:	2189c83a 	sub	r4,r4,r6
1000b8f0:	0100060e 	bge	zero,r4,1000b90c <__ashldi3+0x30>
1000b8f4:	1108d83a 	srl	r4,r2,r4
1000b8f8:	2986983a 	sll	r3,r5,r6
1000b8fc:	118c983a 	sll	r6,r2,r6
1000b900:	20c6b03a 	or	r3,r4,r3
1000b904:	3005883a 	mov	r2,r6
1000b908:	f800283a 	ret
1000b90c:	0107c83a 	sub	r3,zero,r4
1000b910:	000d883a 	mov	r6,zero
1000b914:	10c6983a 	sll	r3,r2,r3
1000b918:	3005883a 	mov	r2,r6
1000b91c:	003ffa06 	br	1000b908 <__alt_data_end+0xf800b908>

1000b920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000b920:	defffe04 	addi	sp,sp,-8
1000b924:	dfc00115 	stw	ra,4(sp)
1000b928:	df000015 	stw	fp,0(sp)
1000b92c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000b930:	00840074 	movhi	r2,4097
1000b934:	10818d04 	addi	r2,r2,1588
1000b938:	10800017 	ldw	r2,0(r2)
1000b93c:	10000526 	beq	r2,zero,1000b954 <alt_get_errno+0x34>
1000b940:	00840074 	movhi	r2,4097
1000b944:	10818d04 	addi	r2,r2,1588
1000b948:	10800017 	ldw	r2,0(r2)
1000b94c:	103ee83a 	callr	r2
1000b950:	00000206 	br	1000b95c <alt_get_errno+0x3c>
1000b954:	00840074 	movhi	r2,4097
1000b958:	10883004 	addi	r2,r2,8384
}
1000b95c:	e037883a 	mov	sp,fp
1000b960:	dfc00117 	ldw	ra,4(sp)
1000b964:	df000017 	ldw	fp,0(sp)
1000b968:	dec00204 	addi	sp,sp,8
1000b96c:	f800283a 	ret

1000b970 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000b970:	defffb04 	addi	sp,sp,-20
1000b974:	dfc00415 	stw	ra,16(sp)
1000b978:	df000315 	stw	fp,12(sp)
1000b97c:	df000304 	addi	fp,sp,12
1000b980:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000b984:	e0bfff17 	ldw	r2,-4(fp)
1000b988:	10000716 	blt	r2,zero,1000b9a8 <close+0x38>
1000b98c:	e13fff17 	ldw	r4,-4(fp)
1000b990:	01400304 	movi	r5,12
1000b994:	000b2bc0 	call	1000b2bc <__mulsi3>
1000b998:	00c40074 	movhi	r3,4097
1000b99c:	18fd0b04 	addi	r3,r3,-3028
1000b9a0:	10c5883a 	add	r2,r2,r3
1000b9a4:	00000106 	br	1000b9ac <close+0x3c>
1000b9a8:	0005883a 	mov	r2,zero
1000b9ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000b9b0:	e0bffd17 	ldw	r2,-12(fp)
1000b9b4:	10001826 	beq	r2,zero,1000ba18 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000b9b8:	e0bffd17 	ldw	r2,-12(fp)
1000b9bc:	10800017 	ldw	r2,0(r2)
1000b9c0:	10800417 	ldw	r2,16(r2)
1000b9c4:	10000626 	beq	r2,zero,1000b9e0 <close+0x70>
1000b9c8:	e0bffd17 	ldw	r2,-12(fp)
1000b9cc:	10800017 	ldw	r2,0(r2)
1000b9d0:	10800417 	ldw	r2,16(r2)
1000b9d4:	e13ffd17 	ldw	r4,-12(fp)
1000b9d8:	103ee83a 	callr	r2
1000b9dc:	00000106 	br	1000b9e4 <close+0x74>
1000b9e0:	0005883a 	mov	r2,zero
1000b9e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000b9e8:	e13fff17 	ldw	r4,-4(fp)
1000b9ec:	000c0680 	call	1000c068 <alt_release_fd>
    if (rval < 0)
1000b9f0:	e0bffe17 	ldw	r2,-8(fp)
1000b9f4:	1000060e 	bge	r2,zero,1000ba10 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1000b9f8:	000b9200 	call	1000b920 <alt_get_errno>
1000b9fc:	e0fffe17 	ldw	r3,-8(fp)
1000ba00:	00c7c83a 	sub	r3,zero,r3
1000ba04:	10c00015 	stw	r3,0(r2)
      return -1;
1000ba08:	00bfffc4 	movi	r2,-1
1000ba0c:	00000606 	br	1000ba28 <close+0xb8>
    }
    return 0;
1000ba10:	0005883a 	mov	r2,zero
1000ba14:	00000406 	br	1000ba28 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ba18:	000b9200 	call	1000b920 <alt_get_errno>
1000ba1c:	00c01444 	movi	r3,81
1000ba20:	10c00015 	stw	r3,0(r2)
    return -1;
1000ba24:	00bfffc4 	movi	r2,-1
  }
}
1000ba28:	e037883a 	mov	sp,fp
1000ba2c:	dfc00117 	ldw	ra,4(sp)
1000ba30:	df000017 	ldw	fp,0(sp)
1000ba34:	dec00204 	addi	sp,sp,8
1000ba38:	f800283a 	ret

1000ba3c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000ba3c:	defffc04 	addi	sp,sp,-16
1000ba40:	df000315 	stw	fp,12(sp)
1000ba44:	df000304 	addi	fp,sp,12
1000ba48:	e13ffd15 	stw	r4,-12(fp)
1000ba4c:	e17ffe15 	stw	r5,-8(fp)
1000ba50:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000ba54:	e0bfff17 	ldw	r2,-4(fp)
}
1000ba58:	e037883a 	mov	sp,fp
1000ba5c:	df000017 	ldw	fp,0(sp)
1000ba60:	dec00104 	addi	sp,sp,4
1000ba64:	f800283a 	ret

1000ba68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ba68:	defffe04 	addi	sp,sp,-8
1000ba6c:	dfc00115 	stw	ra,4(sp)
1000ba70:	df000015 	stw	fp,0(sp)
1000ba74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ba78:	00840074 	movhi	r2,4097
1000ba7c:	10818d04 	addi	r2,r2,1588
1000ba80:	10800017 	ldw	r2,0(r2)
1000ba84:	10000526 	beq	r2,zero,1000ba9c <alt_get_errno+0x34>
1000ba88:	00840074 	movhi	r2,4097
1000ba8c:	10818d04 	addi	r2,r2,1588
1000ba90:	10800017 	ldw	r2,0(r2)
1000ba94:	103ee83a 	callr	r2
1000ba98:	00000206 	br	1000baa4 <alt_get_errno+0x3c>
1000ba9c:	00840074 	movhi	r2,4097
1000baa0:	10883004 	addi	r2,r2,8384
}
1000baa4:	e037883a 	mov	sp,fp
1000baa8:	dfc00117 	ldw	ra,4(sp)
1000baac:	df000017 	ldw	fp,0(sp)
1000bab0:	dec00204 	addi	sp,sp,8
1000bab4:	f800283a 	ret

1000bab8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000bab8:	defffb04 	addi	sp,sp,-20
1000babc:	dfc00415 	stw	ra,16(sp)
1000bac0:	df000315 	stw	fp,12(sp)
1000bac4:	df000304 	addi	fp,sp,12
1000bac8:	e13ffe15 	stw	r4,-8(fp)
1000bacc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000bad0:	e0bffe17 	ldw	r2,-8(fp)
1000bad4:	10000716 	blt	r2,zero,1000baf4 <fstat+0x3c>
1000bad8:	e13ffe17 	ldw	r4,-8(fp)
1000badc:	01400304 	movi	r5,12
1000bae0:	000b2bc0 	call	1000b2bc <__mulsi3>
1000bae4:	00c40074 	movhi	r3,4097
1000bae8:	18fd0b04 	addi	r3,r3,-3028
1000baec:	10c5883a 	add	r2,r2,r3
1000baf0:	00000106 	br	1000baf8 <fstat+0x40>
1000baf4:	0005883a 	mov	r2,zero
1000baf8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000bafc:	e0bffd17 	ldw	r2,-12(fp)
1000bb00:	10001026 	beq	r2,zero,1000bb44 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000bb04:	e0bffd17 	ldw	r2,-12(fp)
1000bb08:	10800017 	ldw	r2,0(r2)
1000bb0c:	10800817 	ldw	r2,32(r2)
1000bb10:	10000726 	beq	r2,zero,1000bb30 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
1000bb14:	e0bffd17 	ldw	r2,-12(fp)
1000bb18:	10800017 	ldw	r2,0(r2)
1000bb1c:	10800817 	ldw	r2,32(r2)
1000bb20:	e13ffd17 	ldw	r4,-12(fp)
1000bb24:	e17fff17 	ldw	r5,-4(fp)
1000bb28:	103ee83a 	callr	r2
1000bb2c:	00000906 	br	1000bb54 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000bb30:	e0bfff17 	ldw	r2,-4(fp)
1000bb34:	00c80004 	movi	r3,8192
1000bb38:	10c00115 	stw	r3,4(r2)
      return 0;
1000bb3c:	0005883a 	mov	r2,zero
1000bb40:	00000406 	br	1000bb54 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000bb44:	000ba680 	call	1000ba68 <alt_get_errno>
1000bb48:	00c01444 	movi	r3,81
1000bb4c:	10c00015 	stw	r3,0(r2)
    return -1;
1000bb50:	00bfffc4 	movi	r2,-1
  }
}
1000bb54:	e037883a 	mov	sp,fp
1000bb58:	dfc00117 	ldw	ra,4(sp)
1000bb5c:	df000017 	ldw	fp,0(sp)
1000bb60:	dec00204 	addi	sp,sp,8
1000bb64:	f800283a 	ret

1000bb68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000bb68:	defffe04 	addi	sp,sp,-8
1000bb6c:	dfc00115 	stw	ra,4(sp)
1000bb70:	df000015 	stw	fp,0(sp)
1000bb74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000bb78:	00840074 	movhi	r2,4097
1000bb7c:	10818d04 	addi	r2,r2,1588
1000bb80:	10800017 	ldw	r2,0(r2)
1000bb84:	10000526 	beq	r2,zero,1000bb9c <alt_get_errno+0x34>
1000bb88:	00840074 	movhi	r2,4097
1000bb8c:	10818d04 	addi	r2,r2,1588
1000bb90:	10800017 	ldw	r2,0(r2)
1000bb94:	103ee83a 	callr	r2
1000bb98:	00000206 	br	1000bba4 <alt_get_errno+0x3c>
1000bb9c:	00840074 	movhi	r2,4097
1000bba0:	10883004 	addi	r2,r2,8384
}
1000bba4:	e037883a 	mov	sp,fp
1000bba8:	dfc00117 	ldw	ra,4(sp)
1000bbac:	df000017 	ldw	fp,0(sp)
1000bbb0:	dec00204 	addi	sp,sp,8
1000bbb4:	f800283a 	ret

1000bbb8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000bbb8:	deffed04 	addi	sp,sp,-76
1000bbbc:	dfc01215 	stw	ra,72(sp)
1000bbc0:	df001115 	stw	fp,68(sp)
1000bbc4:	df001104 	addi	fp,sp,68
1000bbc8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000bbcc:	e0bfff17 	ldw	r2,-4(fp)
1000bbd0:	10000716 	blt	r2,zero,1000bbf0 <isatty+0x38>
1000bbd4:	e13fff17 	ldw	r4,-4(fp)
1000bbd8:	01400304 	movi	r5,12
1000bbdc:	000b2bc0 	call	1000b2bc <__mulsi3>
1000bbe0:	00c40074 	movhi	r3,4097
1000bbe4:	18fd0b04 	addi	r3,r3,-3028
1000bbe8:	10c5883a 	add	r2,r2,r3
1000bbec:	00000106 	br	1000bbf4 <isatty+0x3c>
1000bbf0:	0005883a 	mov	r2,zero
1000bbf4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000bbf8:	e0bfef17 	ldw	r2,-68(fp)
1000bbfc:	10000e26 	beq	r2,zero,1000bc38 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000bc00:	e0bfef17 	ldw	r2,-68(fp)
1000bc04:	10800017 	ldw	r2,0(r2)
1000bc08:	10800817 	ldw	r2,32(r2)
1000bc0c:	1000021e 	bne	r2,zero,1000bc18 <isatty+0x60>
    {
      return 1;
1000bc10:	00800044 	movi	r2,1
1000bc14:	00000c06 	br	1000bc48 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000bc18:	e0bff004 	addi	r2,fp,-64
1000bc1c:	e13fff17 	ldw	r4,-4(fp)
1000bc20:	100b883a 	mov	r5,r2
1000bc24:	000bab80 	call	1000bab8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000bc28:	e0bff117 	ldw	r2,-60(fp)
1000bc2c:	10880020 	cmpeqi	r2,r2,8192
1000bc30:	10803fcc 	andi	r2,r2,255
1000bc34:	00000406 	br	1000bc48 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000bc38:	000bb680 	call	1000bb68 <alt_get_errno>
1000bc3c:	00c01444 	movi	r3,81
1000bc40:	10c00015 	stw	r3,0(r2)
    return 0;
1000bc44:	0005883a 	mov	r2,zero
  }
}
1000bc48:	e037883a 	mov	sp,fp
1000bc4c:	dfc00117 	ldw	ra,4(sp)
1000bc50:	df000017 	ldw	fp,0(sp)
1000bc54:	dec00204 	addi	sp,sp,8
1000bc58:	f800283a 	ret

1000bc5c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000bc5c:	defffc04 	addi	sp,sp,-16
1000bc60:	df000315 	stw	fp,12(sp)
1000bc64:	df000304 	addi	fp,sp,12
1000bc68:	e13ffd15 	stw	r4,-12(fp)
1000bc6c:	e17ffe15 	stw	r5,-8(fp)
1000bc70:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000bc74:	e0fffe17 	ldw	r3,-8(fp)
1000bc78:	e0bffd17 	ldw	r2,-12(fp)
1000bc7c:	18800e26 	beq	r3,r2,1000bcb8 <alt_load_section+0x5c>
  {
    while( to != end )
1000bc80:	00000a06 	br	1000bcac <alt_load_section+0x50>
    {
      *to++ = *from++;
1000bc84:	e0bffd17 	ldw	r2,-12(fp)
1000bc88:	10c00017 	ldw	r3,0(r2)
1000bc8c:	e0bffe17 	ldw	r2,-8(fp)
1000bc90:	10c00015 	stw	r3,0(r2)
1000bc94:	e0bffe17 	ldw	r2,-8(fp)
1000bc98:	10800104 	addi	r2,r2,4
1000bc9c:	e0bffe15 	stw	r2,-8(fp)
1000bca0:	e0bffd17 	ldw	r2,-12(fp)
1000bca4:	10800104 	addi	r2,r2,4
1000bca8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000bcac:	e0fffe17 	ldw	r3,-8(fp)
1000bcb0:	e0bfff17 	ldw	r2,-4(fp)
1000bcb4:	18bff31e 	bne	r3,r2,1000bc84 <__alt_data_end+0xf800bc84>
    {
      *to++ = *from++;
    }
  }
}
1000bcb8:	e037883a 	mov	sp,fp
1000bcbc:	df000017 	ldw	fp,0(sp)
1000bcc0:	dec00104 	addi	sp,sp,4
1000bcc4:	f800283a 	ret

1000bcc8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000bcc8:	defffe04 	addi	sp,sp,-8
1000bccc:	dfc00115 	stw	ra,4(sp)
1000bcd0:	df000015 	stw	fp,0(sp)
1000bcd4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000bcd8:	01040074 	movhi	r4,4097
1000bcdc:	21019204 	addi	r4,r4,1608
1000bce0:	01440074 	movhi	r5,4097
1000bce4:	297afc04 	addi	r5,r5,-5136
1000bce8:	01840074 	movhi	r6,4097
1000bcec:	31819204 	addi	r6,r6,1608
1000bcf0:	000bc5c0 	call	1000bc5c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000bcf4:	01040034 	movhi	r4,4096
1000bcf8:	21000804 	addi	r4,r4,32
1000bcfc:	01440034 	movhi	r5,4096
1000bd00:	29400804 	addi	r5,r5,32
1000bd04:	01840034 	movhi	r6,4096
1000bd08:	31806e04 	addi	r6,r6,440
1000bd0c:	000bc5c0 	call	1000bc5c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000bd10:	01040074 	movhi	r4,4097
1000bd14:	21385404 	addi	r4,r4,-7856
1000bd18:	01440074 	movhi	r5,4097
1000bd1c:	29785404 	addi	r5,r5,-7856
1000bd20:	01840074 	movhi	r6,4097
1000bd24:	31bafc04 	addi	r6,r6,-5136
1000bd28:	000bc5c0 	call	1000bc5c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000bd2c:	000d0b00 	call	1000d0b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000bd30:	000d2740 	call	1000d274 <alt_icache_flush_all>
}
1000bd34:	e037883a 	mov	sp,fp
1000bd38:	dfc00117 	ldw	ra,4(sp)
1000bd3c:	df000017 	ldw	fp,0(sp)
1000bd40:	dec00204 	addi	sp,sp,8
1000bd44:	f800283a 	ret

1000bd48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000bd48:	defffe04 	addi	sp,sp,-8
1000bd4c:	dfc00115 	stw	ra,4(sp)
1000bd50:	df000015 	stw	fp,0(sp)
1000bd54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000bd58:	00840074 	movhi	r2,4097
1000bd5c:	10818d04 	addi	r2,r2,1588
1000bd60:	10800017 	ldw	r2,0(r2)
1000bd64:	10000526 	beq	r2,zero,1000bd7c <alt_get_errno+0x34>
1000bd68:	00840074 	movhi	r2,4097
1000bd6c:	10818d04 	addi	r2,r2,1588
1000bd70:	10800017 	ldw	r2,0(r2)
1000bd74:	103ee83a 	callr	r2
1000bd78:	00000206 	br	1000bd84 <alt_get_errno+0x3c>
1000bd7c:	00840074 	movhi	r2,4097
1000bd80:	10883004 	addi	r2,r2,8384
}
1000bd84:	e037883a 	mov	sp,fp
1000bd88:	dfc00117 	ldw	ra,4(sp)
1000bd8c:	df000017 	ldw	fp,0(sp)
1000bd90:	dec00204 	addi	sp,sp,8
1000bd94:	f800283a 	ret

1000bd98 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000bd98:	defff904 	addi	sp,sp,-28
1000bd9c:	dfc00615 	stw	ra,24(sp)
1000bda0:	df000515 	stw	fp,20(sp)
1000bda4:	df000504 	addi	fp,sp,20
1000bda8:	e13ffd15 	stw	r4,-12(fp)
1000bdac:	e17ffe15 	stw	r5,-8(fp)
1000bdb0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000bdb4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000bdb8:	e0bffd17 	ldw	r2,-12(fp)
1000bdbc:	10000716 	blt	r2,zero,1000bddc <lseek+0x44>
1000bdc0:	e13ffd17 	ldw	r4,-12(fp)
1000bdc4:	01400304 	movi	r5,12
1000bdc8:	000b2bc0 	call	1000b2bc <__mulsi3>
1000bdcc:	00c40074 	movhi	r3,4097
1000bdd0:	18fd0b04 	addi	r3,r3,-3028
1000bdd4:	10c5883a 	add	r2,r2,r3
1000bdd8:	00000106 	br	1000bde0 <lseek+0x48>
1000bddc:	0005883a 	mov	r2,zero
1000bde0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000bde4:	e0bffc17 	ldw	r2,-16(fp)
1000bde8:	10001026 	beq	r2,zero,1000be2c <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000bdec:	e0bffc17 	ldw	r2,-16(fp)
1000bdf0:	10800017 	ldw	r2,0(r2)
1000bdf4:	10800717 	ldw	r2,28(r2)
1000bdf8:	10000926 	beq	r2,zero,1000be20 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000bdfc:	e0bffc17 	ldw	r2,-16(fp)
1000be00:	10800017 	ldw	r2,0(r2)
1000be04:	10800717 	ldw	r2,28(r2)
1000be08:	e13ffc17 	ldw	r4,-16(fp)
1000be0c:	e17ffe17 	ldw	r5,-8(fp)
1000be10:	e1bfff17 	ldw	r6,-4(fp)
1000be14:	103ee83a 	callr	r2
1000be18:	e0bffb15 	stw	r2,-20(fp)
1000be1c:	00000506 	br	1000be34 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000be20:	00bfde84 	movi	r2,-134
1000be24:	e0bffb15 	stw	r2,-20(fp)
1000be28:	00000206 	br	1000be34 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
1000be2c:	00bfebc4 	movi	r2,-81
1000be30:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000be34:	e0bffb17 	ldw	r2,-20(fp)
1000be38:	1000060e 	bge	r2,zero,1000be54 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1000be3c:	000bd480 	call	1000bd48 <alt_get_errno>
1000be40:	e0fffb17 	ldw	r3,-20(fp)
1000be44:	00c7c83a 	sub	r3,zero,r3
1000be48:	10c00015 	stw	r3,0(r2)
    rc = -1;
1000be4c:	00bfffc4 	movi	r2,-1
1000be50:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000be54:	e0bffb17 	ldw	r2,-20(fp)
}
1000be58:	e037883a 	mov	sp,fp
1000be5c:	dfc00117 	ldw	ra,4(sp)
1000be60:	df000017 	ldw	fp,0(sp)
1000be64:	dec00204 	addi	sp,sp,8
1000be68:	f800283a 	ret

1000be6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000be6c:	defffd04 	addi	sp,sp,-12
1000be70:	dfc00215 	stw	ra,8(sp)
1000be74:	df000115 	stw	fp,4(sp)
1000be78:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000be7c:	0009883a 	mov	r4,zero
1000be80:	000c3400 	call	1000c340 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000be84:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000be88:	000c3740 	call	1000c374 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000be8c:	01040074 	movhi	r4,4097
1000be90:	213af204 	addi	r4,r4,-5176
1000be94:	01440074 	movhi	r5,4097
1000be98:	297af204 	addi	r5,r5,-5176
1000be9c:	01840074 	movhi	r6,4097
1000bea0:	31baf204 	addi	r6,r6,-5176
1000bea4:	000d6380 	call	1000d638 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000bea8:	000d1bc0 	call	1000d1bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000beac:	01040074 	movhi	r4,4097
1000beb0:	21348604 	addi	r4,r4,-11752
1000beb4:	000dd7c0 	call	1000dd7c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000beb8:	d126ae17 	ldw	r4,-25928(gp)
1000bebc:	d0e6af17 	ldw	r3,-25924(gp)
1000bec0:	d0a6b017 	ldw	r2,-25920(gp)
1000bec4:	180b883a 	mov	r5,r3
1000bec8:	100d883a 	mov	r6,r2
1000becc:	00003180 	call	10000318 <main>
1000bed0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000bed4:	01000044 	movi	r4,1
1000bed8:	000b9700 	call	1000b970 <close>
  exit (result);
1000bedc:	e13fff17 	ldw	r4,-4(fp)
1000bee0:	000dd900 	call	1000dd90 <exit>

1000bee4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000bee4:	defffe04 	addi	sp,sp,-8
1000bee8:	df000115 	stw	fp,4(sp)
1000beec:	df000104 	addi	fp,sp,4
1000bef0:	e13fff15 	stw	r4,-4(fp)
}
1000bef4:	e037883a 	mov	sp,fp
1000bef8:	df000017 	ldw	fp,0(sp)
1000befc:	dec00104 	addi	sp,sp,4
1000bf00:	f800283a 	ret

1000bf04 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000bf04:	defffe04 	addi	sp,sp,-8
1000bf08:	df000115 	stw	fp,4(sp)
1000bf0c:	df000104 	addi	fp,sp,4
1000bf10:	e13fff15 	stw	r4,-4(fp)
}
1000bf14:	e037883a 	mov	sp,fp
1000bf18:	df000017 	ldw	fp,0(sp)
1000bf1c:	dec00104 	addi	sp,sp,4
1000bf20:	f800283a 	ret

1000bf24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000bf24:	defffe04 	addi	sp,sp,-8
1000bf28:	dfc00115 	stw	ra,4(sp)
1000bf2c:	df000015 	stw	fp,0(sp)
1000bf30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000bf34:	00840074 	movhi	r2,4097
1000bf38:	10818d04 	addi	r2,r2,1588
1000bf3c:	10800017 	ldw	r2,0(r2)
1000bf40:	10000526 	beq	r2,zero,1000bf58 <alt_get_errno+0x34>
1000bf44:	00840074 	movhi	r2,4097
1000bf48:	10818d04 	addi	r2,r2,1588
1000bf4c:	10800017 	ldw	r2,0(r2)
1000bf50:	103ee83a 	callr	r2
1000bf54:	00000206 	br	1000bf60 <alt_get_errno+0x3c>
1000bf58:	00840074 	movhi	r2,4097
1000bf5c:	10883004 	addi	r2,r2,8384
}
1000bf60:	e037883a 	mov	sp,fp
1000bf64:	dfc00117 	ldw	ra,4(sp)
1000bf68:	df000017 	ldw	fp,0(sp)
1000bf6c:	dec00204 	addi	sp,sp,8
1000bf70:	f800283a 	ret

1000bf74 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000bf74:	defff904 	addi	sp,sp,-28
1000bf78:	dfc00615 	stw	ra,24(sp)
1000bf7c:	df000515 	stw	fp,20(sp)
1000bf80:	df000504 	addi	fp,sp,20
1000bf84:	e13ffd15 	stw	r4,-12(fp)
1000bf88:	e17ffe15 	stw	r5,-8(fp)
1000bf8c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000bf90:	e0bffd17 	ldw	r2,-12(fp)
1000bf94:	10000716 	blt	r2,zero,1000bfb4 <read+0x40>
1000bf98:	e13ffd17 	ldw	r4,-12(fp)
1000bf9c:	01400304 	movi	r5,12
1000bfa0:	000b2bc0 	call	1000b2bc <__mulsi3>
1000bfa4:	00c40074 	movhi	r3,4097
1000bfa8:	18fd0b04 	addi	r3,r3,-3028
1000bfac:	10c5883a 	add	r2,r2,r3
1000bfb0:	00000106 	br	1000bfb8 <read+0x44>
1000bfb4:	0005883a 	mov	r2,zero
1000bfb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000bfbc:	e0bffb17 	ldw	r2,-20(fp)
1000bfc0:	10002026 	beq	r2,zero,1000c044 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000bfc4:	e0bffb17 	ldw	r2,-20(fp)
1000bfc8:	10800217 	ldw	r2,8(r2)
1000bfcc:	108000cc 	andi	r2,r2,3
1000bfd0:	10800060 	cmpeqi	r2,r2,1
1000bfd4:	1000171e 	bne	r2,zero,1000c034 <read+0xc0>
        (fd->dev->read))
1000bfd8:	e0bffb17 	ldw	r2,-20(fp)
1000bfdc:	10800017 	ldw	r2,0(r2)
1000bfe0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000bfe4:	10001326 	beq	r2,zero,1000c034 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000bfe8:	e0bffb17 	ldw	r2,-20(fp)
1000bfec:	10800017 	ldw	r2,0(r2)
1000bff0:	10c00517 	ldw	r3,20(r2)
1000bff4:	e0bfff17 	ldw	r2,-4(fp)
1000bff8:	e13ffb17 	ldw	r4,-20(fp)
1000bffc:	e17ffe17 	ldw	r5,-8(fp)
1000c000:	100d883a 	mov	r6,r2
1000c004:	183ee83a 	callr	r3
1000c008:	e0bffc15 	stw	r2,-16(fp)
1000c00c:	e0bffc17 	ldw	r2,-16(fp)
1000c010:	1000060e 	bge	r2,zero,1000c02c <read+0xb8>
        {
          ALT_ERRNO = -rval;
1000c014:	000bf240 	call	1000bf24 <alt_get_errno>
1000c018:	e0fffc17 	ldw	r3,-16(fp)
1000c01c:	00c7c83a 	sub	r3,zero,r3
1000c020:	10c00015 	stw	r3,0(r2)
          return -1;
1000c024:	00bfffc4 	movi	r2,-1
1000c028:	00000a06 	br	1000c054 <read+0xe0>
        }
        return rval;
1000c02c:	e0bffc17 	ldw	r2,-16(fp)
1000c030:	00000806 	br	1000c054 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000c034:	000bf240 	call	1000bf24 <alt_get_errno>
1000c038:	00c00344 	movi	r3,13
1000c03c:	10c00015 	stw	r3,0(r2)
1000c040:	00000306 	br	1000c050 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000c044:	000bf240 	call	1000bf24 <alt_get_errno>
1000c048:	00c01444 	movi	r3,81
1000c04c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000c050:	00bfffc4 	movi	r2,-1
}
1000c054:	e037883a 	mov	sp,fp
1000c058:	dfc00117 	ldw	ra,4(sp)
1000c05c:	df000017 	ldw	fp,0(sp)
1000c060:	dec00204 	addi	sp,sp,8
1000c064:	f800283a 	ret

1000c068 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000c068:	defffc04 	addi	sp,sp,-16
1000c06c:	dfc00315 	stw	ra,12(sp)
1000c070:	df000215 	stw	fp,8(sp)
1000c074:	dc000115 	stw	r16,4(sp)
1000c078:	df000104 	addi	fp,sp,4
1000c07c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1000c080:	e0bfff17 	ldw	r2,-4(fp)
1000c084:	108000d0 	cmplti	r2,r2,3
1000c088:	1000111e 	bne	r2,zero,1000c0d0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000c08c:	04040074 	movhi	r16,4097
1000c090:	843d0b04 	addi	r16,r16,-3028
1000c094:	e0bfff17 	ldw	r2,-4(fp)
1000c098:	1009883a 	mov	r4,r2
1000c09c:	01400304 	movi	r5,12
1000c0a0:	000b2bc0 	call	1000b2bc <__mulsi3>
1000c0a4:	8085883a 	add	r2,r16,r2
1000c0a8:	10800204 	addi	r2,r2,8
1000c0ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000c0b0:	04040074 	movhi	r16,4097
1000c0b4:	843d0b04 	addi	r16,r16,-3028
1000c0b8:	e0bfff17 	ldw	r2,-4(fp)
1000c0bc:	1009883a 	mov	r4,r2
1000c0c0:	01400304 	movi	r5,12
1000c0c4:	000b2bc0 	call	1000b2bc <__mulsi3>
1000c0c8:	8085883a 	add	r2,r16,r2
1000c0cc:	10000015 	stw	zero,0(r2)
  }
}
1000c0d0:	e037883a 	mov	sp,fp
1000c0d4:	dfc00217 	ldw	ra,8(sp)
1000c0d8:	df000117 	ldw	fp,4(sp)
1000c0dc:	dc000017 	ldw	r16,0(sp)
1000c0e0:	dec00304 	addi	sp,sp,12
1000c0e4:	f800283a 	ret

1000c0e8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000c0e8:	defff904 	addi	sp,sp,-28
1000c0ec:	df000615 	stw	fp,24(sp)
1000c0f0:	df000604 	addi	fp,sp,24
1000c0f4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000c0f8:	0005303a 	rdctl	r2,status
1000c0fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000c100:	e0fffc17 	ldw	r3,-16(fp)
1000c104:	00bfff84 	movi	r2,-2
1000c108:	1884703a 	and	r2,r3,r2
1000c10c:	1001703a 	wrctl	status,r2
  
  return context;
1000c110:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000c114:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000c118:	d0a00b17 	ldw	r2,-32724(gp)
1000c11c:	10c000c4 	addi	r3,r2,3
1000c120:	00bfff04 	movi	r2,-4
1000c124:	1884703a 	and	r2,r3,r2
1000c128:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000c12c:	d0e00b17 	ldw	r3,-32724(gp)
1000c130:	e0bfff17 	ldw	r2,-4(fp)
1000c134:	1885883a 	add	r2,r3,r2
1000c138:	00c60034 	movhi	r3,6144
1000c13c:	18c00004 	addi	r3,r3,0
1000c140:	1880062e 	bgeu	r3,r2,1000c15c <sbrk+0x74>
1000c144:	e0bffa17 	ldw	r2,-24(fp)
1000c148:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000c14c:	e0bffd17 	ldw	r2,-12(fp)
1000c150:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000c154:	00bfffc4 	movi	r2,-1
1000c158:	00000b06 	br	1000c188 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000c15c:	d0a00b17 	ldw	r2,-32724(gp)
1000c160:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000c164:	d0e00b17 	ldw	r3,-32724(gp)
1000c168:	e0bfff17 	ldw	r2,-4(fp)
1000c16c:	1885883a 	add	r2,r3,r2
1000c170:	d0a00b15 	stw	r2,-32724(gp)
1000c174:	e0bffa17 	ldw	r2,-24(fp)
1000c178:	e0bffe15 	stw	r2,-8(fp)
1000c17c:	e0bffe17 	ldw	r2,-8(fp)
1000c180:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000c184:	e0bffb17 	ldw	r2,-20(fp)
} 
1000c188:	e037883a 	mov	sp,fp
1000c18c:	df000017 	ldw	fp,0(sp)
1000c190:	dec00104 	addi	sp,sp,4
1000c194:	f800283a 	ret

1000c198 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000c198:	defffd04 	addi	sp,sp,-12
1000c19c:	dfc00215 	stw	ra,8(sp)
1000c1a0:	df000115 	stw	fp,4(sp)
1000c1a4:	df000104 	addi	fp,sp,4
1000c1a8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000c1ac:	e13fff17 	ldw	r4,-4(fp)
1000c1b0:	000cf5c0 	call	1000cf5c <alt_busy_sleep>
}
1000c1b4:	e037883a 	mov	sp,fp
1000c1b8:	dfc00117 	ldw	ra,4(sp)
1000c1bc:	df000017 	ldw	fp,0(sp)
1000c1c0:	dec00204 	addi	sp,sp,8
1000c1c4:	f800283a 	ret

1000c1c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000c1c8:	defffe04 	addi	sp,sp,-8
1000c1cc:	dfc00115 	stw	ra,4(sp)
1000c1d0:	df000015 	stw	fp,0(sp)
1000c1d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000c1d8:	00840074 	movhi	r2,4097
1000c1dc:	10818d04 	addi	r2,r2,1588
1000c1e0:	10800017 	ldw	r2,0(r2)
1000c1e4:	10000526 	beq	r2,zero,1000c1fc <alt_get_errno+0x34>
1000c1e8:	00840074 	movhi	r2,4097
1000c1ec:	10818d04 	addi	r2,r2,1588
1000c1f0:	10800017 	ldw	r2,0(r2)
1000c1f4:	103ee83a 	callr	r2
1000c1f8:	00000206 	br	1000c204 <alt_get_errno+0x3c>
1000c1fc:	00840074 	movhi	r2,4097
1000c200:	10883004 	addi	r2,r2,8384
}
1000c204:	e037883a 	mov	sp,fp
1000c208:	dfc00117 	ldw	ra,4(sp)
1000c20c:	df000017 	ldw	fp,0(sp)
1000c210:	dec00204 	addi	sp,sp,8
1000c214:	f800283a 	ret

1000c218 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000c218:	defff904 	addi	sp,sp,-28
1000c21c:	dfc00615 	stw	ra,24(sp)
1000c220:	df000515 	stw	fp,20(sp)
1000c224:	df000504 	addi	fp,sp,20
1000c228:	e13ffd15 	stw	r4,-12(fp)
1000c22c:	e17ffe15 	stw	r5,-8(fp)
1000c230:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000c234:	e0bffd17 	ldw	r2,-12(fp)
1000c238:	10000716 	blt	r2,zero,1000c258 <write+0x40>
1000c23c:	e13ffd17 	ldw	r4,-12(fp)
1000c240:	01400304 	movi	r5,12
1000c244:	000b2bc0 	call	1000b2bc <__mulsi3>
1000c248:	00c40074 	movhi	r3,4097
1000c24c:	18fd0b04 	addi	r3,r3,-3028
1000c250:	10c5883a 	add	r2,r2,r3
1000c254:	00000106 	br	1000c25c <write+0x44>
1000c258:	0005883a 	mov	r2,zero
1000c25c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000c260:	e0bffb17 	ldw	r2,-20(fp)
1000c264:	10001f26 	beq	r2,zero,1000c2e4 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000c268:	e0bffb17 	ldw	r2,-20(fp)
1000c26c:	10800217 	ldw	r2,8(r2)
1000c270:	108000cc 	andi	r2,r2,3
1000c274:	10001726 	beq	r2,zero,1000c2d4 <write+0xbc>
1000c278:	e0bffb17 	ldw	r2,-20(fp)
1000c27c:	10800017 	ldw	r2,0(r2)
1000c280:	10800617 	ldw	r2,24(r2)
1000c284:	10001326 	beq	r2,zero,1000c2d4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000c288:	e0bffb17 	ldw	r2,-20(fp)
1000c28c:	10800017 	ldw	r2,0(r2)
1000c290:	10c00617 	ldw	r3,24(r2)
1000c294:	e0bfff17 	ldw	r2,-4(fp)
1000c298:	e13ffb17 	ldw	r4,-20(fp)
1000c29c:	e17ffe17 	ldw	r5,-8(fp)
1000c2a0:	100d883a 	mov	r6,r2
1000c2a4:	183ee83a 	callr	r3
1000c2a8:	e0bffc15 	stw	r2,-16(fp)
1000c2ac:	e0bffc17 	ldw	r2,-16(fp)
1000c2b0:	1000060e 	bge	r2,zero,1000c2cc <write+0xb4>
      {
        ALT_ERRNO = -rval;
1000c2b4:	000c1c80 	call	1000c1c8 <alt_get_errno>
1000c2b8:	e0fffc17 	ldw	r3,-16(fp)
1000c2bc:	00c7c83a 	sub	r3,zero,r3
1000c2c0:	10c00015 	stw	r3,0(r2)
        return -1;
1000c2c4:	00bfffc4 	movi	r2,-1
1000c2c8:	00000a06 	br	1000c2f4 <write+0xdc>
      }
      return rval;
1000c2cc:	e0bffc17 	ldw	r2,-16(fp)
1000c2d0:	00000806 	br	1000c2f4 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000c2d4:	000c1c80 	call	1000c1c8 <alt_get_errno>
1000c2d8:	00c00344 	movi	r3,13
1000c2dc:	10c00015 	stw	r3,0(r2)
1000c2e0:	00000306 	br	1000c2f0 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000c2e4:	000c1c80 	call	1000c1c8 <alt_get_errno>
1000c2e8:	00c01444 	movi	r3,81
1000c2ec:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000c2f0:	00bfffc4 	movi	r2,-1
}
1000c2f4:	e037883a 	mov	sp,fp
1000c2f8:	dfc00117 	ldw	ra,4(sp)
1000c2fc:	df000017 	ldw	fp,0(sp)
1000c300:	dec00204 	addi	sp,sp,8
1000c304:	f800283a 	ret

1000c308 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000c308:	defffd04 	addi	sp,sp,-12
1000c30c:	dfc00215 	stw	ra,8(sp)
1000c310:	df000115 	stw	fp,4(sp)
1000c314:	df000104 	addi	fp,sp,4
1000c318:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000c31c:	e13fff17 	ldw	r4,-4(fp)
1000c320:	01440074 	movhi	r5,4097
1000c324:	29418a04 	addi	r5,r5,1576
1000c328:	000d11c0 	call	1000d11c <alt_dev_llist_insert>
}
1000c32c:	e037883a 	mov	sp,fp
1000c330:	dfc00117 	ldw	ra,4(sp)
1000c334:	df000017 	ldw	fp,0(sp)
1000c338:	dec00204 	addi	sp,sp,8
1000c33c:	f800283a 	ret

1000c340 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000c340:	defffd04 	addi	sp,sp,-12
1000c344:	dfc00215 	stw	ra,8(sp)
1000c348:	df000115 	stw	fp,4(sp)
1000c34c:	df000104 	addi	fp,sp,4
1000c350:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000c354:	000dae40 	call	1000dae4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000c358:	00800044 	movi	r2,1
1000c35c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000c360:	e037883a 	mov	sp,fp
1000c364:	dfc00117 	ldw	ra,4(sp)
1000c368:	df000017 	ldw	fp,0(sp)
1000c36c:	dec00204 	addi	sp,sp,8
1000c370:	f800283a 	ret

1000c374 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000c374:	defffe04 	addi	sp,sp,-8
1000c378:	dfc00115 	stw	ra,4(sp)
1000c37c:	df000015 	stw	fp,0(sp)
1000c380:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000c384:	01040074 	movhi	r4,4097
1000c388:	213d7504 	addi	r4,r4,-2604
1000c38c:	000b883a 	mov	r5,zero
1000c390:	000d883a 	mov	r6,zero
1000c394:	000c5200 	call	1000c520 <altera_avalon_jtag_uart_init>
1000c398:	01040074 	movhi	r4,4097
1000c39c:	213d6b04 	addi	r4,r4,-2644
1000c3a0:	000c3080 	call	1000c308 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000c3a4:	0001883a 	nop
}
1000c3a8:	e037883a 	mov	sp,fp
1000c3ac:	dfc00117 	ldw	ra,4(sp)
1000c3b0:	df000017 	ldw	fp,0(sp)
1000c3b4:	dec00204 	addi	sp,sp,8
1000c3b8:	f800283a 	ret

1000c3bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000c3bc:	defffa04 	addi	sp,sp,-24
1000c3c0:	dfc00515 	stw	ra,20(sp)
1000c3c4:	df000415 	stw	fp,16(sp)
1000c3c8:	df000404 	addi	fp,sp,16
1000c3cc:	e13ffd15 	stw	r4,-12(fp)
1000c3d0:	e17ffe15 	stw	r5,-8(fp)
1000c3d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000c3d8:	e0bffd17 	ldw	r2,-12(fp)
1000c3dc:	10800017 	ldw	r2,0(r2)
1000c3e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000c3e4:	e0bffc17 	ldw	r2,-16(fp)
1000c3e8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
1000c3ec:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000c3f0:	10800217 	ldw	r2,8(r2)
1000c3f4:	1809883a 	mov	r4,r3
1000c3f8:	e17ffe17 	ldw	r5,-8(fp)
1000c3fc:	e1bfff17 	ldw	r6,-4(fp)
1000c400:	100f883a 	mov	r7,r2
1000c404:	000c9e40 	call	1000c9e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000c408:	e037883a 	mov	sp,fp
1000c40c:	dfc00117 	ldw	ra,4(sp)
1000c410:	df000017 	ldw	fp,0(sp)
1000c414:	dec00204 	addi	sp,sp,8
1000c418:	f800283a 	ret

1000c41c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000c41c:	defffa04 	addi	sp,sp,-24
1000c420:	dfc00515 	stw	ra,20(sp)
1000c424:	df000415 	stw	fp,16(sp)
1000c428:	df000404 	addi	fp,sp,16
1000c42c:	e13ffd15 	stw	r4,-12(fp)
1000c430:	e17ffe15 	stw	r5,-8(fp)
1000c434:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000c438:	e0bffd17 	ldw	r2,-12(fp)
1000c43c:	10800017 	ldw	r2,0(r2)
1000c440:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000c444:	e0bffc17 	ldw	r2,-16(fp)
1000c448:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
1000c44c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000c450:	10800217 	ldw	r2,8(r2)
1000c454:	1809883a 	mov	r4,r3
1000c458:	e17ffe17 	ldw	r5,-8(fp)
1000c45c:	e1bfff17 	ldw	r6,-4(fp)
1000c460:	100f883a 	mov	r7,r2
1000c464:	000cbfc0 	call	1000cbfc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000c468:	e037883a 	mov	sp,fp
1000c46c:	dfc00117 	ldw	ra,4(sp)
1000c470:	df000017 	ldw	fp,0(sp)
1000c474:	dec00204 	addi	sp,sp,8
1000c478:	f800283a 	ret

1000c47c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000c47c:	defffc04 	addi	sp,sp,-16
1000c480:	dfc00315 	stw	ra,12(sp)
1000c484:	df000215 	stw	fp,8(sp)
1000c488:	df000204 	addi	fp,sp,8
1000c48c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000c490:	e0bfff17 	ldw	r2,-4(fp)
1000c494:	10800017 	ldw	r2,0(r2)
1000c498:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000c49c:	e0bffe17 	ldw	r2,-8(fp)
1000c4a0:	10c00a04 	addi	r3,r2,40
1000c4a4:	e0bfff17 	ldw	r2,-4(fp)
1000c4a8:	10800217 	ldw	r2,8(r2)
1000c4ac:	1809883a 	mov	r4,r3
1000c4b0:	100b883a 	mov	r5,r2
1000c4b4:	000c8880 	call	1000c888 <altera_avalon_jtag_uart_close>
}
1000c4b8:	e037883a 	mov	sp,fp
1000c4bc:	dfc00117 	ldw	ra,4(sp)
1000c4c0:	df000017 	ldw	fp,0(sp)
1000c4c4:	dec00204 	addi	sp,sp,8
1000c4c8:	f800283a 	ret

1000c4cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000c4cc:	defffa04 	addi	sp,sp,-24
1000c4d0:	dfc00515 	stw	ra,20(sp)
1000c4d4:	df000415 	stw	fp,16(sp)
1000c4d8:	df000404 	addi	fp,sp,16
1000c4dc:	e13ffd15 	stw	r4,-12(fp)
1000c4e0:	e17ffe15 	stw	r5,-8(fp)
1000c4e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000c4e8:	e0bffd17 	ldw	r2,-12(fp)
1000c4ec:	10800017 	ldw	r2,0(r2)
1000c4f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000c4f4:	e0bffc17 	ldw	r2,-16(fp)
1000c4f8:	10800a04 	addi	r2,r2,40
1000c4fc:	1009883a 	mov	r4,r2
1000c500:	e17ffe17 	ldw	r5,-8(fp)
1000c504:	e1bfff17 	ldw	r6,-4(fp)
1000c508:	000c8f00 	call	1000c8f0 <altera_avalon_jtag_uart_ioctl>
}
1000c50c:	e037883a 	mov	sp,fp
1000c510:	dfc00117 	ldw	ra,4(sp)
1000c514:	df000017 	ldw	fp,0(sp)
1000c518:	dec00204 	addi	sp,sp,8
1000c51c:	f800283a 	ret

1000c520 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000c520:	defffa04 	addi	sp,sp,-24
1000c524:	dfc00515 	stw	ra,20(sp)
1000c528:	df000415 	stw	fp,16(sp)
1000c52c:	df000404 	addi	fp,sp,16
1000c530:	e13ffd15 	stw	r4,-12(fp)
1000c534:	e17ffe15 	stw	r5,-8(fp)
1000c538:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000c53c:	e0bffd17 	ldw	r2,-12(fp)
1000c540:	00c00044 	movi	r3,1
1000c544:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000c548:	e0bffd17 	ldw	r2,-12(fp)
1000c54c:	10800017 	ldw	r2,0(r2)
1000c550:	10800104 	addi	r2,r2,4
1000c554:	e0fffd17 	ldw	r3,-12(fp)
1000c558:	18c00817 	ldw	r3,32(r3)
1000c55c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000c560:	e0fffe17 	ldw	r3,-8(fp)
1000c564:	e0bfff17 	ldw	r2,-4(fp)
1000c568:	d8000015 	stw	zero,0(sp)
1000c56c:	1809883a 	mov	r4,r3
1000c570:	100b883a 	mov	r5,r2
1000c574:	01840074 	movhi	r6,4097
1000c578:	31b17804 	addi	r6,r6,-14880
1000c57c:	e1fffd17 	ldw	r7,-12(fp)
1000c580:	000d2900 	call	1000d290 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000c584:	e0bffd17 	ldw	r2,-12(fp)
1000c588:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000c58c:	e0bffd17 	ldw	r2,-12(fp)
1000c590:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000c594:	00840074 	movhi	r2,4097
1000c598:	10883504 	addi	r2,r2,8404
1000c59c:	10800017 	ldw	r2,0(r2)
1000c5a0:	1809883a 	mov	r4,r3
1000c5a4:	100b883a 	mov	r5,r2
1000c5a8:	01840074 	movhi	r6,4097
1000c5ac:	31b1f904 	addi	r6,r6,-14364
1000c5b0:	e1fffd17 	ldw	r7,-12(fp)
1000c5b4:	000ce1c0 	call	1000ce1c <alt_alarm_start>
1000c5b8:	1000040e 	bge	r2,zero,1000c5cc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000c5bc:	e0bffd17 	ldw	r2,-12(fp)
1000c5c0:	00e00034 	movhi	r3,32768
1000c5c4:	18ffffc4 	addi	r3,r3,-1
1000c5c8:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000c5cc:	e037883a 	mov	sp,fp
1000c5d0:	dfc00117 	ldw	ra,4(sp)
1000c5d4:	df000017 	ldw	fp,0(sp)
1000c5d8:	dec00204 	addi	sp,sp,8
1000c5dc:	f800283a 	ret

1000c5e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000c5e0:	defff804 	addi	sp,sp,-32
1000c5e4:	df000715 	stw	fp,28(sp)
1000c5e8:	df000704 	addi	fp,sp,28
1000c5ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000c5f0:	e0bfff17 	ldw	r2,-4(fp)
1000c5f4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000c5f8:	e0bffb17 	ldw	r2,-20(fp)
1000c5fc:	10800017 	ldw	r2,0(r2)
1000c600:	e0bffc15 	stw	r2,-16(fp)
1000c604:	00000106 	br	1000c60c <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
1000c608:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000c60c:	e0bffc17 	ldw	r2,-16(fp)
1000c610:	10800104 	addi	r2,r2,4
1000c614:	10800037 	ldwio	r2,0(r2)
1000c618:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000c61c:	e0bffd17 	ldw	r2,-12(fp)
1000c620:	1080c00c 	andi	r2,r2,768
1000c624:	10006a26 	beq	r2,zero,1000c7d0 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000c628:	e0bffd17 	ldw	r2,-12(fp)
1000c62c:	1080400c 	andi	r2,r2,256
1000c630:	10003326 	beq	r2,zero,1000c700 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000c634:	00800074 	movhi	r2,1
1000c638:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000c63c:	e0bffb17 	ldw	r2,-20(fp)
1000c640:	10800a17 	ldw	r2,40(r2)
1000c644:	10800044 	addi	r2,r2,1
1000c648:	1081ffcc 	andi	r2,r2,2047
1000c64c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000c650:	e0bffb17 	ldw	r2,-20(fp)
1000c654:	10c00b17 	ldw	r3,44(r2)
1000c658:	e0bffe17 	ldw	r2,-8(fp)
1000c65c:	18801426 	beq	r3,r2,1000c6b0 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000c660:	e0bffc17 	ldw	r2,-16(fp)
1000c664:	10800037 	ldwio	r2,0(r2)
1000c668:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000c66c:	e0bff917 	ldw	r2,-28(fp)
1000c670:	10a0000c 	andi	r2,r2,32768
1000c674:	10001026 	beq	r2,zero,1000c6b8 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000c678:	e0bffb17 	ldw	r2,-20(fp)
1000c67c:	10800a17 	ldw	r2,40(r2)
1000c680:	e0fff917 	ldw	r3,-28(fp)
1000c684:	e13ffb17 	ldw	r4,-20(fp)
1000c688:	2085883a 	add	r2,r4,r2
1000c68c:	10800e04 	addi	r2,r2,56
1000c690:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000c694:	e0bffb17 	ldw	r2,-20(fp)
1000c698:	10800a17 	ldw	r2,40(r2)
1000c69c:	10800044 	addi	r2,r2,1
1000c6a0:	10c1ffcc 	andi	r3,r2,2047
1000c6a4:	e0bffb17 	ldw	r2,-20(fp)
1000c6a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000c6ac:	003fe306 	br	1000c63c <__alt_data_end+0xf800c63c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1000c6b0:	0001883a 	nop
1000c6b4:	00000106 	br	1000c6bc <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1000c6b8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000c6bc:	e0bff917 	ldw	r2,-28(fp)
1000c6c0:	10bfffec 	andhi	r2,r2,65535
1000c6c4:	10000e26 	beq	r2,zero,1000c700 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000c6c8:	e0bffb17 	ldw	r2,-20(fp)
1000c6cc:	10c00817 	ldw	r3,32(r2)
1000c6d0:	00bfff84 	movi	r2,-2
1000c6d4:	1886703a 	and	r3,r3,r2
1000c6d8:	e0bffb17 	ldw	r2,-20(fp)
1000c6dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000c6e0:	e0bffc17 	ldw	r2,-16(fp)
1000c6e4:	10800104 	addi	r2,r2,4
1000c6e8:	e0fffb17 	ldw	r3,-20(fp)
1000c6ec:	18c00817 	ldw	r3,32(r3)
1000c6f0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000c6f4:	e0bffc17 	ldw	r2,-16(fp)
1000c6f8:	10800104 	addi	r2,r2,4
1000c6fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000c700:	e0bffd17 	ldw	r2,-12(fp)
1000c704:	1080800c 	andi	r2,r2,512
1000c708:	103fbf26 	beq	r2,zero,1000c608 <__alt_data_end+0xf800c608>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000c70c:	e0bffd17 	ldw	r2,-12(fp)
1000c710:	1004d43a 	srli	r2,r2,16
1000c714:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000c718:	00001406 	br	1000c76c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000c71c:	e0bffc17 	ldw	r2,-16(fp)
1000c720:	e0fffb17 	ldw	r3,-20(fp)
1000c724:	18c00d17 	ldw	r3,52(r3)
1000c728:	e13ffb17 	ldw	r4,-20(fp)
1000c72c:	20c7883a 	add	r3,r4,r3
1000c730:	18c20e04 	addi	r3,r3,2104
1000c734:	18c00003 	ldbu	r3,0(r3)
1000c738:	18c03fcc 	andi	r3,r3,255
1000c73c:	18c0201c 	xori	r3,r3,128
1000c740:	18ffe004 	addi	r3,r3,-128
1000c744:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000c748:	e0bffb17 	ldw	r2,-20(fp)
1000c74c:	10800d17 	ldw	r2,52(r2)
1000c750:	10800044 	addi	r2,r2,1
1000c754:	10c1ffcc 	andi	r3,r2,2047
1000c758:	e0bffb17 	ldw	r2,-20(fp)
1000c75c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000c760:	e0bffa17 	ldw	r2,-24(fp)
1000c764:	10bfffc4 	addi	r2,r2,-1
1000c768:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000c76c:	e0bffa17 	ldw	r2,-24(fp)
1000c770:	10000526 	beq	r2,zero,1000c788 <altera_avalon_jtag_uart_irq+0x1a8>
1000c774:	e0bffb17 	ldw	r2,-20(fp)
1000c778:	10c00d17 	ldw	r3,52(r2)
1000c77c:	e0bffb17 	ldw	r2,-20(fp)
1000c780:	10800c17 	ldw	r2,48(r2)
1000c784:	18bfe51e 	bne	r3,r2,1000c71c <__alt_data_end+0xf800c71c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000c788:	e0bffa17 	ldw	r2,-24(fp)
1000c78c:	103f9e26 	beq	r2,zero,1000c608 <__alt_data_end+0xf800c608>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000c790:	e0bffb17 	ldw	r2,-20(fp)
1000c794:	10c00817 	ldw	r3,32(r2)
1000c798:	00bfff44 	movi	r2,-3
1000c79c:	1886703a 	and	r3,r3,r2
1000c7a0:	e0bffb17 	ldw	r2,-20(fp)
1000c7a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000c7a8:	e0bffb17 	ldw	r2,-20(fp)
1000c7ac:	10800017 	ldw	r2,0(r2)
1000c7b0:	10800104 	addi	r2,r2,4
1000c7b4:	e0fffb17 	ldw	r3,-20(fp)
1000c7b8:	18c00817 	ldw	r3,32(r3)
1000c7bc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000c7c0:	e0bffc17 	ldw	r2,-16(fp)
1000c7c4:	10800104 	addi	r2,r2,4
1000c7c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000c7cc:	003f8e06 	br	1000c608 <__alt_data_end+0xf800c608>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1000c7d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1000c7d4:	e037883a 	mov	sp,fp
1000c7d8:	df000017 	ldw	fp,0(sp)
1000c7dc:	dec00104 	addi	sp,sp,4
1000c7e0:	f800283a 	ret

1000c7e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000c7e4:	defffc04 	addi	sp,sp,-16
1000c7e8:	df000315 	stw	fp,12(sp)
1000c7ec:	df000304 	addi	fp,sp,12
1000c7f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000c7f4:	e0bfff17 	ldw	r2,-4(fp)
1000c7f8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000c7fc:	e0bffd17 	ldw	r2,-12(fp)
1000c800:	10800017 	ldw	r2,0(r2)
1000c804:	10800104 	addi	r2,r2,4
1000c808:	10800037 	ldwio	r2,0(r2)
1000c80c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000c810:	e0bffe17 	ldw	r2,-8(fp)
1000c814:	1081000c 	andi	r2,r2,1024
1000c818:	10000a26 	beq	r2,zero,1000c844 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000c81c:	e0bffd17 	ldw	r2,-12(fp)
1000c820:	10800017 	ldw	r2,0(r2)
1000c824:	10800104 	addi	r2,r2,4
1000c828:	e0fffd17 	ldw	r3,-12(fp)
1000c82c:	18c00817 	ldw	r3,32(r3)
1000c830:	18c10014 	ori	r3,r3,1024
1000c834:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
1000c838:	e0bffd17 	ldw	r2,-12(fp)
1000c83c:	10000915 	stw	zero,36(r2)
1000c840:	00000a06 	br	1000c86c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000c844:	e0bffd17 	ldw	r2,-12(fp)
1000c848:	10800917 	ldw	r2,36(r2)
1000c84c:	00e00034 	movhi	r3,32768
1000c850:	18ffff04 	addi	r3,r3,-4
1000c854:	18800536 	bltu	r3,r2,1000c86c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
1000c858:	e0bffd17 	ldw	r2,-12(fp)
1000c85c:	10800917 	ldw	r2,36(r2)
1000c860:	10c00044 	addi	r3,r2,1
1000c864:	e0bffd17 	ldw	r2,-12(fp)
1000c868:	10c00915 	stw	r3,36(r2)
1000c86c:	00840074 	movhi	r2,4097
1000c870:	10883504 	addi	r2,r2,8404
1000c874:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000c878:	e037883a 	mov	sp,fp
1000c87c:	df000017 	ldw	fp,0(sp)
1000c880:	dec00104 	addi	sp,sp,4
1000c884:	f800283a 	ret

1000c888 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000c888:	defffd04 	addi	sp,sp,-12
1000c88c:	df000215 	stw	fp,8(sp)
1000c890:	df000204 	addi	fp,sp,8
1000c894:	e13ffe15 	stw	r4,-8(fp)
1000c898:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000c89c:	00000506 	br	1000c8b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000c8a0:	e0bfff17 	ldw	r2,-4(fp)
1000c8a4:	1090000c 	andi	r2,r2,16384
1000c8a8:	10000226 	beq	r2,zero,1000c8b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000c8ac:	00bffd44 	movi	r2,-11
1000c8b0:	00000b06 	br	1000c8e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000c8b4:	e0bffe17 	ldw	r2,-8(fp)
1000c8b8:	10c00d17 	ldw	r3,52(r2)
1000c8bc:	e0bffe17 	ldw	r2,-8(fp)
1000c8c0:	10800c17 	ldw	r2,48(r2)
1000c8c4:	18800526 	beq	r3,r2,1000c8dc <altera_avalon_jtag_uart_close+0x54>
1000c8c8:	e0bffe17 	ldw	r2,-8(fp)
1000c8cc:	10c00917 	ldw	r3,36(r2)
1000c8d0:	e0bffe17 	ldw	r2,-8(fp)
1000c8d4:	10800117 	ldw	r2,4(r2)
1000c8d8:	18bff136 	bltu	r3,r2,1000c8a0 <__alt_data_end+0xf800c8a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000c8dc:	0005883a 	mov	r2,zero
}
1000c8e0:	e037883a 	mov	sp,fp
1000c8e4:	df000017 	ldw	fp,0(sp)
1000c8e8:	dec00104 	addi	sp,sp,4
1000c8ec:	f800283a 	ret

1000c8f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000c8f0:	defffa04 	addi	sp,sp,-24
1000c8f4:	df000515 	stw	fp,20(sp)
1000c8f8:	df000504 	addi	fp,sp,20
1000c8fc:	e13ffd15 	stw	r4,-12(fp)
1000c900:	e17ffe15 	stw	r5,-8(fp)
1000c904:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000c908:	00bff9c4 	movi	r2,-25
1000c90c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000c910:	e0bffe17 	ldw	r2,-8(fp)
1000c914:	10da8060 	cmpeqi	r3,r2,27137
1000c918:	1800031e 	bne	r3,zero,1000c928 <altera_avalon_jtag_uart_ioctl+0x38>
1000c91c:	109a80a0 	cmpeqi	r2,r2,27138
1000c920:	1000181e 	bne	r2,zero,1000c984 <altera_avalon_jtag_uart_ioctl+0x94>
1000c924:	00002606 	br	1000c9c0 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000c928:	e0bffd17 	ldw	r2,-12(fp)
1000c92c:	10c00117 	ldw	r3,4(r2)
1000c930:	00a00034 	movhi	r2,32768
1000c934:	10bfffc4 	addi	r2,r2,-1
1000c938:	18802226 	beq	r3,r2,1000c9c4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
1000c93c:	e0bfff17 	ldw	r2,-4(fp)
1000c940:	10800017 	ldw	r2,0(r2)
1000c944:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000c948:	e0bffc17 	ldw	r2,-16(fp)
1000c94c:	10800090 	cmplti	r2,r2,2
1000c950:	1000061e 	bne	r2,zero,1000c96c <altera_avalon_jtag_uart_ioctl+0x7c>
1000c954:	e0fffc17 	ldw	r3,-16(fp)
1000c958:	00a00034 	movhi	r2,32768
1000c95c:	10bfffc4 	addi	r2,r2,-1
1000c960:	18800226 	beq	r3,r2,1000c96c <altera_avalon_jtag_uart_ioctl+0x7c>
1000c964:	e0bffc17 	ldw	r2,-16(fp)
1000c968:	00000206 	br	1000c974 <altera_avalon_jtag_uart_ioctl+0x84>
1000c96c:	00a00034 	movhi	r2,32768
1000c970:	10bfff84 	addi	r2,r2,-2
1000c974:	e0fffd17 	ldw	r3,-12(fp)
1000c978:	18800115 	stw	r2,4(r3)
      rc = 0;
1000c97c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000c980:	00001006 	br	1000c9c4 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000c984:	e0bffd17 	ldw	r2,-12(fp)
1000c988:	10c00117 	ldw	r3,4(r2)
1000c98c:	00a00034 	movhi	r2,32768
1000c990:	10bfffc4 	addi	r2,r2,-1
1000c994:	18800d26 	beq	r3,r2,1000c9cc <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000c998:	e0bffd17 	ldw	r2,-12(fp)
1000c99c:	10c00917 	ldw	r3,36(r2)
1000c9a0:	e0bffd17 	ldw	r2,-12(fp)
1000c9a4:	10800117 	ldw	r2,4(r2)
1000c9a8:	1885803a 	cmpltu	r2,r3,r2
1000c9ac:	10c03fcc 	andi	r3,r2,255
1000c9b0:	e0bfff17 	ldw	r2,-4(fp)
1000c9b4:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000c9b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000c9bc:	00000306 	br	1000c9cc <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
1000c9c0:	00000306 	br	1000c9d0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1000c9c4:	0001883a 	nop
1000c9c8:	00000106 	br	1000c9d0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1000c9cc:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000c9d0:	e0bffb17 	ldw	r2,-20(fp)
}
1000c9d4:	e037883a 	mov	sp,fp
1000c9d8:	df000017 	ldw	fp,0(sp)
1000c9dc:	dec00104 	addi	sp,sp,4
1000c9e0:	f800283a 	ret

1000c9e4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000c9e4:	defff304 	addi	sp,sp,-52
1000c9e8:	dfc00c15 	stw	ra,48(sp)
1000c9ec:	df000b15 	stw	fp,44(sp)
1000c9f0:	df000b04 	addi	fp,sp,44
1000c9f4:	e13ffc15 	stw	r4,-16(fp)
1000c9f8:	e17ffd15 	stw	r5,-12(fp)
1000c9fc:	e1bffe15 	stw	r6,-8(fp)
1000ca00:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000ca04:	e0bffd17 	ldw	r2,-12(fp)
1000ca08:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ca0c:	00004706 	br	1000cb2c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000ca10:	e0bffc17 	ldw	r2,-16(fp)
1000ca14:	10800a17 	ldw	r2,40(r2)
1000ca18:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000ca1c:	e0bffc17 	ldw	r2,-16(fp)
1000ca20:	10800b17 	ldw	r2,44(r2)
1000ca24:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000ca28:	e0fff717 	ldw	r3,-36(fp)
1000ca2c:	e0bff817 	ldw	r2,-32(fp)
1000ca30:	18800536 	bltu	r3,r2,1000ca48 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000ca34:	e0fff717 	ldw	r3,-36(fp)
1000ca38:	e0bff817 	ldw	r2,-32(fp)
1000ca3c:	1885c83a 	sub	r2,r3,r2
1000ca40:	e0bff615 	stw	r2,-40(fp)
1000ca44:	00000406 	br	1000ca58 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000ca48:	00c20004 	movi	r3,2048
1000ca4c:	e0bff817 	ldw	r2,-32(fp)
1000ca50:	1885c83a 	sub	r2,r3,r2
1000ca54:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000ca58:	e0bff617 	ldw	r2,-40(fp)
1000ca5c:	10001e26 	beq	r2,zero,1000cad8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1000ca60:	e0fffe17 	ldw	r3,-8(fp)
1000ca64:	e0bff617 	ldw	r2,-40(fp)
1000ca68:	1880022e 	bgeu	r3,r2,1000ca74 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1000ca6c:	e0bffe17 	ldw	r2,-8(fp)
1000ca70:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000ca74:	e0bff817 	ldw	r2,-32(fp)
1000ca78:	10800e04 	addi	r2,r2,56
1000ca7c:	e0fffc17 	ldw	r3,-16(fp)
1000ca80:	1885883a 	add	r2,r3,r2
1000ca84:	e13ff517 	ldw	r4,-44(fp)
1000ca88:	100b883a 	mov	r5,r2
1000ca8c:	e1bff617 	ldw	r6,-40(fp)
1000ca90:	00076b40 	call	100076b4 <memcpy>
      ptr   += n;
1000ca94:	e0fff517 	ldw	r3,-44(fp)
1000ca98:	e0bff617 	ldw	r2,-40(fp)
1000ca9c:	1885883a 	add	r2,r3,r2
1000caa0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000caa4:	e0fffe17 	ldw	r3,-8(fp)
1000caa8:	e0bff617 	ldw	r2,-40(fp)
1000caac:	1885c83a 	sub	r2,r3,r2
1000cab0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000cab4:	e0fff817 	ldw	r3,-32(fp)
1000cab8:	e0bff617 	ldw	r2,-40(fp)
1000cabc:	1885883a 	add	r2,r3,r2
1000cac0:	10c1ffcc 	andi	r3,r2,2047
1000cac4:	e0bffc17 	ldw	r2,-16(fp)
1000cac8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000cacc:	e0bffe17 	ldw	r2,-8(fp)
1000cad0:	00bfcf16 	blt	zero,r2,1000ca10 <__alt_data_end+0xf800ca10>
1000cad4:	00000106 	br	1000cadc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1000cad8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1000cadc:	e0fff517 	ldw	r3,-44(fp)
1000cae0:	e0bffd17 	ldw	r2,-12(fp)
1000cae4:	1880141e 	bne	r3,r2,1000cb38 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000cae8:	e0bfff17 	ldw	r2,-4(fp)
1000caec:	1090000c 	andi	r2,r2,16384
1000caf0:	1000131e 	bne	r2,zero,1000cb40 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000caf4:	0001883a 	nop
1000caf8:	e0bffc17 	ldw	r2,-16(fp)
1000cafc:	10c00a17 	ldw	r3,40(r2)
1000cb00:	e0bff717 	ldw	r2,-36(fp)
1000cb04:	1880051e 	bne	r3,r2,1000cb1c <altera_avalon_jtag_uart_read+0x138>
1000cb08:	e0bffc17 	ldw	r2,-16(fp)
1000cb0c:	10c00917 	ldw	r3,36(r2)
1000cb10:	e0bffc17 	ldw	r2,-16(fp)
1000cb14:	10800117 	ldw	r2,4(r2)
1000cb18:	18bff736 	bltu	r3,r2,1000caf8 <__alt_data_end+0xf800caf8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000cb1c:	e0bffc17 	ldw	r2,-16(fp)
1000cb20:	10c00a17 	ldw	r3,40(r2)
1000cb24:	e0bff717 	ldw	r2,-36(fp)
1000cb28:	18800726 	beq	r3,r2,1000cb48 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000cb2c:	e0bffe17 	ldw	r2,-8(fp)
1000cb30:	00bfb716 	blt	zero,r2,1000ca10 <__alt_data_end+0xf800ca10>
1000cb34:	00000506 	br	1000cb4c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1000cb38:	0001883a 	nop
1000cb3c:	00000306 	br	1000cb4c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1000cb40:	0001883a 	nop
1000cb44:	00000106 	br	1000cb4c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1000cb48:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000cb4c:	e0fff517 	ldw	r3,-44(fp)
1000cb50:	e0bffd17 	ldw	r2,-12(fp)
1000cb54:	18801726 	beq	r3,r2,1000cbb4 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000cb58:	0005303a 	rdctl	r2,status
1000cb5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000cb60:	e0fffa17 	ldw	r3,-24(fp)
1000cb64:	00bfff84 	movi	r2,-2
1000cb68:	1884703a 	and	r2,r3,r2
1000cb6c:	1001703a 	wrctl	status,r2
  
  return context;
1000cb70:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000cb74:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000cb78:	e0bffc17 	ldw	r2,-16(fp)
1000cb7c:	10800817 	ldw	r2,32(r2)
1000cb80:	10c00054 	ori	r3,r2,1
1000cb84:	e0bffc17 	ldw	r2,-16(fp)
1000cb88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000cb8c:	e0bffc17 	ldw	r2,-16(fp)
1000cb90:	10800017 	ldw	r2,0(r2)
1000cb94:	10800104 	addi	r2,r2,4
1000cb98:	e0fffc17 	ldw	r3,-16(fp)
1000cb9c:	18c00817 	ldw	r3,32(r3)
1000cba0:	10c00035 	stwio	r3,0(r2)
1000cba4:	e0bff917 	ldw	r2,-28(fp)
1000cba8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000cbac:	e0bffb17 	ldw	r2,-20(fp)
1000cbb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000cbb4:	e0fff517 	ldw	r3,-44(fp)
1000cbb8:	e0bffd17 	ldw	r2,-12(fp)
1000cbbc:	18800426 	beq	r3,r2,1000cbd0 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
1000cbc0:	e0fff517 	ldw	r3,-44(fp)
1000cbc4:	e0bffd17 	ldw	r2,-12(fp)
1000cbc8:	1885c83a 	sub	r2,r3,r2
1000cbcc:	00000606 	br	1000cbe8 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
1000cbd0:	e0bfff17 	ldw	r2,-4(fp)
1000cbd4:	1090000c 	andi	r2,r2,16384
1000cbd8:	10000226 	beq	r2,zero,1000cbe4 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
1000cbdc:	00bffd44 	movi	r2,-11
1000cbe0:	00000106 	br	1000cbe8 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
1000cbe4:	00bffec4 	movi	r2,-5
}
1000cbe8:	e037883a 	mov	sp,fp
1000cbec:	dfc00117 	ldw	ra,4(sp)
1000cbf0:	df000017 	ldw	fp,0(sp)
1000cbf4:	dec00204 	addi	sp,sp,8
1000cbf8:	f800283a 	ret

1000cbfc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000cbfc:	defff304 	addi	sp,sp,-52
1000cc00:	dfc00c15 	stw	ra,48(sp)
1000cc04:	df000b15 	stw	fp,44(sp)
1000cc08:	df000b04 	addi	fp,sp,44
1000cc0c:	e13ffc15 	stw	r4,-16(fp)
1000cc10:	e17ffd15 	stw	r5,-12(fp)
1000cc14:	e1bffe15 	stw	r6,-8(fp)
1000cc18:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000cc1c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000cc20:	e0bffd17 	ldw	r2,-12(fp)
1000cc24:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000cc28:	00003706 	br	1000cd08 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000cc2c:	e0bffc17 	ldw	r2,-16(fp)
1000cc30:	10800c17 	ldw	r2,48(r2)
1000cc34:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000cc38:	e0bffc17 	ldw	r2,-16(fp)
1000cc3c:	10800d17 	ldw	r2,52(r2)
1000cc40:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000cc44:	e0fff817 	ldw	r3,-32(fp)
1000cc48:	e0bff517 	ldw	r2,-44(fp)
1000cc4c:	1880062e 	bgeu	r3,r2,1000cc68 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000cc50:	e0fff517 	ldw	r3,-44(fp)
1000cc54:	e0bff817 	ldw	r2,-32(fp)
1000cc58:	1885c83a 	sub	r2,r3,r2
1000cc5c:	10bfffc4 	addi	r2,r2,-1
1000cc60:	e0bff615 	stw	r2,-40(fp)
1000cc64:	00000b06 	br	1000cc94 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000cc68:	e0bff517 	ldw	r2,-44(fp)
1000cc6c:	10000526 	beq	r2,zero,1000cc84 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000cc70:	00c20004 	movi	r3,2048
1000cc74:	e0bff817 	ldw	r2,-32(fp)
1000cc78:	1885c83a 	sub	r2,r3,r2
1000cc7c:	e0bff615 	stw	r2,-40(fp)
1000cc80:	00000406 	br	1000cc94 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000cc84:	00c1ffc4 	movi	r3,2047
1000cc88:	e0bff817 	ldw	r2,-32(fp)
1000cc8c:	1885c83a 	sub	r2,r3,r2
1000cc90:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000cc94:	e0bff617 	ldw	r2,-40(fp)
1000cc98:	10001e26 	beq	r2,zero,1000cd14 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1000cc9c:	e0fffe17 	ldw	r3,-8(fp)
1000cca0:	e0bff617 	ldw	r2,-40(fp)
1000cca4:	1880022e 	bgeu	r3,r2,1000ccb0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1000cca8:	e0bffe17 	ldw	r2,-8(fp)
1000ccac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000ccb0:	e0bff817 	ldw	r2,-32(fp)
1000ccb4:	10820e04 	addi	r2,r2,2104
1000ccb8:	e0fffc17 	ldw	r3,-16(fp)
1000ccbc:	1885883a 	add	r2,r3,r2
1000ccc0:	1009883a 	mov	r4,r2
1000ccc4:	e17ffd17 	ldw	r5,-12(fp)
1000ccc8:	e1bff617 	ldw	r6,-40(fp)
1000cccc:	00076b40 	call	100076b4 <memcpy>
      ptr   += n;
1000ccd0:	e0fffd17 	ldw	r3,-12(fp)
1000ccd4:	e0bff617 	ldw	r2,-40(fp)
1000ccd8:	1885883a 	add	r2,r3,r2
1000ccdc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000cce0:	e0fffe17 	ldw	r3,-8(fp)
1000cce4:	e0bff617 	ldw	r2,-40(fp)
1000cce8:	1885c83a 	sub	r2,r3,r2
1000ccec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ccf0:	e0fff817 	ldw	r3,-32(fp)
1000ccf4:	e0bff617 	ldw	r2,-40(fp)
1000ccf8:	1885883a 	add	r2,r3,r2
1000ccfc:	10c1ffcc 	andi	r3,r2,2047
1000cd00:	e0bffc17 	ldw	r2,-16(fp)
1000cd04:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000cd08:	e0bffe17 	ldw	r2,-8(fp)
1000cd0c:	00bfc716 	blt	zero,r2,1000cc2c <__alt_data_end+0xf800cc2c>
1000cd10:	00000106 	br	1000cd18 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1000cd14:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000cd18:	0005303a 	rdctl	r2,status
1000cd1c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000cd20:	e0fffa17 	ldw	r3,-24(fp)
1000cd24:	00bfff84 	movi	r2,-2
1000cd28:	1884703a 	and	r2,r3,r2
1000cd2c:	1001703a 	wrctl	status,r2
  
  return context;
1000cd30:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000cd34:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000cd38:	e0bffc17 	ldw	r2,-16(fp)
1000cd3c:	10800817 	ldw	r2,32(r2)
1000cd40:	10c00094 	ori	r3,r2,2
1000cd44:	e0bffc17 	ldw	r2,-16(fp)
1000cd48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000cd4c:	e0bffc17 	ldw	r2,-16(fp)
1000cd50:	10800017 	ldw	r2,0(r2)
1000cd54:	10800104 	addi	r2,r2,4
1000cd58:	e0fffc17 	ldw	r3,-16(fp)
1000cd5c:	18c00817 	ldw	r3,32(r3)
1000cd60:	10c00035 	stwio	r3,0(r2)
1000cd64:	e0bff917 	ldw	r2,-28(fp)
1000cd68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000cd6c:	e0bffb17 	ldw	r2,-20(fp)
1000cd70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000cd74:	e0bffe17 	ldw	r2,-8(fp)
1000cd78:	0080100e 	bge	zero,r2,1000cdbc <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
1000cd7c:	e0bfff17 	ldw	r2,-4(fp)
1000cd80:	1090000c 	andi	r2,r2,16384
1000cd84:	1000101e 	bne	r2,zero,1000cdc8 <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000cd88:	0001883a 	nop
1000cd8c:	e0bffc17 	ldw	r2,-16(fp)
1000cd90:	10c00d17 	ldw	r3,52(r2)
1000cd94:	e0bff517 	ldw	r2,-44(fp)
1000cd98:	1880051e 	bne	r3,r2,1000cdb0 <altera_avalon_jtag_uart_write+0x1b4>
1000cd9c:	e0bffc17 	ldw	r2,-16(fp)
1000cda0:	10c00917 	ldw	r3,36(r2)
1000cda4:	e0bffc17 	ldw	r2,-16(fp)
1000cda8:	10800117 	ldw	r2,4(r2)
1000cdac:	18bff736 	bltu	r3,r2,1000cd8c <__alt_data_end+0xf800cd8c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000cdb0:	e0bffc17 	ldw	r2,-16(fp)
1000cdb4:	10800917 	ldw	r2,36(r2)
1000cdb8:	1000051e 	bne	r2,zero,1000cdd0 <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
1000cdbc:	e0bffe17 	ldw	r2,-8(fp)
1000cdc0:	00bfd116 	blt	zero,r2,1000cd08 <__alt_data_end+0xf800cd08>
1000cdc4:	00000306 	br	1000cdd4 <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1000cdc8:	0001883a 	nop
1000cdcc:	00000106 	br	1000cdd4 <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1000cdd0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000cdd4:	e0fffd17 	ldw	r3,-12(fp)
1000cdd8:	e0bff717 	ldw	r2,-36(fp)
1000cddc:	18800426 	beq	r3,r2,1000cdf0 <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
1000cde0:	e0fffd17 	ldw	r3,-12(fp)
1000cde4:	e0bff717 	ldw	r2,-36(fp)
1000cde8:	1885c83a 	sub	r2,r3,r2
1000cdec:	00000606 	br	1000ce08 <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
1000cdf0:	e0bfff17 	ldw	r2,-4(fp)
1000cdf4:	1090000c 	andi	r2,r2,16384
1000cdf8:	10000226 	beq	r2,zero,1000ce04 <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
1000cdfc:	00bffd44 	movi	r2,-11
1000ce00:	00000106 	br	1000ce08 <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000ce04:	00bffec4 	movi	r2,-5
}
1000ce08:	e037883a 	mov	sp,fp
1000ce0c:	dfc00117 	ldw	ra,4(sp)
1000ce10:	df000017 	ldw	fp,0(sp)
1000ce14:	dec00204 	addi	sp,sp,8
1000ce18:	f800283a 	ret

1000ce1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000ce1c:	defff504 	addi	sp,sp,-44
1000ce20:	df000a15 	stw	fp,40(sp)
1000ce24:	df000a04 	addi	fp,sp,40
1000ce28:	e13ffc15 	stw	r4,-16(fp)
1000ce2c:	e17ffd15 	stw	r5,-12(fp)
1000ce30:	e1bffe15 	stw	r6,-8(fp)
1000ce34:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000ce38:	e03ff615 	stw	zero,-40(fp)
1000ce3c:	00840074 	movhi	r2,4097
1000ce40:	10883504 	addi	r2,r2,8404
1000ce44:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000ce48:	10003f26 	beq	r2,zero,1000cf48 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000ce4c:	e0bffc17 	ldw	r2,-16(fp)
1000ce50:	10003b26 	beq	r2,zero,1000cf40 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000ce54:	e0bffc17 	ldw	r2,-16(fp)
1000ce58:	e0fffe17 	ldw	r3,-8(fp)
1000ce5c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000ce60:	e0bffc17 	ldw	r2,-16(fp)
1000ce64:	e0ffff17 	ldw	r3,-4(fp)
1000ce68:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ce6c:	0005303a 	rdctl	r2,status
1000ce70:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ce74:	e0fff817 	ldw	r3,-32(fp)
1000ce78:	00bfff84 	movi	r2,-2
1000ce7c:	1884703a 	and	r2,r3,r2
1000ce80:	1001703a 	wrctl	status,r2
  
  return context;
1000ce84:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000ce88:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000ce8c:	00840074 	movhi	r2,4097
1000ce90:	10883604 	addi	r2,r2,8408
1000ce94:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000ce98:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000ce9c:	e0fffd17 	ldw	r3,-12(fp)
1000cea0:	e0bff617 	ldw	r2,-40(fp)
1000cea4:	1885883a 	add	r2,r3,r2
1000cea8:	10c00044 	addi	r3,r2,1
1000ceac:	e0bffc17 	ldw	r2,-16(fp)
1000ceb0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000ceb4:	e0bffc17 	ldw	r2,-16(fp)
1000ceb8:	10c00217 	ldw	r3,8(r2)
1000cebc:	e0bff617 	ldw	r2,-40(fp)
1000cec0:	1880042e 	bgeu	r3,r2,1000ced4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000cec4:	e0bffc17 	ldw	r2,-16(fp)
1000cec8:	00c00044 	movi	r3,1
1000cecc:	10c00405 	stb	r3,16(r2)
1000ced0:	00000206 	br	1000cedc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000ced4:	e0bffc17 	ldw	r2,-16(fp)
1000ced8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000cedc:	e0bffc17 	ldw	r2,-16(fp)
1000cee0:	00c40074 	movhi	r3,4097
1000cee4:	18c19004 	addi	r3,r3,1600
1000cee8:	e0fff915 	stw	r3,-28(fp)
1000ceec:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000cef0:	e0bffa17 	ldw	r2,-24(fp)
1000cef4:	e0fff917 	ldw	r3,-28(fp)
1000cef8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000cefc:	e0bff917 	ldw	r2,-28(fp)
1000cf00:	10c00017 	ldw	r3,0(r2)
1000cf04:	e0bffa17 	ldw	r2,-24(fp)
1000cf08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000cf0c:	e0bff917 	ldw	r2,-28(fp)
1000cf10:	10800017 	ldw	r2,0(r2)
1000cf14:	e0fffa17 	ldw	r3,-24(fp)
1000cf18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000cf1c:	e0bff917 	ldw	r2,-28(fp)
1000cf20:	e0fffa17 	ldw	r3,-24(fp)
1000cf24:	10c00015 	stw	r3,0(r2)
1000cf28:	e0bff717 	ldw	r2,-36(fp)
1000cf2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000cf30:	e0bffb17 	ldw	r2,-20(fp)
1000cf34:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000cf38:	0005883a 	mov	r2,zero
1000cf3c:	00000306 	br	1000cf4c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000cf40:	00bffa84 	movi	r2,-22
1000cf44:	00000106 	br	1000cf4c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000cf48:	00bfde84 	movi	r2,-134
  }
}
1000cf4c:	e037883a 	mov	sp,fp
1000cf50:	df000017 	ldw	fp,0(sp)
1000cf54:	dec00104 	addi	sp,sp,4
1000cf58:	f800283a 	ret

1000cf5c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1000cf5c:	defffa04 	addi	sp,sp,-24
1000cf60:	dfc00515 	stw	ra,20(sp)
1000cf64:	df000415 	stw	fp,16(sp)
1000cf68:	df000404 	addi	fp,sp,16
1000cf6c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1000cf70:	00800244 	movi	r2,9
1000cf74:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1000cf78:	e13ffd17 	ldw	r4,-12(fp)
1000cf7c:	014003f4 	movhi	r5,15
1000cf80:	29509004 	addi	r5,r5,16960
1000cf84:	000b2bc0 	call	1000b2bc <__mulsi3>
1000cf88:	0100bef4 	movhi	r4,763
1000cf8c:	213c2004 	addi	r4,r4,-3968
1000cf90:	100b883a 	mov	r5,r2
1000cf94:	000b2ac0 	call	1000b2ac <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1000cf98:	01200034 	movhi	r4,32768
1000cf9c:	213fffc4 	addi	r4,r4,-1
1000cfa0:	100b883a 	mov	r5,r2
1000cfa4:	000b2ac0 	call	1000b2ac <__udivsi3>
1000cfa8:	e13fff17 	ldw	r4,-4(fp)
1000cfac:	100b883a 	mov	r5,r2
1000cfb0:	000b2ac0 	call	1000b2ac <__udivsi3>
1000cfb4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1000cfb8:	e0bffe17 	ldw	r2,-8(fp)
1000cfbc:	10002926 	beq	r2,zero,1000d064 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
1000cfc0:	e03ffc15 	stw	zero,-16(fp)
1000cfc4:	00001606 	br	1000d020 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1000cfc8:	00a00034 	movhi	r2,32768
1000cfcc:	10bfffc4 	addi	r2,r2,-1
1000cfd0:	10bfffc4 	addi	r2,r2,-1
1000cfd4:	103ffe1e 	bne	r2,zero,1000cfd0 <__alt_data_end+0xf800cfd0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1000cfd8:	e13ffd17 	ldw	r4,-12(fp)
1000cfdc:	014003f4 	movhi	r5,15
1000cfe0:	29509004 	addi	r5,r5,16960
1000cfe4:	000b2bc0 	call	1000b2bc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1000cfe8:	0100bef4 	movhi	r4,763
1000cfec:	213c2004 	addi	r4,r4,-3968
1000cff0:	100b883a 	mov	r5,r2
1000cff4:	000b2ac0 	call	1000b2ac <__udivsi3>
1000cff8:	01200034 	movhi	r4,32768
1000cffc:	213fffc4 	addi	r4,r4,-1
1000d000:	100b883a 	mov	r5,r2
1000d004:	000b2ac0 	call	1000b2ac <__udivsi3>
1000d008:	e0ffff17 	ldw	r3,-4(fp)
1000d00c:	1885c83a 	sub	r2,r3,r2
1000d010:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1000d014:	e0bffc17 	ldw	r2,-16(fp)
1000d018:	10800044 	addi	r2,r2,1
1000d01c:	e0bffc15 	stw	r2,-16(fp)
1000d020:	e0fffc17 	ldw	r3,-16(fp)
1000d024:	e0bffe17 	ldw	r2,-8(fp)
1000d028:	18bfe716 	blt	r3,r2,1000cfc8 <__alt_data_end+0xf800cfc8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1000d02c:	e13ffd17 	ldw	r4,-12(fp)
1000d030:	014003f4 	movhi	r5,15
1000d034:	29509004 	addi	r5,r5,16960
1000d038:	000b2bc0 	call	1000b2bc <__mulsi3>
1000d03c:	0100bef4 	movhi	r4,763
1000d040:	213c2004 	addi	r4,r4,-3968
1000d044:	100b883a 	mov	r5,r2
1000d048:	000b2ac0 	call	1000b2ac <__udivsi3>
1000d04c:	1009883a 	mov	r4,r2
1000d050:	e17fff17 	ldw	r5,-4(fp)
1000d054:	000b2bc0 	call	1000b2bc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1000d058:	10bfffc4 	addi	r2,r2,-1
1000d05c:	103ffe1e 	bne	r2,zero,1000d058 <__alt_data_end+0xf800d058>
1000d060:	00000d06 	br	1000d098 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1000d064:	e13ffd17 	ldw	r4,-12(fp)
1000d068:	014003f4 	movhi	r5,15
1000d06c:	29509004 	addi	r5,r5,16960
1000d070:	000b2bc0 	call	1000b2bc <__mulsi3>
1000d074:	0100bef4 	movhi	r4,763
1000d078:	213c2004 	addi	r4,r4,-3968
1000d07c:	100b883a 	mov	r5,r2
1000d080:	000b2ac0 	call	1000b2ac <__udivsi3>
1000d084:	1009883a 	mov	r4,r2
1000d088:	e17fff17 	ldw	r5,-4(fp)
1000d08c:	000b2bc0 	call	1000b2bc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1000d090:	10bfffc4 	addi	r2,r2,-1
1000d094:	00bffe16 	blt	zero,r2,1000d090 <__alt_data_end+0xf800d090>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1000d098:	0005883a 	mov	r2,zero
}
1000d09c:	e037883a 	mov	sp,fp
1000d0a0:	dfc00117 	ldw	ra,4(sp)
1000d0a4:	df000017 	ldw	fp,0(sp)
1000d0a8:	dec00204 	addi	sp,sp,8
1000d0ac:	f800283a 	ret

1000d0b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000d0b0:	deffff04 	addi	sp,sp,-4
1000d0b4:	df000015 	stw	fp,0(sp)
1000d0b8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000d0bc:	e037883a 	mov	sp,fp
1000d0c0:	df000017 	ldw	fp,0(sp)
1000d0c4:	dec00104 	addi	sp,sp,4
1000d0c8:	f800283a 	ret

1000d0cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d0cc:	defffe04 	addi	sp,sp,-8
1000d0d0:	dfc00115 	stw	ra,4(sp)
1000d0d4:	df000015 	stw	fp,0(sp)
1000d0d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d0dc:	00840074 	movhi	r2,4097
1000d0e0:	10818d04 	addi	r2,r2,1588
1000d0e4:	10800017 	ldw	r2,0(r2)
1000d0e8:	10000526 	beq	r2,zero,1000d100 <alt_get_errno+0x34>
1000d0ec:	00840074 	movhi	r2,4097
1000d0f0:	10818d04 	addi	r2,r2,1588
1000d0f4:	10800017 	ldw	r2,0(r2)
1000d0f8:	103ee83a 	callr	r2
1000d0fc:	00000206 	br	1000d108 <alt_get_errno+0x3c>
1000d100:	00840074 	movhi	r2,4097
1000d104:	10883004 	addi	r2,r2,8384
}
1000d108:	e037883a 	mov	sp,fp
1000d10c:	dfc00117 	ldw	ra,4(sp)
1000d110:	df000017 	ldw	fp,0(sp)
1000d114:	dec00204 	addi	sp,sp,8
1000d118:	f800283a 	ret

1000d11c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000d11c:	defffa04 	addi	sp,sp,-24
1000d120:	dfc00515 	stw	ra,20(sp)
1000d124:	df000415 	stw	fp,16(sp)
1000d128:	df000404 	addi	fp,sp,16
1000d12c:	e13ffe15 	stw	r4,-8(fp)
1000d130:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000d134:	e0bffe17 	ldw	r2,-8(fp)
1000d138:	10000326 	beq	r2,zero,1000d148 <alt_dev_llist_insert+0x2c>
1000d13c:	e0bffe17 	ldw	r2,-8(fp)
1000d140:	10800217 	ldw	r2,8(r2)
1000d144:	1000051e 	bne	r2,zero,1000d15c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
1000d148:	000d0cc0 	call	1000d0cc <alt_get_errno>
1000d14c:	00c00584 	movi	r3,22
1000d150:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
1000d154:	00bffa84 	movi	r2,-22
1000d158:	00001306 	br	1000d1a8 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000d15c:	e0bffe17 	ldw	r2,-8(fp)
1000d160:	e0ffff17 	ldw	r3,-4(fp)
1000d164:	e0fffc15 	stw	r3,-16(fp)
1000d168:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000d16c:	e0bffd17 	ldw	r2,-12(fp)
1000d170:	e0fffc17 	ldw	r3,-16(fp)
1000d174:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000d178:	e0bffc17 	ldw	r2,-16(fp)
1000d17c:	10c00017 	ldw	r3,0(r2)
1000d180:	e0bffd17 	ldw	r2,-12(fp)
1000d184:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000d188:	e0bffc17 	ldw	r2,-16(fp)
1000d18c:	10800017 	ldw	r2,0(r2)
1000d190:	e0fffd17 	ldw	r3,-12(fp)
1000d194:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000d198:	e0bffc17 	ldw	r2,-16(fp)
1000d19c:	e0fffd17 	ldw	r3,-12(fp)
1000d1a0:	10c00015 	stw	r3,0(r2)

  return 0;  
1000d1a4:	0005883a 	mov	r2,zero
}
1000d1a8:	e037883a 	mov	sp,fp
1000d1ac:	dfc00117 	ldw	ra,4(sp)
1000d1b0:	df000017 	ldw	fp,0(sp)
1000d1b4:	dec00204 	addi	sp,sp,8
1000d1b8:	f800283a 	ret

1000d1bc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000d1bc:	defffd04 	addi	sp,sp,-12
1000d1c0:	dfc00215 	stw	ra,8(sp)
1000d1c4:	df000115 	stw	fp,4(sp)
1000d1c8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000d1cc:	00840074 	movhi	r2,4097
1000d1d0:	10b85304 	addi	r2,r2,-7860
1000d1d4:	e0bfff15 	stw	r2,-4(fp)
1000d1d8:	00000606 	br	1000d1f4 <_do_ctors+0x38>
        (*ctor) (); 
1000d1dc:	e0bfff17 	ldw	r2,-4(fp)
1000d1e0:	10800017 	ldw	r2,0(r2)
1000d1e4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000d1e8:	e0bfff17 	ldw	r2,-4(fp)
1000d1ec:	10bfff04 	addi	r2,r2,-4
1000d1f0:	e0bfff15 	stw	r2,-4(fp)
1000d1f4:	e0ffff17 	ldw	r3,-4(fp)
1000d1f8:	00840074 	movhi	r2,4097
1000d1fc:	10b85404 	addi	r2,r2,-7856
1000d200:	18bff62e 	bgeu	r3,r2,1000d1dc <__alt_data_end+0xf800d1dc>
        (*ctor) (); 
}
1000d204:	e037883a 	mov	sp,fp
1000d208:	dfc00117 	ldw	ra,4(sp)
1000d20c:	df000017 	ldw	fp,0(sp)
1000d210:	dec00204 	addi	sp,sp,8
1000d214:	f800283a 	ret

1000d218 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000d218:	defffd04 	addi	sp,sp,-12
1000d21c:	dfc00215 	stw	ra,8(sp)
1000d220:	df000115 	stw	fp,4(sp)
1000d224:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000d228:	00840074 	movhi	r2,4097
1000d22c:	10b85304 	addi	r2,r2,-7860
1000d230:	e0bfff15 	stw	r2,-4(fp)
1000d234:	00000606 	br	1000d250 <_do_dtors+0x38>
        (*dtor) (); 
1000d238:	e0bfff17 	ldw	r2,-4(fp)
1000d23c:	10800017 	ldw	r2,0(r2)
1000d240:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000d244:	e0bfff17 	ldw	r2,-4(fp)
1000d248:	10bfff04 	addi	r2,r2,-4
1000d24c:	e0bfff15 	stw	r2,-4(fp)
1000d250:	e0ffff17 	ldw	r3,-4(fp)
1000d254:	00840074 	movhi	r2,4097
1000d258:	10b85404 	addi	r2,r2,-7856
1000d25c:	18bff62e 	bgeu	r3,r2,1000d238 <__alt_data_end+0xf800d238>
        (*dtor) (); 
}
1000d260:	e037883a 	mov	sp,fp
1000d264:	dfc00117 	ldw	ra,4(sp)
1000d268:	df000017 	ldw	fp,0(sp)
1000d26c:	dec00204 	addi	sp,sp,8
1000d270:	f800283a 	ret

1000d274 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000d274:	deffff04 	addi	sp,sp,-4
1000d278:	df000015 	stw	fp,0(sp)
1000d27c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000d280:	e037883a 	mov	sp,fp
1000d284:	df000017 	ldw	fp,0(sp)
1000d288:	dec00104 	addi	sp,sp,4
1000d28c:	f800283a 	ret

1000d290 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000d290:	defff904 	addi	sp,sp,-28
1000d294:	dfc00615 	stw	ra,24(sp)
1000d298:	df000515 	stw	fp,20(sp)
1000d29c:	df000504 	addi	fp,sp,20
1000d2a0:	e13ffc15 	stw	r4,-16(fp)
1000d2a4:	e17ffd15 	stw	r5,-12(fp)
1000d2a8:	e1bffe15 	stw	r6,-8(fp)
1000d2ac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000d2b0:	e0800217 	ldw	r2,8(fp)
1000d2b4:	d8800015 	stw	r2,0(sp)
1000d2b8:	e13ffc17 	ldw	r4,-16(fp)
1000d2bc:	e17ffd17 	ldw	r5,-12(fp)
1000d2c0:	e1bffe17 	ldw	r6,-8(fp)
1000d2c4:	e1ffff17 	ldw	r7,-4(fp)
1000d2c8:	000d4680 	call	1000d468 <alt_iic_isr_register>
}  
1000d2cc:	e037883a 	mov	sp,fp
1000d2d0:	dfc00117 	ldw	ra,4(sp)
1000d2d4:	df000017 	ldw	fp,0(sp)
1000d2d8:	dec00204 	addi	sp,sp,8
1000d2dc:	f800283a 	ret

1000d2e0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000d2e0:	defff904 	addi	sp,sp,-28
1000d2e4:	df000615 	stw	fp,24(sp)
1000d2e8:	df000604 	addi	fp,sp,24
1000d2ec:	e13ffe15 	stw	r4,-8(fp)
1000d2f0:	e17fff15 	stw	r5,-4(fp)
1000d2f4:	e0bfff17 	ldw	r2,-4(fp)
1000d2f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d2fc:	0005303a 	rdctl	r2,status
1000d300:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d304:	e0fffb17 	ldw	r3,-20(fp)
1000d308:	00bfff84 	movi	r2,-2
1000d30c:	1884703a 	and	r2,r3,r2
1000d310:	1001703a 	wrctl	status,r2
  
  return context;
1000d314:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000d318:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000d31c:	e0bffa17 	ldw	r2,-24(fp)
1000d320:	00c00044 	movi	r3,1
1000d324:	1884983a 	sll	r2,r3,r2
1000d328:	1007883a 	mov	r3,r2
1000d32c:	00840074 	movhi	r2,4097
1000d330:	10883404 	addi	r2,r2,8400
1000d334:	10800017 	ldw	r2,0(r2)
1000d338:	1886b03a 	or	r3,r3,r2
1000d33c:	00840074 	movhi	r2,4097
1000d340:	10883404 	addi	r2,r2,8400
1000d344:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000d348:	00840074 	movhi	r2,4097
1000d34c:	10883404 	addi	r2,r2,8400
1000d350:	10800017 	ldw	r2,0(r2)
1000d354:	100170fa 	wrctl	ienable,r2
1000d358:	e0bffc17 	ldw	r2,-16(fp)
1000d35c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d360:	e0bffd17 	ldw	r2,-12(fp)
1000d364:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000d368:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
1000d36c:	e037883a 	mov	sp,fp
1000d370:	df000017 	ldw	fp,0(sp)
1000d374:	dec00104 	addi	sp,sp,4
1000d378:	f800283a 	ret

1000d37c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000d37c:	defff904 	addi	sp,sp,-28
1000d380:	df000615 	stw	fp,24(sp)
1000d384:	df000604 	addi	fp,sp,24
1000d388:	e13ffe15 	stw	r4,-8(fp)
1000d38c:	e17fff15 	stw	r5,-4(fp)
1000d390:	e0bfff17 	ldw	r2,-4(fp)
1000d394:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d398:	0005303a 	rdctl	r2,status
1000d39c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d3a0:	e0fffb17 	ldw	r3,-20(fp)
1000d3a4:	00bfff84 	movi	r2,-2
1000d3a8:	1884703a 	and	r2,r3,r2
1000d3ac:	1001703a 	wrctl	status,r2
  
  return context;
1000d3b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000d3b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000d3b8:	e0bffa17 	ldw	r2,-24(fp)
1000d3bc:	00c00044 	movi	r3,1
1000d3c0:	1884983a 	sll	r2,r3,r2
1000d3c4:	0084303a 	nor	r2,zero,r2
1000d3c8:	1007883a 	mov	r3,r2
1000d3cc:	00840074 	movhi	r2,4097
1000d3d0:	10883404 	addi	r2,r2,8400
1000d3d4:	10800017 	ldw	r2,0(r2)
1000d3d8:	1886703a 	and	r3,r3,r2
1000d3dc:	00840074 	movhi	r2,4097
1000d3e0:	10883404 	addi	r2,r2,8400
1000d3e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000d3e8:	00840074 	movhi	r2,4097
1000d3ec:	10883404 	addi	r2,r2,8400
1000d3f0:	10800017 	ldw	r2,0(r2)
1000d3f4:	100170fa 	wrctl	ienable,r2
1000d3f8:	e0bffc17 	ldw	r2,-16(fp)
1000d3fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d400:	e0bffd17 	ldw	r2,-12(fp)
1000d404:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000d408:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
1000d40c:	e037883a 	mov	sp,fp
1000d410:	df000017 	ldw	fp,0(sp)
1000d414:	dec00104 	addi	sp,sp,4
1000d418:	f800283a 	ret

1000d41c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000d41c:	defffc04 	addi	sp,sp,-16
1000d420:	df000315 	stw	fp,12(sp)
1000d424:	df000304 	addi	fp,sp,12
1000d428:	e13ffe15 	stw	r4,-8(fp)
1000d42c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000d430:	000530fa 	rdctl	r2,ienable
1000d434:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000d438:	e0bfff17 	ldw	r2,-4(fp)
1000d43c:	00c00044 	movi	r3,1
1000d440:	1884983a 	sll	r2,r3,r2
1000d444:	1007883a 	mov	r3,r2
1000d448:	e0bffd17 	ldw	r2,-12(fp)
1000d44c:	1884703a 	and	r2,r3,r2
1000d450:	1004c03a 	cmpne	r2,r2,zero
1000d454:	10803fcc 	andi	r2,r2,255
}
1000d458:	e037883a 	mov	sp,fp
1000d45c:	df000017 	ldw	fp,0(sp)
1000d460:	dec00104 	addi	sp,sp,4
1000d464:	f800283a 	ret

1000d468 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000d468:	defff504 	addi	sp,sp,-44
1000d46c:	dfc00a15 	stw	ra,40(sp)
1000d470:	df000915 	stw	fp,36(sp)
1000d474:	df000904 	addi	fp,sp,36
1000d478:	e13ffc15 	stw	r4,-16(fp)
1000d47c:	e17ffd15 	stw	r5,-12(fp)
1000d480:	e1bffe15 	stw	r6,-8(fp)
1000d484:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000d488:	00bffa84 	movi	r2,-22
1000d48c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000d490:	e0bffd17 	ldw	r2,-12(fp)
1000d494:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000d498:	e0bff817 	ldw	r2,-32(fp)
1000d49c:	10800808 	cmpgei	r2,r2,32
1000d4a0:	1000271e 	bne	r2,zero,1000d540 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d4a4:	0005303a 	rdctl	r2,status
1000d4a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d4ac:	e0fffa17 	ldw	r3,-24(fp)
1000d4b0:	00bfff84 	movi	r2,-2
1000d4b4:	1884703a 	and	r2,r3,r2
1000d4b8:	1001703a 	wrctl	status,r2
  
  return context;
1000d4bc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000d4c0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000d4c4:	00c40074 	movhi	r3,4097
1000d4c8:	18c84104 	addi	r3,r3,8452
1000d4cc:	e0bff817 	ldw	r2,-32(fp)
1000d4d0:	100490fa 	slli	r2,r2,3
1000d4d4:	1885883a 	add	r2,r3,r2
1000d4d8:	e0fffe17 	ldw	r3,-8(fp)
1000d4dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000d4e0:	00c40074 	movhi	r3,4097
1000d4e4:	18c84104 	addi	r3,r3,8452
1000d4e8:	e0bff817 	ldw	r2,-32(fp)
1000d4ec:	100490fa 	slli	r2,r2,3
1000d4f0:	1885883a 	add	r2,r3,r2
1000d4f4:	10800104 	addi	r2,r2,4
1000d4f8:	e0ffff17 	ldw	r3,-4(fp)
1000d4fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000d500:	e0bffe17 	ldw	r2,-8(fp)
1000d504:	10000526 	beq	r2,zero,1000d51c <alt_iic_isr_register+0xb4>
1000d508:	e0bff817 	ldw	r2,-32(fp)
1000d50c:	e13ffc17 	ldw	r4,-16(fp)
1000d510:	100b883a 	mov	r5,r2
1000d514:	000d2e00 	call	1000d2e0 <alt_ic_irq_enable>
1000d518:	00000406 	br	1000d52c <alt_iic_isr_register+0xc4>
1000d51c:	e0bff817 	ldw	r2,-32(fp)
1000d520:	e13ffc17 	ldw	r4,-16(fp)
1000d524:	100b883a 	mov	r5,r2
1000d528:	000d37c0 	call	1000d37c <alt_ic_irq_disable>
1000d52c:	e0bff715 	stw	r2,-36(fp)
1000d530:	e0bff917 	ldw	r2,-28(fp)
1000d534:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d538:	e0bffb17 	ldw	r2,-20(fp)
1000d53c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000d540:	e0bff717 	ldw	r2,-36(fp)
}
1000d544:	e037883a 	mov	sp,fp
1000d548:	dfc00117 	ldw	ra,4(sp)
1000d54c:	df000017 	ldw	fp,0(sp)
1000d550:	dec00204 	addi	sp,sp,8
1000d554:	f800283a 	ret

1000d558 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000d558:	defff804 	addi	sp,sp,-32
1000d55c:	dfc00715 	stw	ra,28(sp)
1000d560:	df000615 	stw	fp,24(sp)
1000d564:	dc000515 	stw	r16,20(sp)
1000d568:	df000504 	addi	fp,sp,20
1000d56c:	e13ffc15 	stw	r4,-16(fp)
1000d570:	e17ffd15 	stw	r5,-12(fp)
1000d574:	e1bffe15 	stw	r6,-8(fp)
1000d578:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
1000d57c:	e13ffd17 	ldw	r4,-12(fp)
1000d580:	e17ffe17 	ldw	r5,-8(fp)
1000d584:	e1bfff17 	ldw	r6,-4(fp)
1000d588:	000d7f00 	call	1000d7f0 <open>
1000d58c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
1000d590:	e0bffb17 	ldw	r2,-20(fp)
1000d594:	10002216 	blt	r2,zero,1000d620 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000d598:	04040074 	movhi	r16,4097
1000d59c:	843d0b04 	addi	r16,r16,-3028
1000d5a0:	e0bffb17 	ldw	r2,-20(fp)
1000d5a4:	1009883a 	mov	r4,r2
1000d5a8:	01400304 	movi	r5,12
1000d5ac:	000b2bc0 	call	1000b2bc <__mulsi3>
1000d5b0:	8085883a 	add	r2,r16,r2
1000d5b4:	10c00017 	ldw	r3,0(r2)
1000d5b8:	e0bffc17 	ldw	r2,-16(fp)
1000d5bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000d5c0:	04040074 	movhi	r16,4097
1000d5c4:	843d0b04 	addi	r16,r16,-3028
1000d5c8:	e0bffb17 	ldw	r2,-20(fp)
1000d5cc:	1009883a 	mov	r4,r2
1000d5d0:	01400304 	movi	r5,12
1000d5d4:	000b2bc0 	call	1000b2bc <__mulsi3>
1000d5d8:	8085883a 	add	r2,r16,r2
1000d5dc:	10800104 	addi	r2,r2,4
1000d5e0:	10c00017 	ldw	r3,0(r2)
1000d5e4:	e0bffc17 	ldw	r2,-16(fp)
1000d5e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000d5ec:	04040074 	movhi	r16,4097
1000d5f0:	843d0b04 	addi	r16,r16,-3028
1000d5f4:	e0bffb17 	ldw	r2,-20(fp)
1000d5f8:	1009883a 	mov	r4,r2
1000d5fc:	01400304 	movi	r5,12
1000d600:	000b2bc0 	call	1000b2bc <__mulsi3>
1000d604:	8085883a 	add	r2,r16,r2
1000d608:	10800204 	addi	r2,r2,8
1000d60c:	10c00017 	ldw	r3,0(r2)
1000d610:	e0bffc17 	ldw	r2,-16(fp)
1000d614:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000d618:	e13ffb17 	ldw	r4,-20(fp)
1000d61c:	000c0680 	call	1000c068 <alt_release_fd>
  }
} 
1000d620:	e037883a 	mov	sp,fp
1000d624:	dfc00217 	ldw	ra,8(sp)
1000d628:	df000117 	ldw	fp,4(sp)
1000d62c:	dc000017 	ldw	r16,0(sp)
1000d630:	dec00304 	addi	sp,sp,12
1000d634:	f800283a 	ret

1000d638 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000d638:	defffb04 	addi	sp,sp,-20
1000d63c:	dfc00415 	stw	ra,16(sp)
1000d640:	df000315 	stw	fp,12(sp)
1000d644:	df000304 	addi	fp,sp,12
1000d648:	e13ffd15 	stw	r4,-12(fp)
1000d64c:	e17ffe15 	stw	r5,-8(fp)
1000d650:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000d654:	01040074 	movhi	r4,4097
1000d658:	213d0e04 	addi	r4,r4,-3016
1000d65c:	e17ffd17 	ldw	r5,-12(fp)
1000d660:	01800044 	movi	r6,1
1000d664:	01c07fc4 	movi	r7,511
1000d668:	000d5580 	call	1000d558 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000d66c:	01040074 	movhi	r4,4097
1000d670:	213d0b04 	addi	r4,r4,-3028
1000d674:	e17ffe17 	ldw	r5,-8(fp)
1000d678:	000d883a 	mov	r6,zero
1000d67c:	01c07fc4 	movi	r7,511
1000d680:	000d5580 	call	1000d558 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000d684:	01040074 	movhi	r4,4097
1000d688:	213d1104 	addi	r4,r4,-3004
1000d68c:	e17fff17 	ldw	r5,-4(fp)
1000d690:	01800044 	movi	r6,1
1000d694:	01c07fc4 	movi	r7,511
1000d698:	000d5580 	call	1000d558 <alt_open_fd>
}  
1000d69c:	e037883a 	mov	sp,fp
1000d6a0:	dfc00117 	ldw	ra,4(sp)
1000d6a4:	df000017 	ldw	fp,0(sp)
1000d6a8:	dec00204 	addi	sp,sp,8
1000d6ac:	f800283a 	ret

1000d6b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d6b0:	defffe04 	addi	sp,sp,-8
1000d6b4:	dfc00115 	stw	ra,4(sp)
1000d6b8:	df000015 	stw	fp,0(sp)
1000d6bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d6c0:	00840074 	movhi	r2,4097
1000d6c4:	10818d04 	addi	r2,r2,1588
1000d6c8:	10800017 	ldw	r2,0(r2)
1000d6cc:	10000526 	beq	r2,zero,1000d6e4 <alt_get_errno+0x34>
1000d6d0:	00840074 	movhi	r2,4097
1000d6d4:	10818d04 	addi	r2,r2,1588
1000d6d8:	10800017 	ldw	r2,0(r2)
1000d6dc:	103ee83a 	callr	r2
1000d6e0:	00000206 	br	1000d6ec <alt_get_errno+0x3c>
1000d6e4:	00840074 	movhi	r2,4097
1000d6e8:	10883004 	addi	r2,r2,8384
}
1000d6ec:	e037883a 	mov	sp,fp
1000d6f0:	dfc00117 	ldw	ra,4(sp)
1000d6f4:	df000017 	ldw	fp,0(sp)
1000d6f8:	dec00204 	addi	sp,sp,8
1000d6fc:	f800283a 	ret

1000d700 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000d700:	defffb04 	addi	sp,sp,-20
1000d704:	dfc00415 	stw	ra,16(sp)
1000d708:	df000315 	stw	fp,12(sp)
1000d70c:	dc000215 	stw	r16,8(sp)
1000d710:	df000204 	addi	fp,sp,8
1000d714:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000d718:	e0bfff17 	ldw	r2,-4(fp)
1000d71c:	10800217 	ldw	r2,8(r2)
1000d720:	10d00034 	orhi	r3,r2,16384
1000d724:	e0bfff17 	ldw	r2,-4(fp)
1000d728:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000d72c:	e03ffe15 	stw	zero,-8(fp)
1000d730:	00002206 	br	1000d7bc <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000d734:	04040074 	movhi	r16,4097
1000d738:	843d0b04 	addi	r16,r16,-3028
1000d73c:	e0bffe17 	ldw	r2,-8(fp)
1000d740:	1009883a 	mov	r4,r2
1000d744:	01400304 	movi	r5,12
1000d748:	000b2bc0 	call	1000b2bc <__mulsi3>
1000d74c:	8085883a 	add	r2,r16,r2
1000d750:	10c00017 	ldw	r3,0(r2)
1000d754:	e0bfff17 	ldw	r2,-4(fp)
1000d758:	10800017 	ldw	r2,0(r2)
1000d75c:	1880141e 	bne	r3,r2,1000d7b0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000d760:	04040074 	movhi	r16,4097
1000d764:	843d0b04 	addi	r16,r16,-3028
1000d768:	e0bffe17 	ldw	r2,-8(fp)
1000d76c:	1009883a 	mov	r4,r2
1000d770:	01400304 	movi	r5,12
1000d774:	000b2bc0 	call	1000b2bc <__mulsi3>
1000d778:	8085883a 	add	r2,r16,r2
1000d77c:	10800204 	addi	r2,r2,8
1000d780:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000d784:	10000a0e 	bge	r2,zero,1000d7b0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000d788:	e13ffe17 	ldw	r4,-8(fp)
1000d78c:	01400304 	movi	r5,12
1000d790:	000b2bc0 	call	1000b2bc <__mulsi3>
1000d794:	00c40074 	movhi	r3,4097
1000d798:	18fd0b04 	addi	r3,r3,-3028
1000d79c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000d7a0:	e0bfff17 	ldw	r2,-4(fp)
1000d7a4:	18800226 	beq	r3,r2,1000d7b0 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000d7a8:	00bffcc4 	movi	r2,-13
1000d7ac:	00000a06 	br	1000d7d8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000d7b0:	e0bffe17 	ldw	r2,-8(fp)
1000d7b4:	10800044 	addi	r2,r2,1
1000d7b8:	e0bffe15 	stw	r2,-8(fp)
1000d7bc:	00840074 	movhi	r2,4097
1000d7c0:	10818c04 	addi	r2,r2,1584
1000d7c4:	10800017 	ldw	r2,0(r2)
1000d7c8:	1007883a 	mov	r3,r2
1000d7cc:	e0bffe17 	ldw	r2,-8(fp)
1000d7d0:	18bfd82e 	bgeu	r3,r2,1000d734 <__alt_data_end+0xf800d734>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000d7d4:	0005883a 	mov	r2,zero
}
1000d7d8:	e037883a 	mov	sp,fp
1000d7dc:	dfc00217 	ldw	ra,8(sp)
1000d7e0:	df000117 	ldw	fp,4(sp)
1000d7e4:	dc000017 	ldw	r16,0(sp)
1000d7e8:	dec00304 	addi	sp,sp,12
1000d7ec:	f800283a 	ret

1000d7f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000d7f0:	defff604 	addi	sp,sp,-40
1000d7f4:	dfc00915 	stw	ra,36(sp)
1000d7f8:	df000815 	stw	fp,32(sp)
1000d7fc:	df000804 	addi	fp,sp,32
1000d800:	e13ffd15 	stw	r4,-12(fp)
1000d804:	e17ffe15 	stw	r5,-8(fp)
1000d808:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000d80c:	00bfffc4 	movi	r2,-1
1000d810:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000d814:	00bffb44 	movi	r2,-19
1000d818:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000d81c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000d820:	e13ffd17 	ldw	r4,-12(fp)
1000d824:	01440074 	movhi	r5,4097
1000d828:	29418a04 	addi	r5,r5,1576
1000d82c:	000db040 	call	1000db04 <alt_find_dev>
1000d830:	e0bff815 	stw	r2,-32(fp)
1000d834:	e0bff817 	ldw	r2,-32(fp)
1000d838:	1000051e 	bne	r2,zero,1000d850 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000d83c:	e13ffd17 	ldw	r4,-12(fp)
1000d840:	000db940 	call	1000db94 <alt_find_file>
1000d844:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000d848:	00800044 	movi	r2,1
1000d84c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000d850:	e0bff817 	ldw	r2,-32(fp)
1000d854:	10002a26 	beq	r2,zero,1000d900 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000d858:	e13ff817 	ldw	r4,-32(fp)
1000d85c:	000dca80 	call	1000dca8 <alt_get_fd>
1000d860:	e0bff915 	stw	r2,-28(fp)
1000d864:	e0bff917 	ldw	r2,-28(fp)
1000d868:	1000030e 	bge	r2,zero,1000d878 <open+0x88>
    {
      status = index;
1000d86c:	e0bff917 	ldw	r2,-28(fp)
1000d870:	e0bffa15 	stw	r2,-24(fp)
1000d874:	00002406 	br	1000d908 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1000d878:	e13ff917 	ldw	r4,-28(fp)
1000d87c:	01400304 	movi	r5,12
1000d880:	000b2bc0 	call	1000b2bc <__mulsi3>
1000d884:	00c40074 	movhi	r3,4097
1000d888:	18fd0b04 	addi	r3,r3,-3028
1000d88c:	10c5883a 	add	r2,r2,r3
1000d890:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000d894:	e0fffe17 	ldw	r3,-8(fp)
1000d898:	00900034 	movhi	r2,16384
1000d89c:	10bfffc4 	addi	r2,r2,-1
1000d8a0:	1886703a 	and	r3,r3,r2
1000d8a4:	e0bffc17 	ldw	r2,-16(fp)
1000d8a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000d8ac:	e0bffb17 	ldw	r2,-20(fp)
1000d8b0:	1000051e 	bne	r2,zero,1000d8c8 <open+0xd8>
1000d8b4:	e13ffc17 	ldw	r4,-16(fp)
1000d8b8:	000d7000 	call	1000d700 <alt_file_locked>
1000d8bc:	e0bffa15 	stw	r2,-24(fp)
1000d8c0:	e0bffa17 	ldw	r2,-24(fp)
1000d8c4:	10001016 	blt	r2,zero,1000d908 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000d8c8:	e0bff817 	ldw	r2,-32(fp)
1000d8cc:	10800317 	ldw	r2,12(r2)
1000d8d0:	10000826 	beq	r2,zero,1000d8f4 <open+0x104>
1000d8d4:	e0bff817 	ldw	r2,-32(fp)
1000d8d8:	10800317 	ldw	r2,12(r2)
1000d8dc:	e13ffc17 	ldw	r4,-16(fp)
1000d8e0:	e17ffd17 	ldw	r5,-12(fp)
1000d8e4:	e1bffe17 	ldw	r6,-8(fp)
1000d8e8:	e1ffff17 	ldw	r7,-4(fp)
1000d8ec:	103ee83a 	callr	r2
1000d8f0:	00000106 	br	1000d8f8 <open+0x108>
1000d8f4:	0005883a 	mov	r2,zero
1000d8f8:	e0bffa15 	stw	r2,-24(fp)
1000d8fc:	00000206 	br	1000d908 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000d900:	00bffb44 	movi	r2,-19
1000d904:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000d908:	e0bffa17 	ldw	r2,-24(fp)
1000d90c:	1000080e 	bge	r2,zero,1000d930 <open+0x140>
  {
    alt_release_fd (index);  
1000d910:	e13ff917 	ldw	r4,-28(fp)
1000d914:	000c0680 	call	1000c068 <alt_release_fd>
    ALT_ERRNO = -status;
1000d918:	000d6b00 	call	1000d6b0 <alt_get_errno>
1000d91c:	e0fffa17 	ldw	r3,-24(fp)
1000d920:	00c7c83a 	sub	r3,zero,r3
1000d924:	10c00015 	stw	r3,0(r2)
    return -1;
1000d928:	00bfffc4 	movi	r2,-1
1000d92c:	00000106 	br	1000d934 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
1000d930:	e0bff917 	ldw	r2,-28(fp)
}
1000d934:	e037883a 	mov	sp,fp
1000d938:	dfc00117 	ldw	ra,4(sp)
1000d93c:	df000017 	ldw	fp,0(sp)
1000d940:	dec00204 	addi	sp,sp,8
1000d944:	f800283a 	ret

1000d948 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000d948:	defffa04 	addi	sp,sp,-24
1000d94c:	df000515 	stw	fp,20(sp)
1000d950:	df000504 	addi	fp,sp,20
1000d954:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d958:	0005303a 	rdctl	r2,status
1000d95c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d960:	e0fffc17 	ldw	r3,-16(fp)
1000d964:	00bfff84 	movi	r2,-2
1000d968:	1884703a 	and	r2,r3,r2
1000d96c:	1001703a 	wrctl	status,r2
  
  return context;
1000d970:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000d974:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000d978:	e0bfff17 	ldw	r2,-4(fp)
1000d97c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000d980:	e0bffd17 	ldw	r2,-12(fp)
1000d984:	10800017 	ldw	r2,0(r2)
1000d988:	e0fffd17 	ldw	r3,-12(fp)
1000d98c:	18c00117 	ldw	r3,4(r3)
1000d990:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000d994:	e0bffd17 	ldw	r2,-12(fp)
1000d998:	10800117 	ldw	r2,4(r2)
1000d99c:	e0fffd17 	ldw	r3,-12(fp)
1000d9a0:	18c00017 	ldw	r3,0(r3)
1000d9a4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000d9a8:	e0bffd17 	ldw	r2,-12(fp)
1000d9ac:	e0fffd17 	ldw	r3,-12(fp)
1000d9b0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000d9b4:	e0bffd17 	ldw	r2,-12(fp)
1000d9b8:	e0fffd17 	ldw	r3,-12(fp)
1000d9bc:	10c00015 	stw	r3,0(r2)
1000d9c0:	e0bffb17 	ldw	r2,-20(fp)
1000d9c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d9c8:	e0bffe17 	ldw	r2,-8(fp)
1000d9cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000d9d0:	e037883a 	mov	sp,fp
1000d9d4:	df000017 	ldw	fp,0(sp)
1000d9d8:	dec00104 	addi	sp,sp,4
1000d9dc:	f800283a 	ret

1000d9e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000d9e0:	defffb04 	addi	sp,sp,-20
1000d9e4:	dfc00415 	stw	ra,16(sp)
1000d9e8:	df000315 	stw	fp,12(sp)
1000d9ec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000d9f0:	d0a00d17 	ldw	r2,-32716(gp)
1000d9f4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000d9f8:	d0a6b317 	ldw	r2,-25908(gp)
1000d9fc:	10800044 	addi	r2,r2,1
1000da00:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000da04:	00002e06 	br	1000dac0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000da08:	e0bffd17 	ldw	r2,-12(fp)
1000da0c:	10800017 	ldw	r2,0(r2)
1000da10:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000da14:	e0bffd17 	ldw	r2,-12(fp)
1000da18:	10800403 	ldbu	r2,16(r2)
1000da1c:	10803fcc 	andi	r2,r2,255
1000da20:	10000426 	beq	r2,zero,1000da34 <alt_tick+0x54>
1000da24:	d0a6b317 	ldw	r2,-25908(gp)
1000da28:	1000021e 	bne	r2,zero,1000da34 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000da2c:	e0bffd17 	ldw	r2,-12(fp)
1000da30:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000da34:	e0bffd17 	ldw	r2,-12(fp)
1000da38:	10800217 	ldw	r2,8(r2)
1000da3c:	d0e6b317 	ldw	r3,-25908(gp)
1000da40:	18801d36 	bltu	r3,r2,1000dab8 <alt_tick+0xd8>
1000da44:	e0bffd17 	ldw	r2,-12(fp)
1000da48:	10800403 	ldbu	r2,16(r2)
1000da4c:	10803fcc 	andi	r2,r2,255
1000da50:	1000191e 	bne	r2,zero,1000dab8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000da54:	e0bffd17 	ldw	r2,-12(fp)
1000da58:	10c00317 	ldw	r3,12(r2)
1000da5c:	e0bffd17 	ldw	r2,-12(fp)
1000da60:	10800517 	ldw	r2,20(r2)
1000da64:	1009883a 	mov	r4,r2
1000da68:	183ee83a 	callr	r3
1000da6c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000da70:	e0bfff17 	ldw	r2,-4(fp)
1000da74:	1000031e 	bne	r2,zero,1000da84 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000da78:	e13ffd17 	ldw	r4,-12(fp)
1000da7c:	000d9480 	call	1000d948 <alt_alarm_stop>
1000da80:	00000d06 	br	1000dab8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000da84:	e0bffd17 	ldw	r2,-12(fp)
1000da88:	10c00217 	ldw	r3,8(r2)
1000da8c:	e0bfff17 	ldw	r2,-4(fp)
1000da90:	1887883a 	add	r3,r3,r2
1000da94:	e0bffd17 	ldw	r2,-12(fp)
1000da98:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000da9c:	e0bffd17 	ldw	r2,-12(fp)
1000daa0:	10c00217 	ldw	r3,8(r2)
1000daa4:	d0a6b317 	ldw	r2,-25908(gp)
1000daa8:	1880032e 	bgeu	r3,r2,1000dab8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000daac:	e0bffd17 	ldw	r2,-12(fp)
1000dab0:	00c00044 	movi	r3,1
1000dab4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000dab8:	e0bffe17 	ldw	r2,-8(fp)
1000dabc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000dac0:	e0fffd17 	ldw	r3,-12(fp)
1000dac4:	d0a00d04 	addi	r2,gp,-32716
1000dac8:	18bfcf1e 	bne	r3,r2,1000da08 <__alt_data_end+0xf800da08>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000dacc:	0001883a 	nop
}
1000dad0:	e037883a 	mov	sp,fp
1000dad4:	dfc00117 	ldw	ra,4(sp)
1000dad8:	df000017 	ldw	fp,0(sp)
1000dadc:	dec00204 	addi	sp,sp,8
1000dae0:	f800283a 	ret

1000dae4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
1000dae4:	deffff04 	addi	sp,sp,-4
1000dae8:	df000015 	stw	fp,0(sp)
1000daec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000daf0:	000170fa 	wrctl	ienable,zero
}
1000daf4:	e037883a 	mov	sp,fp
1000daf8:	df000017 	ldw	fp,0(sp)
1000dafc:	dec00104 	addi	sp,sp,4
1000db00:	f800283a 	ret

1000db04 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000db04:	defffa04 	addi	sp,sp,-24
1000db08:	dfc00515 	stw	ra,20(sp)
1000db0c:	df000415 	stw	fp,16(sp)
1000db10:	df000404 	addi	fp,sp,16
1000db14:	e13ffe15 	stw	r4,-8(fp)
1000db18:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000db1c:	e0bfff17 	ldw	r2,-4(fp)
1000db20:	10800017 	ldw	r2,0(r2)
1000db24:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000db28:	e13ffe17 	ldw	r4,-8(fp)
1000db2c:	00023340 	call	10002334 <strlen>
1000db30:	10800044 	addi	r2,r2,1
1000db34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000db38:	00000d06 	br	1000db70 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000db3c:	e0bffc17 	ldw	r2,-16(fp)
1000db40:	10c00217 	ldw	r3,8(r2)
1000db44:	e0bffd17 	ldw	r2,-12(fp)
1000db48:	1809883a 	mov	r4,r3
1000db4c:	e17ffe17 	ldw	r5,-8(fp)
1000db50:	100d883a 	mov	r6,r2
1000db54:	000ddc80 	call	1000ddc8 <memcmp>
1000db58:	1000021e 	bne	r2,zero,1000db64 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000db5c:	e0bffc17 	ldw	r2,-16(fp)
1000db60:	00000706 	br	1000db80 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000db64:	e0bffc17 	ldw	r2,-16(fp)
1000db68:	10800017 	ldw	r2,0(r2)
1000db6c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000db70:	e0fffc17 	ldw	r3,-16(fp)
1000db74:	e0bfff17 	ldw	r2,-4(fp)
1000db78:	18bff01e 	bne	r3,r2,1000db3c <__alt_data_end+0xf800db3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000db7c:	0005883a 	mov	r2,zero
}
1000db80:	e037883a 	mov	sp,fp
1000db84:	dfc00117 	ldw	ra,4(sp)
1000db88:	df000017 	ldw	fp,0(sp)
1000db8c:	dec00204 	addi	sp,sp,8
1000db90:	f800283a 	ret

1000db94 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000db94:	defffb04 	addi	sp,sp,-20
1000db98:	dfc00415 	stw	ra,16(sp)
1000db9c:	df000315 	stw	fp,12(sp)
1000dba0:	df000304 	addi	fp,sp,12
1000dba4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000dba8:	00840074 	movhi	r2,4097
1000dbac:	10818804 	addi	r2,r2,1568
1000dbb0:	10800017 	ldw	r2,0(r2)
1000dbb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000dbb8:	00003106 	br	1000dc80 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000dbbc:	e0bffd17 	ldw	r2,-12(fp)
1000dbc0:	10800217 	ldw	r2,8(r2)
1000dbc4:	1009883a 	mov	r4,r2
1000dbc8:	00023340 	call	10002334 <strlen>
1000dbcc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000dbd0:	e0bffd17 	ldw	r2,-12(fp)
1000dbd4:	10c00217 	ldw	r3,8(r2)
1000dbd8:	e0bffe17 	ldw	r2,-8(fp)
1000dbdc:	10bfffc4 	addi	r2,r2,-1
1000dbe0:	1885883a 	add	r2,r3,r2
1000dbe4:	10800003 	ldbu	r2,0(r2)
1000dbe8:	10803fcc 	andi	r2,r2,255
1000dbec:	1080201c 	xori	r2,r2,128
1000dbf0:	10bfe004 	addi	r2,r2,-128
1000dbf4:	10800bd8 	cmpnei	r2,r2,47
1000dbf8:	1000031e 	bne	r2,zero,1000dc08 <alt_find_file+0x74>
    {
      len -= 1;
1000dbfc:	e0bffe17 	ldw	r2,-8(fp)
1000dc00:	10bfffc4 	addi	r2,r2,-1
1000dc04:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000dc08:	e0bffe17 	ldw	r2,-8(fp)
1000dc0c:	e0ffff17 	ldw	r3,-4(fp)
1000dc10:	1885883a 	add	r2,r3,r2
1000dc14:	10800003 	ldbu	r2,0(r2)
1000dc18:	10803fcc 	andi	r2,r2,255
1000dc1c:	1080201c 	xori	r2,r2,128
1000dc20:	10bfe004 	addi	r2,r2,-128
1000dc24:	10800be0 	cmpeqi	r2,r2,47
1000dc28:	1000081e 	bne	r2,zero,1000dc4c <alt_find_file+0xb8>
1000dc2c:	e0bffe17 	ldw	r2,-8(fp)
1000dc30:	e0ffff17 	ldw	r3,-4(fp)
1000dc34:	1885883a 	add	r2,r3,r2
1000dc38:	10800003 	ldbu	r2,0(r2)
1000dc3c:	10803fcc 	andi	r2,r2,255
1000dc40:	1080201c 	xori	r2,r2,128
1000dc44:	10bfe004 	addi	r2,r2,-128
1000dc48:	10000a1e 	bne	r2,zero,1000dc74 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000dc4c:	e0bffd17 	ldw	r2,-12(fp)
1000dc50:	10c00217 	ldw	r3,8(r2)
1000dc54:	e0bffe17 	ldw	r2,-8(fp)
1000dc58:	1809883a 	mov	r4,r3
1000dc5c:	e17fff17 	ldw	r5,-4(fp)
1000dc60:	100d883a 	mov	r6,r2
1000dc64:	000ddc80 	call	1000ddc8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000dc68:	1000021e 	bne	r2,zero,1000dc74 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000dc6c:	e0bffd17 	ldw	r2,-12(fp)
1000dc70:	00000806 	br	1000dc94 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000dc74:	e0bffd17 	ldw	r2,-12(fp)
1000dc78:	10800017 	ldw	r2,0(r2)
1000dc7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000dc80:	e0fffd17 	ldw	r3,-12(fp)
1000dc84:	00840074 	movhi	r2,4097
1000dc88:	10818804 	addi	r2,r2,1568
1000dc8c:	18bfcb1e 	bne	r3,r2,1000dbbc <__alt_data_end+0xf800dbbc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000dc90:	0005883a 	mov	r2,zero
}
1000dc94:	e037883a 	mov	sp,fp
1000dc98:	dfc00117 	ldw	ra,4(sp)
1000dc9c:	df000017 	ldw	fp,0(sp)
1000dca0:	dec00204 	addi	sp,sp,8
1000dca4:	f800283a 	ret

1000dca8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000dca8:	defffa04 	addi	sp,sp,-24
1000dcac:	dfc00515 	stw	ra,20(sp)
1000dcb0:	df000415 	stw	fp,16(sp)
1000dcb4:	dc000315 	stw	r16,12(sp)
1000dcb8:	df000304 	addi	fp,sp,12
1000dcbc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
1000dcc0:	00bffa04 	movi	r2,-24
1000dcc4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000dcc8:	e03ffd15 	stw	zero,-12(fp)
1000dccc:	00002106 	br	1000dd54 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000dcd0:	04040074 	movhi	r16,4097
1000dcd4:	843d0b04 	addi	r16,r16,-3028
1000dcd8:	e0bffd17 	ldw	r2,-12(fp)
1000dcdc:	1009883a 	mov	r4,r2
1000dce0:	01400304 	movi	r5,12
1000dce4:	000b2bc0 	call	1000b2bc <__mulsi3>
1000dce8:	8085883a 	add	r2,r16,r2
1000dcec:	10800017 	ldw	r2,0(r2)
1000dcf0:	1000151e 	bne	r2,zero,1000dd48 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000dcf4:	04040074 	movhi	r16,4097
1000dcf8:	843d0b04 	addi	r16,r16,-3028
1000dcfc:	e0bffd17 	ldw	r2,-12(fp)
1000dd00:	1009883a 	mov	r4,r2
1000dd04:	01400304 	movi	r5,12
1000dd08:	000b2bc0 	call	1000b2bc <__mulsi3>
1000dd0c:	8085883a 	add	r2,r16,r2
1000dd10:	e0ffff17 	ldw	r3,-4(fp)
1000dd14:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000dd18:	00840074 	movhi	r2,4097
1000dd1c:	10818c04 	addi	r2,r2,1584
1000dd20:	10c00017 	ldw	r3,0(r2)
1000dd24:	e0bffd17 	ldw	r2,-12(fp)
1000dd28:	1880040e 	bge	r3,r2,1000dd3c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000dd2c:	00840074 	movhi	r2,4097
1000dd30:	10818c04 	addi	r2,r2,1584
1000dd34:	e0fffd17 	ldw	r3,-12(fp)
1000dd38:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000dd3c:	e0bffd17 	ldw	r2,-12(fp)
1000dd40:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1000dd44:	00000606 	br	1000dd60 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000dd48:	e0bffd17 	ldw	r2,-12(fp)
1000dd4c:	10800044 	addi	r2,r2,1
1000dd50:	e0bffd15 	stw	r2,-12(fp)
1000dd54:	e0bffd17 	ldw	r2,-12(fp)
1000dd58:	10800810 	cmplti	r2,r2,32
1000dd5c:	103fdc1e 	bne	r2,zero,1000dcd0 <__alt_data_end+0xf800dcd0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000dd60:	e0bffe17 	ldw	r2,-8(fp)
}
1000dd64:	e037883a 	mov	sp,fp
1000dd68:	dfc00217 	ldw	ra,8(sp)
1000dd6c:	df000117 	ldw	fp,4(sp)
1000dd70:	dc000017 	ldw	r16,0(sp)
1000dd74:	dec00304 	addi	sp,sp,12
1000dd78:	f800283a 	ret

1000dd7c <atexit>:
1000dd7c:	200b883a 	mov	r5,r4
1000dd80:	000d883a 	mov	r6,zero
1000dd84:	0009883a 	mov	r4,zero
1000dd88:	000f883a 	mov	r7,zero
1000dd8c:	000de441 	jmpi	1000de44 <__register_exitproc>

1000dd90 <exit>:
1000dd90:	defffe04 	addi	sp,sp,-8
1000dd94:	000b883a 	mov	r5,zero
1000dd98:	dc000015 	stw	r16,0(sp)
1000dd9c:	dfc00115 	stw	ra,4(sp)
1000dda0:	2021883a 	mov	r16,r4
1000dda4:	000df740 	call	1000df74 <__call_exitprocs>
1000dda8:	00840074 	movhi	r2,4097
1000ddac:	10818304 	addi	r2,r2,1548
1000ddb0:	11000017 	ldw	r4,0(r2)
1000ddb4:	20800f17 	ldw	r2,60(r4)
1000ddb8:	10000126 	beq	r2,zero,1000ddc0 <exit+0x30>
1000ddbc:	103ee83a 	callr	r2
1000ddc0:	8009883a 	mov	r4,r16
1000ddc4:	000e1140 	call	1000e114 <_exit>

1000ddc8 <memcmp>:
1000ddc8:	01c000c4 	movi	r7,3
1000ddcc:	3980192e 	bgeu	r7,r6,1000de34 <memcmp+0x6c>
1000ddd0:	2904b03a 	or	r2,r5,r4
1000ddd4:	11c4703a 	and	r2,r2,r7
1000ddd8:	10000f26 	beq	r2,zero,1000de18 <memcmp+0x50>
1000dddc:	20c00003 	ldbu	r3,0(r4)
1000dde0:	28800003 	ldbu	r2,0(r5)
1000dde4:	1880151e 	bne	r3,r2,1000de3c <memcmp+0x74>
1000dde8:	31bfff84 	addi	r6,r6,-2
1000ddec:	01ffffc4 	movi	r7,-1
1000ddf0:	00000406 	br	1000de04 <memcmp+0x3c>
1000ddf4:	20c00003 	ldbu	r3,0(r4)
1000ddf8:	28800003 	ldbu	r2,0(r5)
1000ddfc:	31bfffc4 	addi	r6,r6,-1
1000de00:	18800e1e 	bne	r3,r2,1000de3c <memcmp+0x74>
1000de04:	21000044 	addi	r4,r4,1
1000de08:	29400044 	addi	r5,r5,1
1000de0c:	31fff91e 	bne	r6,r7,1000ddf4 <__alt_data_end+0xf800ddf4>
1000de10:	0005883a 	mov	r2,zero
1000de14:	f800283a 	ret
1000de18:	20c00017 	ldw	r3,0(r4)
1000de1c:	28800017 	ldw	r2,0(r5)
1000de20:	1880041e 	bne	r3,r2,1000de34 <memcmp+0x6c>
1000de24:	31bfff04 	addi	r6,r6,-4
1000de28:	21000104 	addi	r4,r4,4
1000de2c:	29400104 	addi	r5,r5,4
1000de30:	39bff936 	bltu	r7,r6,1000de18 <__alt_data_end+0xf800de18>
1000de34:	303fe91e 	bne	r6,zero,1000dddc <__alt_data_end+0xf800dddc>
1000de38:	003ff506 	br	1000de10 <__alt_data_end+0xf800de10>
1000de3c:	1885c83a 	sub	r2,r3,r2
1000de40:	f800283a 	ret

1000de44 <__register_exitproc>:
1000de44:	defffa04 	addi	sp,sp,-24
1000de48:	00840074 	movhi	r2,4097
1000de4c:	10818304 	addi	r2,r2,1548
1000de50:	dc000315 	stw	r16,12(sp)
1000de54:	14000017 	ldw	r16,0(r2)
1000de58:	dc400415 	stw	r17,16(sp)
1000de5c:	dfc00515 	stw	ra,20(sp)
1000de60:	80805217 	ldw	r2,328(r16)
1000de64:	2023883a 	mov	r17,r4
1000de68:	10003e26 	beq	r2,zero,1000df64 <__register_exitproc+0x120>
1000de6c:	10c00117 	ldw	r3,4(r2)
1000de70:	020007c4 	movi	r8,31
1000de74:	40c0180e 	bge	r8,r3,1000ded8 <__register_exitproc+0x94>
1000de78:	00800034 	movhi	r2,0
1000de7c:	10800004 	addi	r2,r2,0
1000de80:	1000061e 	bne	r2,zero,1000de9c <__register_exitproc+0x58>
1000de84:	00bfffc4 	movi	r2,-1
1000de88:	dfc00517 	ldw	ra,20(sp)
1000de8c:	dc400417 	ldw	r17,16(sp)
1000de90:	dc000317 	ldw	r16,12(sp)
1000de94:	dec00604 	addi	sp,sp,24
1000de98:	f800283a 	ret
1000de9c:	01006404 	movi	r4,400
1000dea0:	d9400015 	stw	r5,0(sp)
1000dea4:	d9800115 	stw	r6,4(sp)
1000dea8:	d9c00215 	stw	r7,8(sp)
1000deac:	00000000 	call	10000000 <__alt_mem_sdram>
1000deb0:	d9400017 	ldw	r5,0(sp)
1000deb4:	d9800117 	ldw	r6,4(sp)
1000deb8:	d9c00217 	ldw	r7,8(sp)
1000debc:	103ff126 	beq	r2,zero,1000de84 <__alt_data_end+0xf800de84>
1000dec0:	80c05217 	ldw	r3,328(r16)
1000dec4:	10000115 	stw	zero,4(r2)
1000dec8:	10c00015 	stw	r3,0(r2)
1000decc:	80805215 	stw	r2,328(r16)
1000ded0:	10006215 	stw	zero,392(r2)
1000ded4:	10006315 	stw	zero,396(r2)
1000ded8:	10c00117 	ldw	r3,4(r2)
1000dedc:	88000d1e 	bne	r17,zero,1000df14 <__register_exitproc+0xd0>
1000dee0:	19000084 	addi	r4,r3,2
1000dee4:	2109883a 	add	r4,r4,r4
1000dee8:	18c00044 	addi	r3,r3,1
1000deec:	2109883a 	add	r4,r4,r4
1000def0:	1109883a 	add	r4,r2,r4
1000def4:	10c00115 	stw	r3,4(r2)
1000def8:	0005883a 	mov	r2,zero
1000defc:	21400015 	stw	r5,0(r4)
1000df00:	dfc00517 	ldw	ra,20(sp)
1000df04:	dc400417 	ldw	r17,16(sp)
1000df08:	dc000317 	ldw	r16,12(sp)
1000df0c:	dec00604 	addi	sp,sp,24
1000df10:	f800283a 	ret
1000df14:	02400044 	movi	r9,1
1000df18:	12806217 	ldw	r10,392(r2)
1000df1c:	48d2983a 	sll	r9,r9,r3
1000df20:	19000804 	addi	r4,r3,32
1000df24:	18d1883a 	add	r8,r3,r3
1000df28:	2109883a 	add	r4,r4,r4
1000df2c:	4211883a 	add	r8,r8,r8
1000df30:	2109883a 	add	r4,r4,r4
1000df34:	1109883a 	add	r4,r2,r4
1000df38:	1211883a 	add	r8,r2,r8
1000df3c:	5254b03a 	or	r10,r10,r9
1000df40:	21c02215 	stw	r7,136(r4)
1000df44:	41802215 	stw	r6,136(r8)
1000df48:	12806215 	stw	r10,392(r2)
1000df4c:	01000084 	movi	r4,2
1000df50:	893fe31e 	bne	r17,r4,1000dee0 <__alt_data_end+0xf800dee0>
1000df54:	11006317 	ldw	r4,396(r2)
1000df58:	2252b03a 	or	r9,r4,r9
1000df5c:	12406315 	stw	r9,396(r2)
1000df60:	003fdf06 	br	1000dee0 <__alt_data_end+0xf800dee0>
1000df64:	00840074 	movhi	r2,4097
1000df68:	10888104 	addi	r2,r2,8708
1000df6c:	80805215 	stw	r2,328(r16)
1000df70:	003fbe06 	br	1000de6c <__alt_data_end+0xf800de6c>

1000df74 <__call_exitprocs>:
1000df74:	00840074 	movhi	r2,4097
1000df78:	10818304 	addi	r2,r2,1548
1000df7c:	10800017 	ldw	r2,0(r2)
1000df80:	defff304 	addi	sp,sp,-52
1000df84:	df000b15 	stw	fp,44(sp)
1000df88:	d8800015 	stw	r2,0(sp)
1000df8c:	10805204 	addi	r2,r2,328
1000df90:	dd400815 	stw	r21,32(sp)
1000df94:	dfc00c15 	stw	ra,48(sp)
1000df98:	ddc00a15 	stw	r23,40(sp)
1000df9c:	dd800915 	stw	r22,36(sp)
1000dfa0:	dd000715 	stw	r20,28(sp)
1000dfa4:	dcc00615 	stw	r19,24(sp)
1000dfa8:	dc800515 	stw	r18,20(sp)
1000dfac:	dc400415 	stw	r17,16(sp)
1000dfb0:	dc000315 	stw	r16,12(sp)
1000dfb4:	d9000115 	stw	r4,4(sp)
1000dfb8:	2839883a 	mov	fp,r5
1000dfbc:	d8800215 	stw	r2,8(sp)
1000dfc0:	057fffc4 	movi	r21,-1
1000dfc4:	d8800017 	ldw	r2,0(sp)
1000dfc8:	ddc00217 	ldw	r23,8(sp)
1000dfcc:	14805217 	ldw	r18,328(r2)
1000dfd0:	90001726 	beq	r18,zero,1000e030 <__call_exitprocs+0xbc>
1000dfd4:	94400117 	ldw	r17,4(r18)
1000dfd8:	8c3fffc4 	addi	r16,r17,-1
1000dfdc:	80001116 	blt	r16,zero,1000e024 <__call_exitprocs+0xb0>
1000dfe0:	8c400044 	addi	r17,r17,1
1000dfe4:	8427883a 	add	r19,r16,r16
1000dfe8:	8c63883a 	add	r17,r17,r17
1000dfec:	95802204 	addi	r22,r18,136
1000dff0:	9ce7883a 	add	r19,r19,r19
1000dff4:	8c63883a 	add	r17,r17,r17
1000dff8:	b4e7883a 	add	r19,r22,r19
1000dffc:	9463883a 	add	r17,r18,r17
1000e000:	e0001726 	beq	fp,zero,1000e060 <__call_exitprocs+0xec>
1000e004:	8c87c83a 	sub	r3,r17,r18
1000e008:	b0c7883a 	add	r3,r22,r3
1000e00c:	18c01e17 	ldw	r3,120(r3)
1000e010:	1f001326 	beq	r3,fp,1000e060 <__call_exitprocs+0xec>
1000e014:	843fffc4 	addi	r16,r16,-1
1000e018:	9cffff04 	addi	r19,r19,-4
1000e01c:	8c7fff04 	addi	r17,r17,-4
1000e020:	857ff71e 	bne	r16,r21,1000e000 <__alt_data_end+0xf800e000>
1000e024:	00800034 	movhi	r2,0
1000e028:	10800004 	addi	r2,r2,0
1000e02c:	10002a1e 	bne	r2,zero,1000e0d8 <__call_exitprocs+0x164>
1000e030:	dfc00c17 	ldw	ra,48(sp)
1000e034:	df000b17 	ldw	fp,44(sp)
1000e038:	ddc00a17 	ldw	r23,40(sp)
1000e03c:	dd800917 	ldw	r22,36(sp)
1000e040:	dd400817 	ldw	r21,32(sp)
1000e044:	dd000717 	ldw	r20,28(sp)
1000e048:	dcc00617 	ldw	r19,24(sp)
1000e04c:	dc800517 	ldw	r18,20(sp)
1000e050:	dc400417 	ldw	r17,16(sp)
1000e054:	dc000317 	ldw	r16,12(sp)
1000e058:	dec00d04 	addi	sp,sp,52
1000e05c:	f800283a 	ret
1000e060:	91000117 	ldw	r4,4(r18)
1000e064:	88c00017 	ldw	r3,0(r17)
1000e068:	213fffc4 	addi	r4,r4,-1
1000e06c:	24001526 	beq	r4,r16,1000e0c4 <__call_exitprocs+0x150>
1000e070:	88000015 	stw	zero,0(r17)
1000e074:	183fe726 	beq	r3,zero,1000e014 <__alt_data_end+0xf800e014>
1000e078:	00800044 	movi	r2,1
1000e07c:	1408983a 	sll	r4,r2,r16
1000e080:	91406217 	ldw	r5,392(r18)
1000e084:	95000117 	ldw	r20,4(r18)
1000e088:	214a703a 	and	r5,r4,r5
1000e08c:	28000b26 	beq	r5,zero,1000e0bc <__call_exitprocs+0x148>
1000e090:	91406317 	ldw	r5,396(r18)
1000e094:	2148703a 	and	r4,r4,r5
1000e098:	20000c1e 	bne	r4,zero,1000e0cc <__call_exitprocs+0x158>
1000e09c:	99400017 	ldw	r5,0(r19)
1000e0a0:	d9000117 	ldw	r4,4(sp)
1000e0a4:	183ee83a 	callr	r3
1000e0a8:	90c00117 	ldw	r3,4(r18)
1000e0ac:	1d3fc51e 	bne	r3,r20,1000dfc4 <__alt_data_end+0xf800dfc4>
1000e0b0:	b8c00017 	ldw	r3,0(r23)
1000e0b4:	1cbfd726 	beq	r3,r18,1000e014 <__alt_data_end+0xf800e014>
1000e0b8:	003fc206 	br	1000dfc4 <__alt_data_end+0xf800dfc4>
1000e0bc:	183ee83a 	callr	r3
1000e0c0:	003ff906 	br	1000e0a8 <__alt_data_end+0xf800e0a8>
1000e0c4:	94000115 	stw	r16,4(r18)
1000e0c8:	003fea06 	br	1000e074 <__alt_data_end+0xf800e074>
1000e0cc:	99000017 	ldw	r4,0(r19)
1000e0d0:	183ee83a 	callr	r3
1000e0d4:	003ff406 	br	1000e0a8 <__alt_data_end+0xf800e0a8>
1000e0d8:	90c00117 	ldw	r3,4(r18)
1000e0dc:	1800071e 	bne	r3,zero,1000e0fc <__call_exitprocs+0x188>
1000e0e0:	90c00017 	ldw	r3,0(r18)
1000e0e4:	18000926 	beq	r3,zero,1000e10c <__call_exitprocs+0x198>
1000e0e8:	9009883a 	mov	r4,r18
1000e0ec:	b8c00015 	stw	r3,0(r23)
1000e0f0:	00000000 	call	10000000 <__alt_mem_sdram>
1000e0f4:	bc800017 	ldw	r18,0(r23)
1000e0f8:	003fb506 	br	1000dfd0 <__alt_data_end+0xf800dfd0>
1000e0fc:	90c00017 	ldw	r3,0(r18)
1000e100:	902f883a 	mov	r23,r18
1000e104:	1825883a 	mov	r18,r3
1000e108:	003fb106 	br	1000dfd0 <__alt_data_end+0xf800dfd0>
1000e10c:	0007883a 	mov	r3,zero
1000e110:	003ffb06 	br	1000e100 <__alt_data_end+0xf800e100>

1000e114 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000e114:	defffc04 	addi	sp,sp,-16
1000e118:	df000315 	stw	fp,12(sp)
1000e11c:	df000304 	addi	fp,sp,12
1000e120:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000e124:	0001883a 	nop
1000e128:	e0bfff17 	ldw	r2,-4(fp)
1000e12c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
1000e130:	e0bffd17 	ldw	r2,-12(fp)
1000e134:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000e138:	e0bffe17 	ldw	r2,-8(fp)
1000e13c:	10000226 	beq	r2,zero,1000e148 <_exit+0x34>
    ALT_SIM_FAIL();
1000e140:	002af070 	cmpltui	zero,zero,43969
1000e144:	00000106 	br	1000e14c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
1000e148:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000e14c:	003fff06 	br	1000e14c <__alt_data_end+0xf800e14c>
